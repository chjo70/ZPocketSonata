// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1.0
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stats_top,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.102000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=3250,HLS_SYN_LUT=3689}" *)

module stats_top (
        ap_clk,
        ap_rst_n,
        src_data_V_V_TDATA,
        src_data_V_V_TVALID,
        src_data_V_V_TREADY,
        hard_data_TDATA,
        hard_data_TVALID,
        hard_data_TREADY,
        hard_data_TLAST,
        error_data_TDATA,
        error_data_TVALID,
        error_data_TREADY,
        error_data_TLAST,
        fe_status_V_V_TDATA,
        fe_status_V_V_TVALID,
        fe_status_V_V_TREADY,
        s_axi_CNTRL_AWVALID,
        s_axi_CNTRL_AWREADY,
        s_axi_CNTRL_AWADDR,
        s_axi_CNTRL_WVALID,
        s_axi_CNTRL_WREADY,
        s_axi_CNTRL_WDATA,
        s_axi_CNTRL_WSTRB,
        s_axi_CNTRL_ARVALID,
        s_axi_CNTRL_ARREADY,
        s_axi_CNTRL_ARADDR,
        s_axi_CNTRL_RVALID,
        s_axi_CNTRL_RREADY,
        s_axi_CNTRL_RDATA,
        s_axi_CNTRL_RRESP,
        s_axi_CNTRL_BVALID,
        s_axi_CNTRL_BREADY,
        s_axi_CNTRL_BRESP,
        interrupt,
        cntrl_aclk,
        ap_rst_n_cntrl_aclk
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_pp0_stage0 = 8'd4;
parameter    ap_ST_fsm_state10 = 8'd8;
parameter    ap_ST_fsm_state11 = 8'd16;
parameter    ap_ST_fsm_state12 = 8'd32;
parameter    ap_ST_fsm_state13 = 8'd64;
parameter    ap_ST_fsm_state14 = 8'd128;
parameter    C_S_AXI_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CNTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] src_data_V_V_TDATA;
input   src_data_V_V_TVALID;
output   src_data_V_V_TREADY;
input  [127:0] hard_data_TDATA;
input   hard_data_TVALID;
output   hard_data_TREADY;
input  [0:0] hard_data_TLAST;
input  [127:0] error_data_TDATA;
input   error_data_TVALID;
output   error_data_TREADY;
input  [0:0] error_data_TLAST;
input  [39:0] fe_status_V_V_TDATA;
input   fe_status_V_V_TVALID;
output   fe_status_V_V_TREADY;
input   s_axi_CNTRL_AWVALID;
output   s_axi_CNTRL_AWREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_AWADDR;
input   s_axi_CNTRL_WVALID;
output   s_axi_CNTRL_WREADY;
input  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_WDATA;
input  [C_S_AXI_CNTRL_WSTRB_WIDTH - 1:0] s_axi_CNTRL_WSTRB;
input   s_axi_CNTRL_ARVALID;
output   s_axi_CNTRL_ARREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_ARADDR;
output   s_axi_CNTRL_RVALID;
input   s_axi_CNTRL_RREADY;
output  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_RDATA;
output  [1:0] s_axi_CNTRL_RRESP;
output   s_axi_CNTRL_BVALID;
input   s_axi_CNTRL_BREADY;
output  [1:0] s_axi_CNTRL_BRESP;
output   interrupt;
input   cntrl_aclk;
input   ap_rst_n_cntrl_aclk;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] k_V;
wire   [31:0] n_V;
wire   [127:0] mask_V;
wire   [31:0] num_blocks_V;
wire   [31:0] src_inc_parity_V;
reg   [127:0] src_data_V_V_0_data_out;
wire    src_data_V_V_0_vld_in;
wire    src_data_V_V_0_vld_out;
wire    src_data_V_V_0_ack_in;
reg    src_data_V_V_0_ack_out;
reg   [127:0] src_data_V_V_0_payload_A;
reg   [127:0] src_data_V_V_0_payload_B;
reg    src_data_V_V_0_sel_rd;
reg    src_data_V_V_0_sel_wr;
wire    src_data_V_V_0_sel;
wire    src_data_V_V_0_load_A;
wire    src_data_V_V_0_load_B;
reg   [1:0] src_data_V_V_0_state;
wire    src_data_V_V_0_state_cmp_full;
reg   [127:0] hard_data_V_data_V_0_data_out;
wire    hard_data_V_data_V_0_vld_in;
wire    hard_data_V_data_V_0_vld_out;
wire    hard_data_V_data_V_0_ack_in;
reg    hard_data_V_data_V_0_ack_out;
reg   [127:0] hard_data_V_data_V_0_payload_A;
reg   [127:0] hard_data_V_data_V_0_payload_B;
reg    hard_data_V_data_V_0_sel_rd;
reg    hard_data_V_data_V_0_sel_wr;
wire    hard_data_V_data_V_0_sel;
wire    hard_data_V_data_V_0_load_A;
wire    hard_data_V_data_V_0_load_B;
reg   [1:0] hard_data_V_data_V_0_state;
wire    hard_data_V_data_V_0_state_cmp_full;
wire    hard_data_V_last_V_0_vld_in;
reg    hard_data_V_last_V_0_ack_out;
reg   [1:0] hard_data_V_last_V_0_state;
reg   [127:0] error_data_V_data_V_0_data_out;
wire    error_data_V_data_V_0_vld_in;
wire    error_data_V_data_V_0_vld_out;
wire    error_data_V_data_V_0_ack_in;
reg    error_data_V_data_V_0_ack_out;
reg   [127:0] error_data_V_data_V_0_payload_A;
reg   [127:0] error_data_V_data_V_0_payload_B;
reg    error_data_V_data_V_0_sel_rd;
reg    error_data_V_data_V_0_sel_wr;
wire    error_data_V_data_V_0_sel;
wire    error_data_V_data_V_0_load_A;
wire    error_data_V_data_V_0_load_B;
reg   [1:0] error_data_V_data_V_0_state;
wire    error_data_V_data_V_0_state_cmp_full;
wire    error_data_V_last_V_0_vld_in;
reg    error_data_V_last_V_0_ack_out;
reg   [1:0] error_data_V_last_V_0_state;
reg   [39:0] fe_status_V_V_0_data_out;
wire    fe_status_V_V_0_vld_in;
wire    fe_status_V_V_0_vld_out;
wire    fe_status_V_V_0_ack_in;
reg    fe_status_V_V_0_ack_out;
reg   [39:0] fe_status_V_V_0_payload_A;
reg   [39:0] fe_status_V_V_0_payload_B;
reg    fe_status_V_V_0_sel_rd;
reg    fe_status_V_V_0_sel_wr;
wire    fe_status_V_V_0_sel;
wire    fe_status_V_V_0_load_A;
wire    fe_status_V_V_0_load_B;
reg   [1:0] fe_status_V_V_0_state;
wire    fe_status_V_V_0_state_cmp_full;
reg    src_data_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_1_reg_566;
wire    ap_CS_fsm_state13;
reg   [0:0] tmp_s_reg_553;
reg    hard_data_TDATA_blk_n;
reg    error_data_TDATA_blk_n;
wire    ap_CS_fsm_state12;
reg    fe_status_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state14;
reg    ap_rst_n_cntrl_aclk_inv;
reg   [31:0] p_3_reg_278;
reg   [31:0] p_4_reg_290;
reg   [31:0] j_V_reg_302;
reg   [31:0] num_blocks_V_read_reg_527;
reg   [127:0] mask_V_read_reg_533;
reg   [31:0] n_V_read_reg_538;
reg   [31:0] k_V_read_reg_543;
wire   [32:0] tmp_7_cast_fu_341_p1;
reg   [32:0] tmp_7_cast_reg_548;
wire   [0:0] tmp_s_fu_345_p2;
wire   [0:0] exitcond_fu_351_p2;
wire    ap_CS_fsm_state2;
wire   [31:0] block_cnt_int_V_fu_356_p2;
reg   [31:0] block_cnt_int_V_reg_561;
wire   [0:0] tmp_1_fu_362_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_1_reg_566_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_566_pp0_iter2_reg;
reg   [0:0] tmp_1_reg_566_pp0_iter3_reg;
reg   [0:0] tmp_1_reg_566_pp0_iter4_reg;
reg   [0:0] tmp_1_reg_566_pp0_iter5_reg;
wire   [0:0] tmp_8_fu_377_p2;
reg   [0:0] tmp_8_reg_570;
wire   [31:0] i_V_fu_382_p2;
reg   [31:0] i_V_reg_575;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] err_cnt_V_fu_428_p2;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] rerr_cnt_V_fu_438_p2;
wire   [31:0] raw_berr_int_V_fu_449_p2;
reg   [31:0] raw_berr_int_V_reg_593;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_9_fu_444_p2;
wire   [31:0] cor_berr_int_V_fu_455_p2;
reg   [31:0] cor_berr_int_V_reg_598;
wire   [31:0] p_0243_0_s_fu_473_p3;
reg   [31:0] p_0243_0_s_reg_603;
wire   [31:0] t_V_2_fu_493_p3;
reg   [31:0] t_V_2_reg_608;
wire   [31:0] j_V_1_fu_501_p2;
reg    ap_block_state13;
wire   [31:0] iter_cnt_int_V_fu_521_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire    grp_num_diff_fu_325_ap_start;
wire    grp_num_diff_fu_325_ap_done;
wire    grp_num_diff_fu_325_ap_idle;
wire    grp_num_diff_fu_325_ap_ready;
reg    grp_num_diff_fu_325_ap_ce;
wire   [127:0] grp_num_diff_fu_325_in2_V;
wire   [7:0] grp_num_diff_fu_325_ap_return;
wire    grp_num_diff_fu_333_ap_start;
wire    grp_num_diff_fu_333_ap_done;
wire    grp_num_diff_fu_333_ap_idle;
wire    grp_num_diff_fu_333_ap_ready;
reg    grp_num_diff_fu_333_ap_ce;
wire   [127:0] grp_num_diff_fu_333_in2_V;
wire   [7:0] grp_num_diff_fu_333_ap_return;
reg   [31:0] t_V_3_reg_202;
reg   [31:0] p_s_reg_213;
reg   [31:0] t_V_1_reg_226;
reg   [31:0] p_1_reg_239;
reg   [31:0] t_V_reg_252;
reg   [31:0] p_2_reg_265;
reg   [31:0] ap_phi_mux_j_V_phi_fu_306_p4;
reg   [31:0] j_reg_314;
wire    ap_CS_fsm_state10;
reg    grp_num_diff_fu_325_ap_start_reg;
wire   [127:0] src_bits_V_fu_402_p2;
reg    grp_num_diff_fu_333_ap_start_reg;
wire   [32:0] lhs_V_cast_fu_367_p1;
wire   [32:0] r_V_fu_371_p2;
wire   [127:0] r_V_4_fu_396_p3;
wire   [31:0] err_cnt_V_trunc_ext_fu_424_p1;
wire   [31:0] rerr_cnt_V_trunc_ext_fu_434_p1;
wire   [0:0] tmp_2_fu_461_p2;
wire   [31:0] cor_blerr_int_V_fu_467_p2;
wire   [0:0] tmp_3_fu_481_p2;
wire   [31:0] raw_blerr_int_V_fu_487_p2;
wire   [5:0] p_Result_s_fu_507_p4;
wire   [31:0] p_Result_2_fu_517_p1;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 src_data_V_V_0_sel_rd = 1'b0;
#0 src_data_V_V_0_sel_wr = 1'b0;
#0 src_data_V_V_0_state = 2'd0;
#0 hard_data_V_data_V_0_sel_rd = 1'b0;
#0 hard_data_V_data_V_0_sel_wr = 1'b0;
#0 hard_data_V_data_V_0_state = 2'd0;
#0 hard_data_V_last_V_0_state = 2'd0;
#0 error_data_V_data_V_0_sel_rd = 1'b0;
#0 error_data_V_data_V_0_sel_wr = 1'b0;
#0 error_data_V_data_V_0_state = 2'd0;
#0 error_data_V_last_V_0_state = 2'd0;
#0 fe_status_V_V_0_sel_rd = 1'b0;
#0 fe_status_V_V_0_sel_wr = 1'b0;
#0 fe_status_V_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 grp_num_diff_fu_325_ap_start_reg = 1'b0;
#0 grp_num_diff_fu_333_ap_start_reg = 1'b0;
end

stats_top_CNTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CNTRL_DATA_WIDTH ))
top_CNTRL_s_axi_U(
    .AWVALID(s_axi_CNTRL_AWVALID),
    .AWREADY(s_axi_CNTRL_AWREADY),
    .AWADDR(s_axi_CNTRL_AWADDR),
    .WVALID(s_axi_CNTRL_WVALID),
    .WREADY(s_axi_CNTRL_WREADY),
    .WDATA(s_axi_CNTRL_WDATA),
    .WSTRB(s_axi_CNTRL_WSTRB),
    .ARVALID(s_axi_CNTRL_ARVALID),
    .ARREADY(s_axi_CNTRL_ARREADY),
    .ARADDR(s_axi_CNTRL_ARADDR),
    .RVALID(s_axi_CNTRL_RVALID),
    .RREADY(s_axi_CNTRL_RREADY),
    .RDATA(s_axi_CNTRL_RDATA),
    .RRESP(s_axi_CNTRL_RRESP),
    .BVALID(s_axi_CNTRL_BVALID),
    .BREADY(s_axi_CNTRL_BREADY),
    .BRESP(s_axi_CNTRL_BRESP),
    .ACLK(cntrl_aclk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .k_V(k_V),
    .n_V(n_V),
    .mask_V(mask_V),
    .num_blocks_V(num_blocks_V),
    .src_inc_parity_V(src_inc_parity_V),
    .raw_berr_V(p_s_reg_213),
    .raw_blerr_V(t_V_1_reg_226),
    .cor_berr_V(p_1_reg_239),
    .cor_blerr_V(t_V_reg_252),
    .iter_cnt_V(p_2_reg_265),
    .block_cnt_V(num_blocks_V_read_reg_527),
    .clk(ap_clk),
    .rst(ap_rst_n_cntrl_aclk_inv)
);

stats_num_diff grp_num_diff_fu_325(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_num_diff_fu_325_ap_start),
    .ap_done(grp_num_diff_fu_325_ap_done),
    .ap_idle(grp_num_diff_fu_325_ap_idle),
    .ap_ready(grp_num_diff_fu_325_ap_ready),
    .ap_ce(grp_num_diff_fu_325_ap_ce),
    .in1_V(src_bits_V_fu_402_p2),
    .in2_V(grp_num_diff_fu_325_in2_V),
    .ap_return(grp_num_diff_fu_325_ap_return)
);

stats_num_diff grp_num_diff_fu_333(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_num_diff_fu_333_ap_start),
    .ap_done(grp_num_diff_fu_333_ap_done),
    .ap_idle(grp_num_diff_fu_333_ap_idle),
    .ap_ready(grp_num_diff_fu_333_ap_ready),
    .ap_ce(grp_num_diff_fu_333_ap_ce),
    .in1_V(src_bits_V_fu_402_p2),
    .in2_V(grp_num_diff_fu_333_in2_V),
    .ap_return(grp_num_diff_fu_333_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((exitcond_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((error_data_V_data_V_0_ack_out == 1'b1) & (error_data_V_data_V_0_vld_out == 1'b1))) begin
            error_data_V_data_V_0_sel_rd <= ~error_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((error_data_V_data_V_0_ack_in == 1'b1) & (error_data_V_data_V_0_vld_in == 1'b1))) begin
            error_data_V_data_V_0_sel_wr <= ~error_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((error_data_V_data_V_0_state == 2'd2) & (error_data_V_data_V_0_vld_in == 1'b0)) | ((error_data_V_data_V_0_state == 2'd3) & (error_data_V_data_V_0_vld_in == 1'b0) & (error_data_V_data_V_0_ack_out == 1'b1)))) begin
            error_data_V_data_V_0_state <= 2'd2;
        end else if ((((error_data_V_data_V_0_state == 2'd1) & (error_data_V_data_V_0_ack_out == 1'b0)) | ((error_data_V_data_V_0_state == 2'd3) & (error_data_V_data_V_0_ack_out == 1'b0) & (error_data_V_data_V_0_vld_in == 1'b1)))) begin
            error_data_V_data_V_0_state <= 2'd1;
        end else if (((~((error_data_V_data_V_0_vld_in == 1'b0) & (error_data_V_data_V_0_ack_out == 1'b1)) & ~((error_data_V_data_V_0_ack_out == 1'b0) & (error_data_V_data_V_0_vld_in == 1'b1)) & (error_data_V_data_V_0_state == 2'd3)) | ((error_data_V_data_V_0_state == 2'd1) & (error_data_V_data_V_0_ack_out == 1'b1)) | ((error_data_V_data_V_0_state == 2'd2) & (error_data_V_data_V_0_vld_in == 1'b1)))) begin
            error_data_V_data_V_0_state <= 2'd3;
        end else begin
            error_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        error_data_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((error_data_V_last_V_0_state == 2'd2) & (error_data_V_last_V_0_vld_in == 1'b0)) | ((error_data_V_last_V_0_state == 2'd3) & (error_data_V_last_V_0_vld_in == 1'b0) & (error_data_V_last_V_0_ack_out == 1'b1)))) begin
            error_data_V_last_V_0_state <= 2'd2;
        end else if ((((error_data_V_last_V_0_state == 2'd1) & (error_data_V_last_V_0_ack_out == 1'b0)) | ((error_data_V_last_V_0_state == 2'd3) & (error_data_V_last_V_0_ack_out == 1'b0) & (error_data_V_last_V_0_vld_in == 1'b1)))) begin
            error_data_V_last_V_0_state <= 2'd1;
        end else if (((~((error_data_V_last_V_0_vld_in == 1'b0) & (error_data_V_last_V_0_ack_out == 1'b1)) & ~((error_data_V_last_V_0_ack_out == 1'b0) & (error_data_V_last_V_0_vld_in == 1'b1)) & (error_data_V_last_V_0_state == 2'd3)) | ((error_data_V_last_V_0_state == 2'd1) & (error_data_V_last_V_0_ack_out == 1'b1)) | ((error_data_V_last_V_0_state == 2'd2) & (error_data_V_last_V_0_vld_in == 1'b1)))) begin
            error_data_V_last_V_0_state <= 2'd3;
        end else begin
            error_data_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_status_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((fe_status_V_V_0_ack_out == 1'b1) & (fe_status_V_V_0_vld_out == 1'b1))) begin
            fe_status_V_V_0_sel_rd <= ~fe_status_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_status_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((fe_status_V_V_0_ack_in == 1'b1) & (fe_status_V_V_0_vld_in == 1'b1))) begin
            fe_status_V_V_0_sel_wr <= ~fe_status_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        fe_status_V_V_0_state <= 2'd0;
    end else begin
        if ((((fe_status_V_V_0_state == 2'd2) & (fe_status_V_V_0_vld_in == 1'b0)) | ((fe_status_V_V_0_state == 2'd3) & (fe_status_V_V_0_vld_in == 1'b0) & (fe_status_V_V_0_ack_out == 1'b1)))) begin
            fe_status_V_V_0_state <= 2'd2;
        end else if ((((fe_status_V_V_0_state == 2'd1) & (fe_status_V_V_0_ack_out == 1'b0)) | ((fe_status_V_V_0_state == 2'd3) & (fe_status_V_V_0_ack_out == 1'b0) & (fe_status_V_V_0_vld_in == 1'b1)))) begin
            fe_status_V_V_0_state <= 2'd1;
        end else if (((~((fe_status_V_V_0_vld_in == 1'b0) & (fe_status_V_V_0_ack_out == 1'b1)) & ~((fe_status_V_V_0_ack_out == 1'b0) & (fe_status_V_V_0_vld_in == 1'b1)) & (fe_status_V_V_0_state == 2'd3)) | ((fe_status_V_V_0_state == 2'd1) & (fe_status_V_V_0_ack_out == 1'b1)) | ((fe_status_V_V_0_state == 2'd2) & (fe_status_V_V_0_vld_in == 1'b1)))) begin
            fe_status_V_V_0_state <= 2'd3;
        end else begin
            fe_status_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_num_diff_fu_325_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_1_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_num_diff_fu_325_ap_start_reg <= 1'b1;
        end else if ((grp_num_diff_fu_325_ap_ready == 1'b1)) begin
            grp_num_diff_fu_325_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_num_diff_fu_333_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_1_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_num_diff_fu_333_ap_start_reg <= 1'b1;
        end else if ((grp_num_diff_fu_333_ap_ready == 1'b1)) begin
            grp_num_diff_fu_333_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((hard_data_V_data_V_0_ack_out == 1'b1) & (hard_data_V_data_V_0_vld_out == 1'b1))) begin
            hard_data_V_data_V_0_sel_rd <= ~hard_data_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((hard_data_V_data_V_0_ack_in == 1'b1) & (hard_data_V_data_V_0_vld_in == 1'b1))) begin
            hard_data_V_data_V_0_sel_wr <= ~hard_data_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((hard_data_V_data_V_0_state == 2'd2) & (hard_data_V_data_V_0_vld_in == 1'b0)) | ((hard_data_V_data_V_0_state == 2'd3) & (hard_data_V_data_V_0_vld_in == 1'b0) & (hard_data_V_data_V_0_ack_out == 1'b1)))) begin
            hard_data_V_data_V_0_state <= 2'd2;
        end else if ((((hard_data_V_data_V_0_state == 2'd1) & (hard_data_V_data_V_0_ack_out == 1'b0)) | ((hard_data_V_data_V_0_state == 2'd3) & (hard_data_V_data_V_0_ack_out == 1'b0) & (hard_data_V_data_V_0_vld_in == 1'b1)))) begin
            hard_data_V_data_V_0_state <= 2'd1;
        end else if (((~((hard_data_V_data_V_0_vld_in == 1'b0) & (hard_data_V_data_V_0_ack_out == 1'b1)) & ~((hard_data_V_data_V_0_ack_out == 1'b0) & (hard_data_V_data_V_0_vld_in == 1'b1)) & (hard_data_V_data_V_0_state == 2'd3)) | ((hard_data_V_data_V_0_state == 2'd1) & (hard_data_V_data_V_0_ack_out == 1'b1)) | ((hard_data_V_data_V_0_state == 2'd2) & (hard_data_V_data_V_0_vld_in == 1'b1)))) begin
            hard_data_V_data_V_0_state <= 2'd3;
        end else begin
            hard_data_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((hard_data_V_last_V_0_state == 2'd2) & (hard_data_V_last_V_0_vld_in == 1'b0)) | ((hard_data_V_last_V_0_state == 2'd3) & (hard_data_V_last_V_0_vld_in == 1'b0) & (hard_data_V_last_V_0_ack_out == 1'b1)))) begin
            hard_data_V_last_V_0_state <= 2'd2;
        end else if ((((hard_data_V_last_V_0_state == 2'd1) & (hard_data_V_last_V_0_ack_out == 1'b0)) | ((hard_data_V_last_V_0_state == 2'd3) & (hard_data_V_last_V_0_ack_out == 1'b0) & (hard_data_V_last_V_0_vld_in == 1'b1)))) begin
            hard_data_V_last_V_0_state <= 2'd1;
        end else if (((~((hard_data_V_last_V_0_vld_in == 1'b0) & (hard_data_V_last_V_0_ack_out == 1'b1)) & ~((hard_data_V_last_V_0_ack_out == 1'b0) & (hard_data_V_last_V_0_vld_in == 1'b1)) & (hard_data_V_last_V_0_state == 2'd3)) | ((hard_data_V_last_V_0_state == 2'd1) & (hard_data_V_last_V_0_ack_out == 1'b1)) | ((hard_data_V_last_V_0_state == 2'd2) & (hard_data_V_last_V_0_vld_in == 1'b1)))) begin
            hard_data_V_last_V_0_state <= 2'd3;
        end else begin
            hard_data_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_data_V_V_0_ack_out == 1'b1) & (src_data_V_V_0_vld_out == 1'b1))) begin
            src_data_V_V_0_sel_rd <= ~src_data_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_data_V_V_0_ack_in == 1'b1) & (src_data_V_V_0_vld_in == 1'b1))) begin
            src_data_V_V_0_sel_wr <= ~src_data_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_data_V_V_0_state <= 2'd0;
    end else begin
        if ((((src_data_V_V_0_state == 2'd2) & (src_data_V_V_0_vld_in == 1'b0)) | ((src_data_V_V_0_state == 2'd3) & (src_data_V_V_0_vld_in == 1'b0) & (src_data_V_V_0_ack_out == 1'b1)))) begin
            src_data_V_V_0_state <= 2'd2;
        end else if ((((src_data_V_V_0_state == 2'd1) & (src_data_V_V_0_ack_out == 1'b0)) | ((src_data_V_V_0_state == 2'd3) & (src_data_V_V_0_ack_out == 1'b0) & (src_data_V_V_0_vld_in == 1'b1)))) begin
            src_data_V_V_0_state <= 2'd1;
        end else if (((~((src_data_V_V_0_vld_in == 1'b0) & (src_data_V_V_0_ack_out == 1'b1)) & ~((src_data_V_V_0_ack_out == 1'b0) & (src_data_V_V_0_vld_in == 1'b1)) & (src_data_V_V_0_state == 2'd3)) | ((src_data_V_V_0_state == 2'd1) & (src_data_V_V_0_ack_out == 1'b1)) | ((src_data_V_V_0_state == 2'd2) & (src_data_V_V_0_vld_in == 1'b1)))) begin
            src_data_V_V_0_state <= 2'd3;
        end else begin
            src_data_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_V_reg_302 <= i_V_reg_575;
    end else if (((exitcond_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_V_reg_302 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_reg_314 <= j_V_reg_302;
    end else if ((~((tmp_s_reg_553 == 1'd0) & (src_data_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
        j_reg_314 <= j_V_1_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        p_1_reg_239 <= cor_berr_int_V_reg_598;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_1_reg_239 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        p_2_reg_265 <= iter_cnt_int_V_fu_521_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_2_reg_265 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_566_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        p_3_reg_278 <= err_cnt_V_fu_428_p2;
    end else if (((exitcond_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_3_reg_278 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_reg_566_pp0_iter5_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        p_4_reg_290 <= rerr_cnt_V_fu_438_p2;
    end else if (((exitcond_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_4_reg_290 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        p_s_reg_213 <= raw_berr_int_V_reg_593;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_s_reg_213 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        t_V_1_reg_226 <= t_V_2_reg_608;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_1_reg_226 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        t_V_3_reg_202 <= block_cnt_int_V_reg_561;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_3_reg_202 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        t_V_reg_252 <= p_0243_0_s_reg_603;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_reg_252 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        block_cnt_int_V_reg_561 <= block_cnt_int_V_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_9_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        cor_berr_int_V_reg_598 <= cor_berr_int_V_fu_455_p2;
        p_0243_0_s_reg_603 <= p_0243_0_s_fu_473_p3;
        raw_berr_int_V_reg_593 <= raw_berr_int_V_fu_449_p2;
        t_V_2_reg_608 <= t_V_2_fu_493_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((error_data_V_data_V_0_load_A == 1'b1)) begin
        error_data_V_data_V_0_payload_A <= error_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((error_data_V_data_V_0_load_B == 1'b1)) begin
        error_data_V_data_V_0_payload_B <= error_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((fe_status_V_V_0_load_A == 1'b1)) begin
        fe_status_V_V_0_payload_A <= fe_status_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((fe_status_V_V_0_load_B == 1'b1)) begin
        fe_status_V_V_0_payload_B <= fe_status_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_V_data_V_0_load_A == 1'b1)) begin
        hard_data_V_data_V_0_payload_A <= hard_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_V_data_V_0_load_B == 1'b1)) begin
        hard_data_V_data_V_0_payload_B <= hard_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_V_reg_575 <= i_V_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        k_V_read_reg_543 <= k_V;
        mask_V_read_reg_533 <= mask_V;
        n_V_read_reg_538 <= n_V;
        num_blocks_V_read_reg_527 <= num_blocks_V;
        tmp_7_cast_reg_548[31 : 0] <= tmp_7_cast_fu_341_p1[31 : 0];
        tmp_s_reg_553 <= tmp_s_fu_345_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((src_data_V_V_0_load_A == 1'b1)) begin
        src_data_V_V_0_payload_A <= src_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_data_V_V_0_load_B == 1'b1)) begin
        src_data_V_V_0_payload_B <= src_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_1_reg_566 <= tmp_1_fu_362_p2;
        tmp_1_reg_566_pp0_iter1_reg <= tmp_1_reg_566;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_1_reg_566_pp0_iter2_reg <= tmp_1_reg_566_pp0_iter1_reg;
        tmp_1_reg_566_pp0_iter3_reg <= tmp_1_reg_566_pp0_iter2_reg;
        tmp_1_reg_566_pp0_iter4_reg <= tmp_1_reg_566_pp0_iter3_reg;
        tmp_1_reg_566_pp0_iter5_reg <= tmp_1_reg_566_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_362_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_8_reg_570 <= tmp_8_fu_377_p2;
    end
end

always @ (*) begin
    if ((tmp_1_fu_362_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_j_V_phi_fu_306_p4 = i_V_reg_575;
    end else begin
        ap_phi_mux_j_V_phi_fu_306_p4 = j_V_reg_302;
    end
end

always @ (*) begin
    if (((exitcond_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        error_data_TDATA_blk_n = error_data_V_data_V_0_state[1'd0];
    end else begin
        error_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((error_data_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        error_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        error_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((error_data_V_data_V_0_sel == 1'b1)) begin
        error_data_V_data_V_0_data_out = error_data_V_data_V_0_payload_B;
    end else begin
        error_data_V_data_V_0_data_out = error_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((error_data_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12)) | ((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        error_data_V_last_V_0_ack_out = 1'b1;
    end else begin
        error_data_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        fe_status_V_V_0_ack_out = 1'b1;
    end else begin
        fe_status_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((fe_status_V_V_0_sel == 1'b1)) begin
        fe_status_V_V_0_data_out = fe_status_V_V_0_payload_B;
    end else begin
        fe_status_V_V_0_data_out = fe_status_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        fe_status_V_V_TDATA_blk_n = fe_status_V_V_0_state[1'd0];
    end else begin
        fe_status_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_num_diff_fu_325_ap_ce = 1'b1;
    end else begin
        grp_num_diff_fu_325_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_num_diff_fu_333_ap_ce = 1'b1;
    end else begin
        grp_num_diff_fu_333_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hard_data_TDATA_blk_n = hard_data_V_data_V_0_state[1'd0];
    end else begin
        hard_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hard_data_V_data_V_0_ack_out = 1'b1;
    end else begin
        hard_data_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((hard_data_V_data_V_0_sel == 1'b1)) begin
        hard_data_V_data_V_0_data_out = hard_data_V_data_V_0_payload_B;
    end else begin
        hard_data_V_data_V_0_data_out = hard_data_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hard_data_V_last_V_0_ack_out = 1'b1;
    end else begin
        hard_data_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((~((tmp_s_reg_553 == 1'd0) & (src_data_V_V_0_vld_out == 1'b0)) & (tmp_s_reg_553 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        src_data_V_V_0_ack_out = 1'b1;
    end else begin
        src_data_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_data_V_V_0_sel == 1'b1)) begin
        src_data_V_V_0_data_out = src_data_V_V_0_payload_B;
    end else begin
        src_data_V_V_0_data_out = src_data_V_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((tmp_s_reg_553 == 1'd0) & (1'b1 == ap_CS_fsm_state13)) | ((tmp_1_reg_566 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        src_data_V_V_TDATA_blk_n = src_data_V_V_0_state[1'd0];
    end else begin
        src_data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_351_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((tmp_1_fu_362_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((tmp_1_fu_362_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_9_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((error_data_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((tmp_s_reg_553 == 1'd0) & (src_data_V_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((fe_status_V_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_1_reg_566 == 1'd1) & (error_data_V_data_V_0_vld_out == 1'b0)) | ((tmp_1_reg_566 == 1'd1) & (src_data_V_V_0_vld_out == 1'b0)) | ((tmp_1_reg_566 == 1'd1) & (hard_data_V_data_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (((tmp_1_reg_566 == 1'd1) & (error_data_V_data_V_0_vld_out == 1'b0)) | ((tmp_1_reg_566 == 1'd1) & (src_data_V_V_0_vld_out == 1'b0)) | ((tmp_1_reg_566 == 1'd1) & (hard_data_V_data_V_0_vld_out == 1'b0))));
end

always @ (*) begin
    ap_block_state13 = ((tmp_s_reg_553 == 1'd0) & (src_data_V_V_0_vld_out == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (((tmp_1_reg_566 == 1'd1) & (error_data_V_data_V_0_vld_out == 1'b0)) | ((tmp_1_reg_566 == 1'd1) & (src_data_V_V_0_vld_out == 1'b0)) | ((tmp_1_reg_566 == 1'd1) & (hard_data_V_data_V_0_vld_out == 1'b0)));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_cntrl_aclk_inv = ~ap_rst_n_cntrl_aclk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign block_cnt_int_V_fu_356_p2 = (t_V_3_reg_202 + 32'd1);

assign cor_berr_int_V_fu_455_p2 = (p_3_reg_278 + p_1_reg_239);

assign cor_blerr_int_V_fu_467_p2 = (t_V_reg_252 + 32'd1);

assign err_cnt_V_fu_428_p2 = (err_cnt_V_trunc_ext_fu_424_p1 + p_3_reg_278);

assign err_cnt_V_trunc_ext_fu_424_p1 = grp_num_diff_fu_325_ap_return;

assign error_data_TREADY = error_data_V_last_V_0_state[1'd1];

assign error_data_V_data_V_0_ack_in = error_data_V_data_V_0_state[1'd1];

assign error_data_V_data_V_0_load_A = (~error_data_V_data_V_0_sel_wr & error_data_V_data_V_0_state_cmp_full);

assign error_data_V_data_V_0_load_B = (error_data_V_data_V_0_state_cmp_full & error_data_V_data_V_0_sel_wr);

assign error_data_V_data_V_0_sel = error_data_V_data_V_0_sel_rd;

assign error_data_V_data_V_0_state_cmp_full = ((error_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign error_data_V_data_V_0_vld_in = error_data_TVALID;

assign error_data_V_data_V_0_vld_out = error_data_V_data_V_0_state[1'd0];

assign error_data_V_last_V_0_vld_in = error_data_TVALID;

assign exitcond_fu_351_p2 = ((t_V_3_reg_202 == num_blocks_V_read_reg_527) ? 1'b1 : 1'b0);

assign fe_status_V_V_0_ack_in = fe_status_V_V_0_state[1'd1];

assign fe_status_V_V_0_load_A = (fe_status_V_V_0_state_cmp_full & ~fe_status_V_V_0_sel_wr);

assign fe_status_V_V_0_load_B = (fe_status_V_V_0_state_cmp_full & fe_status_V_V_0_sel_wr);

assign fe_status_V_V_0_sel = fe_status_V_V_0_sel_rd;

assign fe_status_V_V_0_state_cmp_full = ((fe_status_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign fe_status_V_V_0_vld_in = fe_status_V_V_TVALID;

assign fe_status_V_V_0_vld_out = fe_status_V_V_0_state[1'd0];

assign fe_status_V_V_TREADY = fe_status_V_V_0_state[1'd1];

assign grp_num_diff_fu_325_ap_start = grp_num_diff_fu_325_ap_start_reg;

assign grp_num_diff_fu_325_in2_V = (r_V_4_fu_396_p3 & hard_data_V_data_V_0_data_out);

assign grp_num_diff_fu_333_ap_start = grp_num_diff_fu_333_ap_start_reg;

assign grp_num_diff_fu_333_in2_V = (r_V_4_fu_396_p3 & error_data_V_data_V_0_data_out);

assign hard_data_TREADY = hard_data_V_last_V_0_state[1'd1];

assign hard_data_V_data_V_0_ack_in = hard_data_V_data_V_0_state[1'd1];

assign hard_data_V_data_V_0_load_A = (hard_data_V_data_V_0_state_cmp_full & ~hard_data_V_data_V_0_sel_wr);

assign hard_data_V_data_V_0_load_B = (hard_data_V_data_V_0_state_cmp_full & hard_data_V_data_V_0_sel_wr);

assign hard_data_V_data_V_0_sel = hard_data_V_data_V_0_sel_rd;

assign hard_data_V_data_V_0_state_cmp_full = ((hard_data_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_V_data_V_0_vld_in = hard_data_TVALID;

assign hard_data_V_data_V_0_vld_out = hard_data_V_data_V_0_state[1'd0];

assign hard_data_V_last_V_0_vld_in = hard_data_TVALID;

assign i_V_fu_382_p2 = (ap_phi_mux_j_V_phi_fu_306_p4 + 32'd128);

assign iter_cnt_int_V_fu_521_p2 = (p_Result_2_fu_517_p1 + p_2_reg_265);

assign j_V_1_fu_501_p2 = (j_reg_314 + 32'd128);

assign lhs_V_cast_fu_367_p1 = ap_phi_mux_j_V_phi_fu_306_p4;

assign p_0243_0_s_fu_473_p3 = ((tmp_2_fu_461_p2[0:0] === 1'b1) ? t_V_reg_252 : cor_blerr_int_V_fu_467_p2);

assign p_Result_2_fu_517_p1 = p_Result_s_fu_507_p4;

assign p_Result_s_fu_507_p4 = {{fe_status_V_V_0_data_out[23:18]}};

assign r_V_4_fu_396_p3 = ((tmp_8_reg_570[0:0] === 1'b1) ? 128'd340282366920938463463374607431768211455 : mask_V_read_reg_533);

assign r_V_fu_371_p2 = (lhs_V_cast_fu_367_p1 + 33'd128);

assign raw_berr_int_V_fu_449_p2 = (p_4_reg_290 + p_s_reg_213);

assign raw_blerr_int_V_fu_487_p2 = (t_V_1_reg_226 + 32'd1);

assign rerr_cnt_V_fu_438_p2 = (rerr_cnt_V_trunc_ext_fu_434_p1 + p_4_reg_290);

assign rerr_cnt_V_trunc_ext_fu_434_p1 = grp_num_diff_fu_333_ap_return;

assign src_bits_V_fu_402_p2 = (src_data_V_V_0_data_out & r_V_4_fu_396_p3);

assign src_data_V_V_0_ack_in = src_data_V_V_0_state[1'd1];

assign src_data_V_V_0_load_A = (src_data_V_V_0_state_cmp_full & ~src_data_V_V_0_sel_wr);

assign src_data_V_V_0_load_B = (src_data_V_V_0_state_cmp_full & src_data_V_V_0_sel_wr);

assign src_data_V_V_0_sel = src_data_V_V_0_sel_rd;

assign src_data_V_V_0_state_cmp_full = ((src_data_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_data_V_V_0_vld_in = src_data_V_V_TVALID;

assign src_data_V_V_0_vld_out = src_data_V_V_0_state[1'd0];

assign src_data_V_V_TREADY = src_data_V_V_0_state[1'd1];

assign t_V_2_fu_493_p3 = ((tmp_3_fu_481_p2[0:0] === 1'b1) ? t_V_1_reg_226 : raw_blerr_int_V_fu_487_p2);

assign tmp_1_fu_362_p2 = ((ap_phi_mux_j_V_phi_fu_306_p4 < k_V_read_reg_543) ? 1'b1 : 1'b0);

assign tmp_2_fu_461_p2 = ((p_3_reg_278 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_3_fu_481_p2 = ((p_4_reg_290 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_7_cast_fu_341_p1 = k_V;

assign tmp_8_fu_377_p2 = ((r_V_fu_371_p2 < tmp_7_cast_reg_548) ? 1'b1 : 1'b0);

assign tmp_9_fu_444_p2 = ((j_reg_314 < n_V_read_reg_538) ? 1'b1 : 1'b0);

assign tmp_s_fu_345_p2 = ((src_inc_parity_V == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_7_cast_reg_548[32] <= 1'b0;
end

endmodule //stats_top
