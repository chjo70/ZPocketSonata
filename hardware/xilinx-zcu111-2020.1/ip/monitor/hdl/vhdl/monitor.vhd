-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1.0
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity monitor is
generic (
    C_S_AXI_CNTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CNTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    rtc_V : IN STD_LOGIC_VECTOR (31 downto 0);
    tvalid_V : IN STD_LOGIC_VECTOR (0 downto 0);
    tready_V : IN STD_LOGIC_VECTOR (0 downto 0);
    tlast_V : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CNTRL_AWVALID : IN STD_LOGIC;
    s_axi_CNTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CNTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_WVALID : IN STD_LOGIC;
    s_axi_CNTRL_WREADY : OUT STD_LOGIC;
    s_axi_CNTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CNTRL_ARVALID : IN STD_LOGIC;
    s_axi_CNTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CNTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_RVALID : OUT STD_LOGIC;
    s_axi_CNTRL_RREADY : IN STD_LOGIC;
    s_axi_CNTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CNTRL_BVALID : OUT STD_LOGIC;
    s_axi_CNTRL_BREADY : IN STD_LOGIC;
    s_axi_CNTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    cntrl_aclk : IN STD_LOGIC;
    ap_rst_n_cntrl_aclk : IN STD_LOGIC );
end;


architecture behav of monitor is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "monitor,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.672000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=352,HLS_SYN_LUT=510}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal num_blocks_V : STD_LOGIC_VECTOR (31 downto 0);
    signal first_V : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_rst_n_cntrl_aclk_inv : STD_LOGIC;
    signal num_blocks_V_read_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_044_1_fu_169_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_124 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_fu_60 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge119_demorgan_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_load_load_fu_189_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal time_stamp_V_1_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal t_V_1_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_V_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal first_V_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal stalled_cnt_V_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_044_0_s_fu_161_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component monitor_CNTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        num_blocks_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        first_V : IN STD_LOGIC_VECTOR (31 downto 0);
        last_V : IN STD_LOGIC_VECTOR (31 downto 0);
        stalled_V : IN STD_LOGIC_VECTOR (31 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    monitor_CNTRL_s_axi_U : component monitor_CNTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CNTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CNTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CNTRL_AWVALID,
        AWREADY => s_axi_CNTRL_AWREADY,
        AWADDR => s_axi_CNTRL_AWADDR,
        WVALID => s_axi_CNTRL_WVALID,
        WREADY => s_axi_CNTRL_WREADY,
        WDATA => s_axi_CNTRL_WDATA,
        WSTRB => s_axi_CNTRL_WSTRB,
        ARVALID => s_axi_CNTRL_ARVALID,
        ARREADY => s_axi_CNTRL_ARREADY,
        ARADDR => s_axi_CNTRL_ARADDR,
        RVALID => s_axi_CNTRL_RVALID,
        RREADY => s_axi_CNTRL_RREADY,
        RDATA => s_axi_CNTRL_RDATA,
        RRESP => s_axi_CNTRL_RRESP,
        BVALID => s_axi_CNTRL_BVALID,
        BREADY => s_axi_CNTRL_BREADY,
        BRESP => s_axi_CNTRL_BRESP,
        ACLK => cntrl_aclk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        num_blocks_V => num_blocks_V,
        first_V => first_V,
        last_V => time_stamp_V_1_fu_64,
        stalled_V => t_V_reg_124,
        clk => ap_clk,
        rst => ap_rst_n_cntrl_aclk_inv);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    first_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                first_V_preg <= ap_const_lv32_0;
            else
                if (((p_load_load_fu_189_p1 = ap_const_lv1_1) and (brmerge119_demorgan_fu_183_p2 = ap_const_lv1_1) and (tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    first_V_preg <= rtc_V;
                end if; 
            end if;
        end if;
    end process;


    p_s_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((p_load_load_fu_189_p1 = ap_const_lv1_1) and (brmerge119_demorgan_fu_183_p2 = ap_const_lv1_1) and (tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_s_fu_60 <= ap_const_lv1_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_s_fu_60 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    t_V_1_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge119_demorgan_fu_183_p2 = ap_const_lv1_1) and (tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_1_fu_68 <= block_V_fu_192_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_1_fu_68 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_124 <= p_044_1_fu_169_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_124 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                num_blocks_V_read_reg_237 <= num_blocks_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((brmerge119_demorgan_fu_183_p2 = ap_const_lv1_1) and (tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                time_stamp_V_1_fu_64 <= rtc_V;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_150_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_cntrl_aclk_inv_assign_proc : process(ap_rst_n_cntrl_aclk)
    begin
                ap_rst_n_cntrl_aclk_inv <= not(ap_rst_n_cntrl_aclk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    block_V_fu_192_p2 <= std_logic_vector(unsigned(t_V_1_fu_68) + unsigned(ap_const_lv32_1));
    brmerge119_demorgan_fu_183_p2 <= (tvalid_V and tmp1_fu_177_p2);

    first_V_assign_proc : process(rtc_V, ap_CS_fsm_state2, tmp_fu_150_p2, brmerge119_demorgan_fu_183_p2, p_load_load_fu_189_p1, first_V_preg)
    begin
        if (((p_load_load_fu_189_p1 = ap_const_lv1_1) and (brmerge119_demorgan_fu_183_p2 = ap_const_lv1_1) and (tmp_fu_150_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            first_V <= rtc_V;
        else 
            first_V <= first_V_preg;
        end if; 
    end process;

    p_044_0_s_fu_161_p3 <= 
        t_V_reg_124 when (tready_V(0) = '1') else 
        stalled_cnt_V_fu_155_p2;
    p_044_1_fu_169_p3 <= 
        p_044_0_s_fu_161_p3 when (tvalid_V(0) = '1') else 
        t_V_reg_124;
    p_load_load_fu_189_p1 <= p_s_fu_60;
    stalled_cnt_V_fu_155_p2 <= std_logic_vector(unsigned(t_V_reg_124) + unsigned(ap_const_lv32_1));
    tmp1_fu_177_p2 <= (tready_V and tlast_V);
    tmp_fu_150_p2 <= "1" when (t_V_1_fu_68 = num_blocks_V_read_reg_237) else "0";
end behav;
