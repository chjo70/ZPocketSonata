-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1.0
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stats_top is
generic (
    C_S_AXI_CNTRL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CNTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    src_data_V_V_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    src_data_V_V_TVALID : IN STD_LOGIC;
    src_data_V_V_TREADY : OUT STD_LOGIC;
    hard_data_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    hard_data_TVALID : IN STD_LOGIC;
    hard_data_TREADY : OUT STD_LOGIC;
    hard_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    error_data_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    error_data_TVALID : IN STD_LOGIC;
    error_data_TREADY : OUT STD_LOGIC;
    error_data_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    fe_status_V_V_TDATA : IN STD_LOGIC_VECTOR (39 downto 0);
    fe_status_V_V_TVALID : IN STD_LOGIC;
    fe_status_V_V_TREADY : OUT STD_LOGIC;
    s_axi_CNTRL_AWVALID : IN STD_LOGIC;
    s_axi_CNTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CNTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_WVALID : IN STD_LOGIC;
    s_axi_CNTRL_WREADY : OUT STD_LOGIC;
    s_axi_CNTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CNTRL_ARVALID : IN STD_LOGIC;
    s_axi_CNTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CNTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_RVALID : OUT STD_LOGIC;
    s_axi_CNTRL_RREADY : IN STD_LOGIC;
    s_axi_CNTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CNTRL_BVALID : OUT STD_LOGIC;
    s_axi_CNTRL_BREADY : IN STD_LOGIC;
    s_axi_CNTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    cntrl_aclk : IN STD_LOGIC;
    ap_rst_n_cntrl_aclk : IN STD_LOGIC );
end;


architecture behav of stats_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "stats_top,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.102000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=3250,HLS_SYN_LUT=3689}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv33_80 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal k_V : STD_LOGIC_VECTOR (31 downto 0);
    signal n_V : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_V : STD_LOGIC_VECTOR (127 downto 0);
    signal num_blocks_V : STD_LOGIC_VECTOR (31 downto 0);
    signal src_inc_parity_V : STD_LOGIC_VECTOR (31 downto 0);
    signal src_data_V_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal src_data_V_V_0_vld_in : STD_LOGIC;
    signal src_data_V_V_0_vld_out : STD_LOGIC;
    signal src_data_V_V_0_ack_in : STD_LOGIC;
    signal src_data_V_V_0_ack_out : STD_LOGIC;
    signal src_data_V_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal src_data_V_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal src_data_V_V_0_sel_rd : STD_LOGIC := '0';
    signal src_data_V_V_0_sel_wr : STD_LOGIC := '0';
    signal src_data_V_V_0_sel : STD_LOGIC;
    signal src_data_V_V_0_load_A : STD_LOGIC;
    signal src_data_V_V_0_load_B : STD_LOGIC;
    signal src_data_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_data_V_V_0_state_cmp_full : STD_LOGIC;
    signal hard_data_V_data_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal hard_data_V_data_V_0_vld_in : STD_LOGIC;
    signal hard_data_V_data_V_0_vld_out : STD_LOGIC;
    signal hard_data_V_data_V_0_ack_in : STD_LOGIC;
    signal hard_data_V_data_V_0_ack_out : STD_LOGIC;
    signal hard_data_V_data_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal hard_data_V_data_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal hard_data_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal hard_data_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal hard_data_V_data_V_0_sel : STD_LOGIC;
    signal hard_data_V_data_V_0_load_A : STD_LOGIC;
    signal hard_data_V_data_V_0_load_B : STD_LOGIC;
    signal hard_data_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_data_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal hard_data_V_last_V_0_vld_in : STD_LOGIC;
    signal hard_data_V_last_V_0_ack_out : STD_LOGIC;
    signal hard_data_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal error_data_V_data_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal error_data_V_data_V_0_vld_in : STD_LOGIC;
    signal error_data_V_data_V_0_vld_out : STD_LOGIC;
    signal error_data_V_data_V_0_ack_in : STD_LOGIC;
    signal error_data_V_data_V_0_ack_out : STD_LOGIC;
    signal error_data_V_data_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal error_data_V_data_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal error_data_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal error_data_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal error_data_V_data_V_0_sel : STD_LOGIC;
    signal error_data_V_data_V_0_load_A : STD_LOGIC;
    signal error_data_V_data_V_0_load_B : STD_LOGIC;
    signal error_data_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal error_data_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal error_data_V_last_V_0_vld_in : STD_LOGIC;
    signal error_data_V_last_V_0_ack_out : STD_LOGIC;
    signal error_data_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fe_status_V_V_0_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal fe_status_V_V_0_vld_in : STD_LOGIC;
    signal fe_status_V_V_0_vld_out : STD_LOGIC;
    signal fe_status_V_V_0_ack_in : STD_LOGIC;
    signal fe_status_V_V_0_ack_out : STD_LOGIC;
    signal fe_status_V_V_0_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal fe_status_V_V_0_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal fe_status_V_V_0_sel_rd : STD_LOGIC := '0';
    signal fe_status_V_V_0_sel_wr : STD_LOGIC := '0';
    signal fe_status_V_V_0_sel : STD_LOGIC;
    signal fe_status_V_V_0_load_A : STD_LOGIC;
    signal fe_status_V_V_0_load_B : STD_LOGIC;
    signal fe_status_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal fe_status_V_V_0_state_cmp_full : STD_LOGIC;
    signal src_data_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_1_reg_566 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_s_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal hard_data_TDATA_blk_n : STD_LOGIC;
    signal error_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal fe_status_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_rst_n_cntrl_aclk_inv : STD_LOGIC;
    signal p_3_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_4_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_reg_302 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_blocks_V_read_reg_527 : STD_LOGIC_VECTOR (31 downto 0);
    signal mask_V_read_reg_533 : STD_LOGIC_VECTOR (127 downto 0);
    signal n_V_read_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_V_read_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_fu_341_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_cast_reg_548 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal block_cnt_int_V_fu_356_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cnt_int_V_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_1_reg_566_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_566_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_566_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_566_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_566_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_570 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_V_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal err_cnt_V_fu_428_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal rerr_cnt_V_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_berr_int_V_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal raw_berr_int_V_reg_593 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_9_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cor_berr_int_V_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal cor_berr_int_V_reg_598 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0243_0_s_fu_473_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0243_0_s_reg_603 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_2_fu_493_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_2_reg_608 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_V_1_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state13 : BOOLEAN;
    signal iter_cnt_int_V_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_num_diff_fu_325_ap_start : STD_LOGIC;
    signal grp_num_diff_fu_325_ap_done : STD_LOGIC;
    signal grp_num_diff_fu_325_ap_idle : STD_LOGIC;
    signal grp_num_diff_fu_325_ap_ready : STD_LOGIC;
    signal grp_num_diff_fu_325_ap_ce : STD_LOGIC;
    signal grp_num_diff_fu_325_in2_V : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_num_diff_fu_325_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_num_diff_fu_333_ap_start : STD_LOGIC;
    signal grp_num_diff_fu_333_ap_done : STD_LOGIC;
    signal grp_num_diff_fu_333_ap_idle : STD_LOGIC;
    signal grp_num_diff_fu_333_ap_ready : STD_LOGIC;
    signal grp_num_diff_fu_333_ap_ce : STD_LOGIC;
    signal grp_num_diff_fu_333_in2_V : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_num_diff_fu_333_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal t_V_3_reg_202 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_s_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_1_reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_reg_252 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_2_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_j_V_phi_fu_306_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_314 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_num_diff_fu_325_ap_start_reg : STD_LOGIC := '0';
    signal src_bits_V_fu_402_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_num_diff_fu_333_ap_start_reg : STD_LOGIC := '0';
    signal lhs_V_cast_fu_367_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_fu_371_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_V_4_fu_396_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal err_cnt_V_trunc_ext_fu_424_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rerr_cnt_V_trunc_ext_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cor_blerr_int_V_fu_467_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal raw_blerr_int_V_fu_487_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_507_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_2_fu_517_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component stats_num_diff IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        in1_V : IN STD_LOGIC_VECTOR (127 downto 0);
        in2_V : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component stats_top_CNTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        k_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        n_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        mask_V : OUT STD_LOGIC_VECTOR (127 downto 0);
        num_blocks_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        src_inc_parity_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        raw_berr_V : IN STD_LOGIC_VECTOR (31 downto 0);
        raw_blerr_V : IN STD_LOGIC_VECTOR (31 downto 0);
        cor_berr_V : IN STD_LOGIC_VECTOR (31 downto 0);
        cor_blerr_V : IN STD_LOGIC_VECTOR (31 downto 0);
        iter_cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        block_cnt_V : IN STD_LOGIC_VECTOR (31 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    top_CNTRL_s_axi_U : component stats_top_CNTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CNTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CNTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CNTRL_AWVALID,
        AWREADY => s_axi_CNTRL_AWREADY,
        AWADDR => s_axi_CNTRL_AWADDR,
        WVALID => s_axi_CNTRL_WVALID,
        WREADY => s_axi_CNTRL_WREADY,
        WDATA => s_axi_CNTRL_WDATA,
        WSTRB => s_axi_CNTRL_WSTRB,
        ARVALID => s_axi_CNTRL_ARVALID,
        ARREADY => s_axi_CNTRL_ARREADY,
        ARADDR => s_axi_CNTRL_ARADDR,
        RVALID => s_axi_CNTRL_RVALID,
        RREADY => s_axi_CNTRL_RREADY,
        RDATA => s_axi_CNTRL_RDATA,
        RRESP => s_axi_CNTRL_RRESP,
        BVALID => s_axi_CNTRL_BVALID,
        BREADY => s_axi_CNTRL_BREADY,
        BRESP => s_axi_CNTRL_BRESP,
        ACLK => cntrl_aclk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        k_V => k_V,
        n_V => n_V,
        mask_V => mask_V,
        num_blocks_V => num_blocks_V,
        src_inc_parity_V => src_inc_parity_V,
        raw_berr_V => p_s_reg_213,
        raw_blerr_V => t_V_1_reg_226,
        cor_berr_V => p_1_reg_239,
        cor_blerr_V => t_V_reg_252,
        iter_cnt_V => p_2_reg_265,
        block_cnt_V => num_blocks_V_read_reg_527,
        clk => ap_clk,
        rst => ap_rst_n_cntrl_aclk_inv);

    grp_num_diff_fu_325 : component stats_num_diff
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_num_diff_fu_325_ap_start,
        ap_done => grp_num_diff_fu_325_ap_done,
        ap_idle => grp_num_diff_fu_325_ap_idle,
        ap_ready => grp_num_diff_fu_325_ap_ready,
        ap_ce => grp_num_diff_fu_325_ap_ce,
        in1_V => src_bits_V_fu_402_p2,
        in2_V => grp_num_diff_fu_325_in2_V,
        ap_return => grp_num_diff_fu_325_ap_return);

    grp_num_diff_fu_333 : component stats_num_diff
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_num_diff_fu_333_ap_start,
        ap_done => grp_num_diff_fu_333_ap_done,
        ap_idle => grp_num_diff_fu_333_ap_idle,
        ap_ready => grp_num_diff_fu_333_ap_ready,
        ap_ce => grp_num_diff_fu_333_ap_ce,
        in1_V => src_bits_V_fu_402_p2,
        in2_V => grp_num_diff_fu_333_in2_V,
        ap_return => grp_num_diff_fu_333_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((exitcond_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    error_data_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                error_data_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((error_data_V_data_V_0_ack_out = ap_const_logic_1) and (error_data_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        error_data_V_data_V_0_sel_rd <= not(error_data_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    error_data_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                error_data_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((error_data_V_data_V_0_ack_in = ap_const_logic_1) and (error_data_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        error_data_V_data_V_0_sel_wr <= not(error_data_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    error_data_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                error_data_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((error_data_V_data_V_0_state = ap_const_lv2_2) and (error_data_V_data_V_0_vld_in = ap_const_logic_0)) or ((error_data_V_data_V_0_state = ap_const_lv2_3) and (error_data_V_data_V_0_vld_in = ap_const_logic_0) and (error_data_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    error_data_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((error_data_V_data_V_0_state = ap_const_lv2_1) and (error_data_V_data_V_0_ack_out = ap_const_logic_0)) or ((error_data_V_data_V_0_state = ap_const_lv2_3) and (error_data_V_data_V_0_ack_out = ap_const_logic_0) and (error_data_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    error_data_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((error_data_V_data_V_0_vld_in = ap_const_logic_0) and (error_data_V_data_V_0_ack_out = ap_const_logic_1))) and not(((error_data_V_data_V_0_ack_out = ap_const_logic_0) and (error_data_V_data_V_0_vld_in = ap_const_logic_1))) and (error_data_V_data_V_0_state = ap_const_lv2_3)) or ((error_data_V_data_V_0_state = ap_const_lv2_1) and (error_data_V_data_V_0_ack_out = ap_const_logic_1)) or ((error_data_V_data_V_0_state = ap_const_lv2_2) and (error_data_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    error_data_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    error_data_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    error_data_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                error_data_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((error_data_V_last_V_0_state = ap_const_lv2_2) and (error_data_V_last_V_0_vld_in = ap_const_logic_0)) or ((error_data_V_last_V_0_state = ap_const_lv2_3) and (error_data_V_last_V_0_vld_in = ap_const_logic_0) and (error_data_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    error_data_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((error_data_V_last_V_0_state = ap_const_lv2_1) and (error_data_V_last_V_0_ack_out = ap_const_logic_0)) or ((error_data_V_last_V_0_state = ap_const_lv2_3) and (error_data_V_last_V_0_ack_out = ap_const_logic_0) and (error_data_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    error_data_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((error_data_V_last_V_0_vld_in = ap_const_logic_0) and (error_data_V_last_V_0_ack_out = ap_const_logic_1))) and not(((error_data_V_last_V_0_ack_out = ap_const_logic_0) and (error_data_V_last_V_0_vld_in = ap_const_logic_1))) and (error_data_V_last_V_0_state = ap_const_lv2_3)) or ((error_data_V_last_V_0_state = ap_const_lv2_1) and (error_data_V_last_V_0_ack_out = ap_const_logic_1)) or ((error_data_V_last_V_0_state = ap_const_lv2_2) and (error_data_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    error_data_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    error_data_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    fe_status_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fe_status_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((fe_status_V_V_0_ack_out = ap_const_logic_1) and (fe_status_V_V_0_vld_out = ap_const_logic_1))) then 
                                        fe_status_V_V_0_sel_rd <= not(fe_status_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    fe_status_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fe_status_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((fe_status_V_V_0_ack_in = ap_const_logic_1) and (fe_status_V_V_0_vld_in = ap_const_logic_1))) then 
                                        fe_status_V_V_0_sel_wr <= not(fe_status_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    fe_status_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                fe_status_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((fe_status_V_V_0_state = ap_const_lv2_2) and (fe_status_V_V_0_vld_in = ap_const_logic_0)) or ((fe_status_V_V_0_state = ap_const_lv2_3) and (fe_status_V_V_0_vld_in = ap_const_logic_0) and (fe_status_V_V_0_ack_out = ap_const_logic_1)))) then 
                    fe_status_V_V_0_state <= ap_const_lv2_2;
                elsif ((((fe_status_V_V_0_state = ap_const_lv2_1) and (fe_status_V_V_0_ack_out = ap_const_logic_0)) or ((fe_status_V_V_0_state = ap_const_lv2_3) and (fe_status_V_V_0_ack_out = ap_const_logic_0) and (fe_status_V_V_0_vld_in = ap_const_logic_1)))) then 
                    fe_status_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((fe_status_V_V_0_vld_in = ap_const_logic_0) and (fe_status_V_V_0_ack_out = ap_const_logic_1))) and not(((fe_status_V_V_0_ack_out = ap_const_logic_0) and (fe_status_V_V_0_vld_in = ap_const_logic_1))) and (fe_status_V_V_0_state = ap_const_lv2_3)) or ((fe_status_V_V_0_state = ap_const_lv2_1) and (fe_status_V_V_0_ack_out = ap_const_logic_1)) or ((fe_status_V_V_0_state = ap_const_lv2_2) and (fe_status_V_V_0_vld_in = ap_const_logic_1)))) then 
                    fe_status_V_V_0_state <= ap_const_lv2_3;
                else 
                    fe_status_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_num_diff_fu_325_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_num_diff_fu_325_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_1_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_num_diff_fu_325_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_num_diff_fu_325_ap_ready = ap_const_logic_1)) then 
                    grp_num_diff_fu_325_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_num_diff_fu_333_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_num_diff_fu_333_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_1_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_num_diff_fu_333_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_num_diff_fu_333_ap_ready = ap_const_logic_1)) then 
                    grp_num_diff_fu_333_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hard_data_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((hard_data_V_data_V_0_ack_out = ap_const_logic_1) and (hard_data_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        hard_data_V_data_V_0_sel_rd <= not(hard_data_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    hard_data_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((hard_data_V_data_V_0_ack_in = ap_const_logic_1) and (hard_data_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        hard_data_V_data_V_0_sel_wr <= not(hard_data_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    hard_data_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((hard_data_V_data_V_0_state = ap_const_lv2_2) and (hard_data_V_data_V_0_vld_in = ap_const_logic_0)) or ((hard_data_V_data_V_0_state = ap_const_lv2_3) and (hard_data_V_data_V_0_vld_in = ap_const_logic_0) and (hard_data_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    hard_data_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((hard_data_V_data_V_0_state = ap_const_lv2_1) and (hard_data_V_data_V_0_ack_out = ap_const_logic_0)) or ((hard_data_V_data_V_0_state = ap_const_lv2_3) and (hard_data_V_data_V_0_ack_out = ap_const_logic_0) and (hard_data_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    hard_data_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((hard_data_V_data_V_0_vld_in = ap_const_logic_0) and (hard_data_V_data_V_0_ack_out = ap_const_logic_1))) and not(((hard_data_V_data_V_0_ack_out = ap_const_logic_0) and (hard_data_V_data_V_0_vld_in = ap_const_logic_1))) and (hard_data_V_data_V_0_state = ap_const_lv2_3)) or ((hard_data_V_data_V_0_state = ap_const_lv2_1) and (hard_data_V_data_V_0_ack_out = ap_const_logic_1)) or ((hard_data_V_data_V_0_state = ap_const_lv2_2) and (hard_data_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    hard_data_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    hard_data_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    hard_data_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((hard_data_V_last_V_0_state = ap_const_lv2_2) and (hard_data_V_last_V_0_vld_in = ap_const_logic_0)) or ((hard_data_V_last_V_0_state = ap_const_lv2_3) and (hard_data_V_last_V_0_vld_in = ap_const_logic_0) and (hard_data_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    hard_data_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((hard_data_V_last_V_0_state = ap_const_lv2_1) and (hard_data_V_last_V_0_ack_out = ap_const_logic_0)) or ((hard_data_V_last_V_0_state = ap_const_lv2_3) and (hard_data_V_last_V_0_ack_out = ap_const_logic_0) and (hard_data_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    hard_data_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((hard_data_V_last_V_0_vld_in = ap_const_logic_0) and (hard_data_V_last_V_0_ack_out = ap_const_logic_1))) and not(((hard_data_V_last_V_0_ack_out = ap_const_logic_0) and (hard_data_V_last_V_0_vld_in = ap_const_logic_1))) and (hard_data_V_last_V_0_state = ap_const_lv2_3)) or ((hard_data_V_last_V_0_state = ap_const_lv2_1) and (hard_data_V_last_V_0_ack_out = ap_const_logic_1)) or ((hard_data_V_last_V_0_state = ap_const_lv2_2) and (hard_data_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    hard_data_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    hard_data_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_data_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_data_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_data_V_V_0_ack_out = ap_const_logic_1) and (src_data_V_V_0_vld_out = ap_const_logic_1))) then 
                                        src_data_V_V_0_sel_rd <= not(src_data_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_data_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_data_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_data_V_V_0_ack_in = ap_const_logic_1) and (src_data_V_V_0_vld_in = ap_const_logic_1))) then 
                                        src_data_V_V_0_sel_wr <= not(src_data_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_data_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                src_data_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_data_V_V_0_state = ap_const_lv2_2) and (src_data_V_V_0_vld_in = ap_const_logic_0)) or ((src_data_V_V_0_state = ap_const_lv2_3) and (src_data_V_V_0_vld_in = ap_const_logic_0) and (src_data_V_V_0_ack_out = ap_const_logic_1)))) then 
                    src_data_V_V_0_state <= ap_const_lv2_2;
                elsif ((((src_data_V_V_0_state = ap_const_lv2_1) and (src_data_V_V_0_ack_out = ap_const_logic_0)) or ((src_data_V_V_0_state = ap_const_lv2_3) and (src_data_V_V_0_ack_out = ap_const_logic_0) and (src_data_V_V_0_vld_in = ap_const_logic_1)))) then 
                    src_data_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_data_V_V_0_vld_in = ap_const_logic_0) and (src_data_V_V_0_ack_out = ap_const_logic_1))) and not(((src_data_V_V_0_ack_out = ap_const_logic_0) and (src_data_V_V_0_vld_in = ap_const_logic_1))) and (src_data_V_V_0_state = ap_const_lv2_3)) or ((src_data_V_V_0_state = ap_const_lv2_1) and (src_data_V_V_0_ack_out = ap_const_logic_1)) or ((src_data_V_V_0_state = ap_const_lv2_2) and (src_data_V_V_0_vld_in = ap_const_logic_1)))) then 
                    src_data_V_V_0_state <= ap_const_lv2_3;
                else 
                    src_data_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    j_V_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                j_V_reg_302 <= i_V_reg_575;
            elsif (((exitcond_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_V_reg_302 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    j_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_reg_314 <= j_V_reg_302;
            elsif ((not(((tmp_s_reg_553 = ap_const_lv1_0) and (src_data_V_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j_reg_314 <= j_V_1_fu_501_p2;
            end if; 
        end if;
    end process;

    p_1_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_1_reg_239 <= cor_berr_int_V_reg_598;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_1_reg_239 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_2_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_2_reg_265 <= iter_cnt_int_V_fu_521_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_2_reg_265 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_3_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_566_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
                p_3_reg_278 <= err_cnt_V_fu_428_p2;
            elsif (((exitcond_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_3_reg_278 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_4_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_reg_566_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
                p_4_reg_290 <= rerr_cnt_V_fu_438_p2;
            elsif (((exitcond_fu_351_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_4_reg_290 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_s_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                p_s_reg_213 <= raw_berr_int_V_reg_593;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_s_reg_213 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_1_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                t_V_1_reg_226 <= t_V_2_reg_608;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_1_reg_226 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_3_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                t_V_3_reg_202 <= block_cnt_int_V_reg_561;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_3_reg_202 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    t_V_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                t_V_reg_252 <= p_0243_0_s_reg_603;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_reg_252 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                block_cnt_int_V_reg_561 <= block_cnt_int_V_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_9_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                cor_berr_int_V_reg_598 <= cor_berr_int_V_fu_455_p2;
                p_0243_0_s_reg_603 <= p_0243_0_s_fu_473_p3;
                raw_berr_int_V_reg_593 <= raw_berr_int_V_fu_449_p2;
                t_V_2_reg_608 <= t_V_2_fu_493_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((error_data_V_data_V_0_load_A = ap_const_logic_1)) then
                error_data_V_data_V_0_payload_A <= error_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((error_data_V_data_V_0_load_B = ap_const_logic_1)) then
                error_data_V_data_V_0_payload_B <= error_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fe_status_V_V_0_load_A = ap_const_logic_1)) then
                fe_status_V_V_0_payload_A <= fe_status_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((fe_status_V_V_0_load_B = ap_const_logic_1)) then
                fe_status_V_V_0_payload_B <= fe_status_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_V_data_V_0_load_A = ap_const_logic_1)) then
                hard_data_V_data_V_0_payload_A <= hard_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_V_data_V_0_load_B = ap_const_logic_1)) then
                hard_data_V_data_V_0_payload_B <= hard_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_V_reg_575 <= i_V_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                k_V_read_reg_543 <= k_V;
                mask_V_read_reg_533 <= mask_V;
                n_V_read_reg_538 <= n_V;
                num_blocks_V_read_reg_527 <= num_blocks_V;
                    tmp_7_cast_reg_548(31 downto 0) <= tmp_7_cast_fu_341_p1(31 downto 0);
                tmp_s_reg_553 <= tmp_s_fu_345_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_data_V_V_0_load_A = ap_const_logic_1)) then
                src_data_V_V_0_payload_A <= src_data_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_data_V_V_0_load_B = ap_const_logic_1)) then
                src_data_V_V_0_payload_B <= src_data_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_1_reg_566 <= tmp_1_fu_362_p2;
                tmp_1_reg_566_pp0_iter1_reg <= tmp_1_reg_566;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_1_reg_566_pp0_iter2_reg <= tmp_1_reg_566_pp0_iter1_reg;
                tmp_1_reg_566_pp0_iter3_reg <= tmp_1_reg_566_pp0_iter2_reg;
                tmp_1_reg_566_pp0_iter4_reg <= tmp_1_reg_566_pp0_iter3_reg;
                tmp_1_reg_566_pp0_iter5_reg <= tmp_1_reg_566_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_362_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_8_reg_570 <= tmp_8_fu_377_p2;
            end if;
        end if;
    end process;
    tmp_7_cast_reg_548(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, src_data_V_V_0_vld_out, error_data_V_data_V_0_vld_out, fe_status_V_V_0_vld_out, ap_enable_reg_pp0_iter1, ap_CS_fsm_state13, tmp_s_reg_553, ap_CS_fsm_state12, ap_CS_fsm_state14, exitcond_fu_351_p2, ap_CS_fsm_state2, tmp_1_fu_362_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_CS_fsm_state11, tmp_9_fu_444_p2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((tmp_1_fu_362_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((tmp_1_fu_362_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((tmp_9_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                if (((error_data_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((tmp_s_reg_553 = ap_const_lv1_0) and (src_data_V_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(3);
    ap_CS_fsm_state11 <= ap_CS_fsm(4);
    ap_CS_fsm_state12 <= ap_CS_fsm(5);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state14 <= ap_CS_fsm(7);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(src_data_V_V_0_vld_out, hard_data_V_data_V_0_vld_out, error_data_V_data_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_1_reg_566)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_1_reg_566 = ap_const_lv1_1) and (error_data_V_data_V_0_vld_out = ap_const_logic_0)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (src_data_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (hard_data_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_V_V_0_vld_out, hard_data_V_data_V_0_vld_out, error_data_V_data_V_0_vld_out, ap_enable_reg_pp0_iter1, tmp_1_reg_566)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((tmp_1_reg_566 = ap_const_lv1_1) and (error_data_V_data_V_0_vld_out = ap_const_logic_0)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (src_data_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (hard_data_V_data_V_0_vld_out = ap_const_logic_0))));
    end process;


    ap_block_state13_assign_proc : process(src_data_V_V_0_vld_out, tmp_s_reg_553)
    begin
                ap_block_state13 <= ((tmp_s_reg_553 = ap_const_lv1_0) and (src_data_V_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_V_V_0_vld_out, hard_data_V_data_V_0_vld_out, error_data_V_data_V_0_vld_out, tmp_1_reg_566)
    begin
                ap_block_state4_pp0_stage0_iter1 <= (((tmp_1_reg_566 = ap_const_lv1_1) and (error_data_V_data_V_0_vld_out = ap_const_logic_0)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (src_data_V_V_0_vld_out = ap_const_logic_0)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (hard_data_V_data_V_0_vld_out = ap_const_logic_0)));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(tmp_1_fu_362_p2)
    begin
        if ((tmp_1_fu_362_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(exitcond_fu_351_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_V_phi_fu_306_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_reg_566, j_V_reg_302, i_V_reg_575)
    begin
        if (((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_j_V_phi_fu_306_p4 <= i_V_reg_575;
        else 
            ap_phi_mux_j_V_phi_fu_306_p4 <= j_V_reg_302;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond_fu_351_p2, ap_CS_fsm_state2)
    begin
        if (((exitcond_fu_351_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_cntrl_aclk_inv_assign_proc : process(ap_rst_n_cntrl_aclk)
    begin
                ap_rst_n_cntrl_aclk_inv <= not(ap_rst_n_cntrl_aclk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    block_cnt_int_V_fu_356_p2 <= std_logic_vector(unsigned(t_V_3_reg_202) + unsigned(ap_const_lv32_1));
    cor_berr_int_V_fu_455_p2 <= std_logic_vector(unsigned(p_3_reg_278) + unsigned(p_1_reg_239));
    cor_blerr_int_V_fu_467_p2 <= std_logic_vector(unsigned(t_V_reg_252) + unsigned(ap_const_lv32_1));
    err_cnt_V_fu_428_p2 <= std_logic_vector(unsigned(err_cnt_V_trunc_ext_fu_424_p1) + unsigned(p_3_reg_278));
    err_cnt_V_trunc_ext_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_num_diff_fu_325_ap_return),32));

    error_data_TDATA_blk_n_assign_proc : process(error_data_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_reg_566, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            error_data_TDATA_blk_n <= error_data_V_data_V_0_state(0);
        else 
            error_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    error_data_TREADY <= error_data_V_last_V_0_state(1);
    error_data_V_data_V_0_ack_in <= error_data_V_data_V_0_state(1);

    error_data_V_data_V_0_ack_out_assign_proc : process(error_data_V_data_V_0_vld_out, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_566, ap_CS_fsm_state12, ap_block_pp0_stage0_11001)
    begin
        if ((((error_data_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            error_data_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            error_data_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    error_data_V_data_V_0_data_out_assign_proc : process(error_data_V_data_V_0_payload_A, error_data_V_data_V_0_payload_B, error_data_V_data_V_0_sel)
    begin
        if ((error_data_V_data_V_0_sel = ap_const_logic_1)) then 
            error_data_V_data_V_0_data_out <= error_data_V_data_V_0_payload_B;
        else 
            error_data_V_data_V_0_data_out <= error_data_V_data_V_0_payload_A;
        end if; 
    end process;

    error_data_V_data_V_0_load_A <= (not(error_data_V_data_V_0_sel_wr) and error_data_V_data_V_0_state_cmp_full);
    error_data_V_data_V_0_load_B <= (error_data_V_data_V_0_state_cmp_full and error_data_V_data_V_0_sel_wr);
    error_data_V_data_V_0_sel <= error_data_V_data_V_0_sel_rd;
    error_data_V_data_V_0_state_cmp_full <= '0' when (error_data_V_data_V_0_state = ap_const_lv2_1) else '1';
    error_data_V_data_V_0_vld_in <= error_data_TVALID;
    error_data_V_data_V_0_vld_out <= error_data_V_data_V_0_state(0);

    error_data_V_last_V_0_ack_out_assign_proc : process(error_data_V_data_V_0_vld_out, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_566, ap_CS_fsm_state12, ap_block_pp0_stage0_11001)
    begin
        if ((((error_data_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            error_data_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            error_data_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    error_data_V_last_V_0_vld_in <= error_data_TVALID;
    exitcond_fu_351_p2 <= "1" when (t_V_3_reg_202 = num_blocks_V_read_reg_527) else "0";
    fe_status_V_V_0_ack_in <= fe_status_V_V_0_state(1);

    fe_status_V_V_0_ack_out_assign_proc : process(fe_status_V_V_0_vld_out, ap_CS_fsm_state14)
    begin
        if (((fe_status_V_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            fe_status_V_V_0_ack_out <= ap_const_logic_1;
        else 
            fe_status_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    fe_status_V_V_0_data_out_assign_proc : process(fe_status_V_V_0_payload_A, fe_status_V_V_0_payload_B, fe_status_V_V_0_sel)
    begin
        if ((fe_status_V_V_0_sel = ap_const_logic_1)) then 
            fe_status_V_V_0_data_out <= fe_status_V_V_0_payload_B;
        else 
            fe_status_V_V_0_data_out <= fe_status_V_V_0_payload_A;
        end if; 
    end process;

    fe_status_V_V_0_load_A <= (fe_status_V_V_0_state_cmp_full and not(fe_status_V_V_0_sel_wr));
    fe_status_V_V_0_load_B <= (fe_status_V_V_0_state_cmp_full and fe_status_V_V_0_sel_wr);
    fe_status_V_V_0_sel <= fe_status_V_V_0_sel_rd;
    fe_status_V_V_0_state_cmp_full <= '0' when (fe_status_V_V_0_state = ap_const_lv2_1) else '1';
    fe_status_V_V_0_vld_in <= fe_status_V_V_TVALID;
    fe_status_V_V_0_vld_out <= fe_status_V_V_0_state(0);

    fe_status_V_V_TDATA_blk_n_assign_proc : process(fe_status_V_V_0_state, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            fe_status_V_V_TDATA_blk_n <= fe_status_V_V_0_state(0);
        else 
            fe_status_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    fe_status_V_V_TREADY <= fe_status_V_V_0_state(1);

    grp_num_diff_fu_325_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_num_diff_fu_325_ap_ce <= ap_const_logic_1;
        else 
            grp_num_diff_fu_325_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_num_diff_fu_325_ap_start <= grp_num_diff_fu_325_ap_start_reg;
    grp_num_diff_fu_325_in2_V <= (r_V_4_fu_396_p3 and hard_data_V_data_V_0_data_out);

    grp_num_diff_fu_333_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_num_diff_fu_333_ap_ce <= ap_const_logic_1;
        else 
            grp_num_diff_fu_333_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_num_diff_fu_333_ap_start <= grp_num_diff_fu_333_ap_start_reg;
    grp_num_diff_fu_333_in2_V <= (r_V_4_fu_396_p3 and error_data_V_data_V_0_data_out);

    hard_data_TDATA_blk_n_assign_proc : process(hard_data_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_reg_566)
    begin
        if (((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hard_data_TDATA_blk_n <= hard_data_V_data_V_0_state(0);
        else 
            hard_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hard_data_TREADY <= hard_data_V_last_V_0_state(1);
    hard_data_V_data_V_0_ack_in <= hard_data_V_data_V_0_state(1);

    hard_data_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_566, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hard_data_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            hard_data_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    hard_data_V_data_V_0_data_out_assign_proc : process(hard_data_V_data_V_0_payload_A, hard_data_V_data_V_0_payload_B, hard_data_V_data_V_0_sel)
    begin
        if ((hard_data_V_data_V_0_sel = ap_const_logic_1)) then 
            hard_data_V_data_V_0_data_out <= hard_data_V_data_V_0_payload_B;
        else 
            hard_data_V_data_V_0_data_out <= hard_data_V_data_V_0_payload_A;
        end if; 
    end process;

    hard_data_V_data_V_0_load_A <= (hard_data_V_data_V_0_state_cmp_full and not(hard_data_V_data_V_0_sel_wr));
    hard_data_V_data_V_0_load_B <= (hard_data_V_data_V_0_state_cmp_full and hard_data_V_data_V_0_sel_wr);
    hard_data_V_data_V_0_sel <= hard_data_V_data_V_0_sel_rd;
    hard_data_V_data_V_0_state_cmp_full <= '0' when (hard_data_V_data_V_0_state = ap_const_lv2_1) else '1';
    hard_data_V_data_V_0_vld_in <= hard_data_TVALID;
    hard_data_V_data_V_0_vld_out <= hard_data_V_data_V_0_state(0);

    hard_data_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_566, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hard_data_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            hard_data_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    hard_data_V_last_V_0_vld_in <= hard_data_TVALID;
    i_V_fu_382_p2 <= std_logic_vector(unsigned(ap_phi_mux_j_V_phi_fu_306_p4) + unsigned(ap_const_lv32_80));
    iter_cnt_int_V_fu_521_p2 <= std_logic_vector(unsigned(p_Result_2_fu_517_p1) + unsigned(p_2_reg_265));
    j_V_1_fu_501_p2 <= std_logic_vector(unsigned(j_reg_314) + unsigned(ap_const_lv32_80));
    lhs_V_cast_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_j_V_phi_fu_306_p4),33));
    p_0243_0_s_fu_473_p3 <= 
        t_V_reg_252 when (tmp_2_fu_461_p2(0) = '1') else 
        cor_blerr_int_V_fu_467_p2;
    p_Result_2_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_507_p4),32));
    p_Result_s_fu_507_p4 <= fe_status_V_V_0_data_out(23 downto 18);
    r_V_4_fu_396_p3 <= 
        ap_const_lv128_lc_1 when (tmp_8_reg_570(0) = '1') else 
        mask_V_read_reg_533;
    r_V_fu_371_p2 <= std_logic_vector(unsigned(lhs_V_cast_fu_367_p1) + unsigned(ap_const_lv33_80));
    raw_berr_int_V_fu_449_p2 <= std_logic_vector(unsigned(p_4_reg_290) + unsigned(p_s_reg_213));
    raw_blerr_int_V_fu_487_p2 <= std_logic_vector(unsigned(t_V_1_reg_226) + unsigned(ap_const_lv32_1));
    rerr_cnt_V_fu_438_p2 <= std_logic_vector(unsigned(rerr_cnt_V_trunc_ext_fu_434_p1) + unsigned(p_4_reg_290));
    rerr_cnt_V_trunc_ext_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_num_diff_fu_333_ap_return),32));
    src_bits_V_fu_402_p2 <= (src_data_V_V_0_data_out and r_V_4_fu_396_p3);
    src_data_V_V_0_ack_in <= src_data_V_V_0_state(1);

    src_data_V_V_0_ack_out_assign_proc : process(src_data_V_V_0_vld_out, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_1_reg_566, ap_CS_fsm_state13, tmp_s_reg_553, ap_block_pp0_stage0_11001)
    begin
        if (((not(((tmp_s_reg_553 = ap_const_lv1_0) and (src_data_V_V_0_vld_out = ap_const_logic_0))) and (tmp_s_reg_553 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_data_V_V_0_ack_out <= ap_const_logic_1;
        else 
            src_data_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_data_V_V_0_data_out_assign_proc : process(src_data_V_V_0_payload_A, src_data_V_V_0_payload_B, src_data_V_V_0_sel)
    begin
        if ((src_data_V_V_0_sel = ap_const_logic_1)) then 
            src_data_V_V_0_data_out <= src_data_V_V_0_payload_B;
        else 
            src_data_V_V_0_data_out <= src_data_V_V_0_payload_A;
        end if; 
    end process;

    src_data_V_V_0_load_A <= (src_data_V_V_0_state_cmp_full and not(src_data_V_V_0_sel_wr));
    src_data_V_V_0_load_B <= (src_data_V_V_0_state_cmp_full and src_data_V_V_0_sel_wr);
    src_data_V_V_0_sel <= src_data_V_V_0_sel_rd;
    src_data_V_V_0_state_cmp_full <= '0' when (src_data_V_V_0_state = ap_const_lv2_1) else '1';
    src_data_V_V_0_vld_in <= src_data_V_V_TVALID;
    src_data_V_V_0_vld_out <= src_data_V_V_0_state(0);

    src_data_V_V_TDATA_blk_n_assign_proc : process(src_data_V_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_1_reg_566, ap_CS_fsm_state13, tmp_s_reg_553)
    begin
        if ((((tmp_s_reg_553 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((tmp_1_reg_566 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            src_data_V_V_TDATA_blk_n <= src_data_V_V_0_state(0);
        else 
            src_data_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    src_data_V_V_TREADY <= src_data_V_V_0_state(1);
    t_V_2_fu_493_p3 <= 
        t_V_1_reg_226 when (tmp_3_fu_481_p2(0) = '1') else 
        raw_blerr_int_V_fu_487_p2;
    tmp_1_fu_362_p2 <= "1" when (unsigned(ap_phi_mux_j_V_phi_fu_306_p4) < unsigned(k_V_read_reg_543)) else "0";
    tmp_2_fu_461_p2 <= "1" when (p_3_reg_278 = ap_const_lv32_0) else "0";
    tmp_3_fu_481_p2 <= "1" when (p_4_reg_290 = ap_const_lv32_0) else "0";
    tmp_7_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_V),33));
    tmp_8_fu_377_p2 <= "1" when (unsigned(r_V_fu_371_p2) < unsigned(tmp_7_cast_reg_548)) else "0";
    tmp_9_fu_444_p2 <= "1" when (unsigned(j_reg_314) < unsigned(n_V_read_reg_538)) else "0";
    tmp_s_fu_345_p2 <= "1" when (src_inc_parity_V = ap_const_lv32_0) else "0";
end behav;
