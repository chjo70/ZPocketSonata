-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1.0
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity stats_num_diff is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    in1_V : IN STD_LOGIC_VECTOR (127 downto 0);
    in2_V : IN STD_LOGIC_VECTOR (127 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of stats_num_diff is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal bit_cnt_V_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce0 : STD_LOGIC;
    signal bit_cnt_V_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce1 : STD_LOGIC;
    signal bit_cnt_V_q1 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce2 : STD_LOGIC;
    signal bit_cnt_V_q2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce3 : STD_LOGIC;
    signal bit_cnt_V_q3 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce4 : STD_LOGIC;
    signal bit_cnt_V_q4 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address5 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce5 : STD_LOGIC;
    signal bit_cnt_V_q5 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address6 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce6 : STD_LOGIC;
    signal bit_cnt_V_q6 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address7 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce7 : STD_LOGIC;
    signal bit_cnt_V_q7 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address8 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce8 : STD_LOGIC;
    signal bit_cnt_V_q8 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address9 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce9 : STD_LOGIC;
    signal bit_cnt_V_q9 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address10 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce10 : STD_LOGIC;
    signal bit_cnt_V_q10 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address11 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce11 : STD_LOGIC;
    signal bit_cnt_V_q11 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address12 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce12 : STD_LOGIC;
    signal bit_cnt_V_q12 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address13 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce13 : STD_LOGIC;
    signal bit_cnt_V_q13 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address14 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce14 : STD_LOGIC;
    signal bit_cnt_V_q14 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_address15 : STD_LOGIC_VECTOR (7 downto 0);
    signal bit_cnt_V_ce15 : STD_LOGIC;
    signal bit_cnt_V_q15 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_2_reg_729 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_3_reg_734 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_4_reg_739 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_5_reg_744 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_6_reg_749 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_6_reg_749_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_7_reg_754 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_7_reg_754_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_8_reg_759 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_8_reg_759_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_9_reg_764 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_9_reg_764_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_10_reg_769 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_10_reg_769_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_10_reg_769_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_11_reg_774 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_11_reg_774_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_11_reg_774_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_12_reg_779 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_12_reg_779_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_12_reg_779_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_13_reg_784 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_13_reg_784_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_13_reg_784_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_14_reg_789 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_14_reg_789_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_14_reg_789_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_14_reg_789_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_15_reg_794 : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_15_reg_794_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_15_reg_794_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal bit_cnt_V_load_15_reg_794_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_509_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_reg_799 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_V_5_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_5_reg_804 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_9_fu_591_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_9_reg_809 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_13_fu_626_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_13_reg_814 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_271_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_286_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_fu_316_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_346_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_376_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_451_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_481_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_16_fu_261_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_15_fu_267_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_276_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_291_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_fu_306_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_fu_321_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_5_fu_336_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_6_fu_351_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_7_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_8_fu_381_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_9_fu_396_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_411_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_10_fu_426_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_11_fu_441_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_12_fu_456_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_13_fu_471_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_14_fu_486_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_cast_fu_505_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal lhs_V_cast_fu_501_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal rhs_V_1_cast_fu_518_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal lhs_V_4_cast_fu_515_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_2_cast_fu_527_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_2_fu_521_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_3_fu_530_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal rhs_V_3_cast_fu_540_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal lhs_V_6_cast_fu_536_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_4_cast_fu_549_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_4_fu_543_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_5_cast_fu_558_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_6_cast_fu_566_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_6_fu_561_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_V_7_fu_569_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal rhs_V_7_cast_fu_579_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_10_cast_fu_575_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_8_cast_fu_588_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_8_fu_582_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_9_cast_fu_597_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_10_cast_fu_605_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_10_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_11_cast_fu_614_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_11_fu_608_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_12_cast_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_12_fu_617_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_13_cast_fu_632_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rhs_V_14_cast_fu_640_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_14_fu_635_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component stats_num_diff_bit_cnt_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address4 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address5 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address6 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address7 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address8 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address9 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address10 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address11 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address12 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address13 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address14 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (3 downto 0);
        address15 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;



begin
    bit_cnt_V_U : component stats_num_diff_bit_cnt_V
    generic map (
        DataWidth => 4,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit_cnt_V_address0,
        ce0 => bit_cnt_V_ce0,
        q0 => bit_cnt_V_q0,
        address1 => bit_cnt_V_address1,
        ce1 => bit_cnt_V_ce1,
        q1 => bit_cnt_V_q1,
        address2 => bit_cnt_V_address2,
        ce2 => bit_cnt_V_ce2,
        q2 => bit_cnt_V_q2,
        address3 => bit_cnt_V_address3,
        ce3 => bit_cnt_V_ce3,
        q3 => bit_cnt_V_q3,
        address4 => bit_cnt_V_address4,
        ce4 => bit_cnt_V_ce4,
        q4 => bit_cnt_V_q4,
        address5 => bit_cnt_V_address5,
        ce5 => bit_cnt_V_ce5,
        q5 => bit_cnt_V_q5,
        address6 => bit_cnt_V_address6,
        ce6 => bit_cnt_V_ce6,
        q6 => bit_cnt_V_q6,
        address7 => bit_cnt_V_address7,
        ce7 => bit_cnt_V_ce7,
        q7 => bit_cnt_V_q7,
        address8 => bit_cnt_V_address8,
        ce8 => bit_cnt_V_ce8,
        q8 => bit_cnt_V_q8,
        address9 => bit_cnt_V_address9,
        ce9 => bit_cnt_V_ce9,
        q9 => bit_cnt_V_q9,
        address10 => bit_cnt_V_address10,
        ce10 => bit_cnt_V_ce10,
        q10 => bit_cnt_V_q10,
        address11 => bit_cnt_V_address11,
        ce11 => bit_cnt_V_ce11,
        q11 => bit_cnt_V_q11,
        address12 => bit_cnt_V_address12,
        ce12 => bit_cnt_V_ce12,
        q12 => bit_cnt_V_q12,
        address13 => bit_cnt_V_address13,
        ce13 => bit_cnt_V_ce13,
        q13 => bit_cnt_V_q13,
        address14 => bit_cnt_V_address14,
        ce14 => bit_cnt_V_ce14,
        q14 => bit_cnt_V_q14,
        address15 => bit_cnt_V_address15,
        ce15 => bit_cnt_V_ce15,
        q15 => bit_cnt_V_q15);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bit_cnt_V_load_10_reg_769 <= bit_cnt_V_q10;
                bit_cnt_V_load_11_reg_774 <= bit_cnt_V_q11;
                bit_cnt_V_load_12_reg_779 <= bit_cnt_V_q12;
                bit_cnt_V_load_13_reg_784 <= bit_cnt_V_q13;
                bit_cnt_V_load_14_reg_789 <= bit_cnt_V_q14;
                bit_cnt_V_load_15_reg_794 <= bit_cnt_V_q15;
                bit_cnt_V_load_2_reg_729 <= bit_cnt_V_q2;
                bit_cnt_V_load_3_reg_734 <= bit_cnt_V_q3;
                bit_cnt_V_load_4_reg_739 <= bit_cnt_V_q4;
                bit_cnt_V_load_5_reg_744 <= bit_cnt_V_q5;
                bit_cnt_V_load_6_reg_749 <= bit_cnt_V_q6;
                bit_cnt_V_load_7_reg_754 <= bit_cnt_V_q7;
                bit_cnt_V_load_8_reg_759 <= bit_cnt_V_q8;
                bit_cnt_V_load_9_reg_764 <= bit_cnt_V_q9;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                bit_cnt_V_load_10_reg_769_pp0_iter2_reg <= bit_cnt_V_load_10_reg_769;
                bit_cnt_V_load_10_reg_769_pp0_iter3_reg <= bit_cnt_V_load_10_reg_769_pp0_iter2_reg;
                bit_cnt_V_load_11_reg_774_pp0_iter2_reg <= bit_cnt_V_load_11_reg_774;
                bit_cnt_V_load_11_reg_774_pp0_iter3_reg <= bit_cnt_V_load_11_reg_774_pp0_iter2_reg;
                bit_cnt_V_load_12_reg_779_pp0_iter2_reg <= bit_cnt_V_load_12_reg_779;
                bit_cnt_V_load_12_reg_779_pp0_iter3_reg <= bit_cnt_V_load_12_reg_779_pp0_iter2_reg;
                bit_cnt_V_load_13_reg_784_pp0_iter2_reg <= bit_cnt_V_load_13_reg_784;
                bit_cnt_V_load_13_reg_784_pp0_iter3_reg <= bit_cnt_V_load_13_reg_784_pp0_iter2_reg;
                bit_cnt_V_load_14_reg_789_pp0_iter2_reg <= bit_cnt_V_load_14_reg_789;
                bit_cnt_V_load_14_reg_789_pp0_iter3_reg <= bit_cnt_V_load_14_reg_789_pp0_iter2_reg;
                bit_cnt_V_load_14_reg_789_pp0_iter4_reg <= bit_cnt_V_load_14_reg_789_pp0_iter3_reg;
                bit_cnt_V_load_15_reg_794_pp0_iter2_reg <= bit_cnt_V_load_15_reg_794;
                bit_cnt_V_load_15_reg_794_pp0_iter3_reg <= bit_cnt_V_load_15_reg_794_pp0_iter2_reg;
                bit_cnt_V_load_15_reg_794_pp0_iter4_reg <= bit_cnt_V_load_15_reg_794_pp0_iter3_reg;
                bit_cnt_V_load_6_reg_749_pp0_iter2_reg <= bit_cnt_V_load_6_reg_749;
                bit_cnt_V_load_7_reg_754_pp0_iter2_reg <= bit_cnt_V_load_7_reg_754;
                bit_cnt_V_load_8_reg_759_pp0_iter2_reg <= bit_cnt_V_load_8_reg_759;
                bit_cnt_V_load_9_reg_764_pp0_iter2_reg <= bit_cnt_V_load_9_reg_764;
                r_V_13_reg_814 <= r_V_13_fu_626_p2;
                r_V_5_reg_804 <= r_V_5_fu_552_p2;
                r_V_9_reg_809 <= r_V_9_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                r_V_reg_799 <= r_V_fu_509_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(rhs_V_14_cast_fu_640_p1) + unsigned(r_V_14_fu_635_p2));
    bit_cnt_V_address0 <= tmp_fu_271_p1(8 - 1 downto 0);
    bit_cnt_V_address1 <= tmp_s_fu_286_p1(8 - 1 downto 0);
    bit_cnt_V_address10 <= tmp_3_fu_421_p1(8 - 1 downto 0);
    bit_cnt_V_address11 <= tmp_10_fu_436_p1(8 - 1 downto 0);
    bit_cnt_V_address12 <= tmp_11_fu_451_p1(8 - 1 downto 0);
    bit_cnt_V_address13 <= tmp_12_fu_466_p1(8 - 1 downto 0);
    bit_cnt_V_address14 <= tmp_13_fu_481_p1(8 - 1 downto 0);
    bit_cnt_V_address15 <= tmp_14_fu_496_p1(8 - 1 downto 0);
    bit_cnt_V_address2 <= tmp_4_fu_301_p1(8 - 1 downto 0);
    bit_cnt_V_address3 <= tmp_5_fu_316_p1(8 - 1 downto 0);
    bit_cnt_V_address4 <= tmp_6_fu_331_p1(8 - 1 downto 0);
    bit_cnt_V_address5 <= tmp_7_fu_346_p1(8 - 1 downto 0);
    bit_cnt_V_address6 <= tmp_8_fu_361_p1(8 - 1 downto 0);
    bit_cnt_V_address7 <= tmp_9_fu_376_p1(8 - 1 downto 0);
    bit_cnt_V_address8 <= tmp_1_fu_391_p1(8 - 1 downto 0);
    bit_cnt_V_address9 <= tmp_2_fu_406_p1(8 - 1 downto 0);

    bit_cnt_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce0 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce1 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce10_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce10 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce11_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce11 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce12_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce12 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce13_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce13 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce14_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce14 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce15_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce15 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce2 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce3_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce3 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce4_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce4 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce5_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce5 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce6_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce6 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce7_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce7 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce8_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce8 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    bit_cnt_V_ce9_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            bit_cnt_V_ce9 <= ap_const_logic_1;
        else 
            bit_cnt_V_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    lhs_V_10_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_7_fu_569_p2),8));
    lhs_V_4_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_reg_799),6));
    lhs_V_6_cast_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_530_p2),7));
    lhs_V_cast_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_q0),5));
    p_Result_10_fu_426_p4 <= r_V_16_fu_261_p2(95 downto 88);
    p_Result_11_fu_441_p4 <= r_V_16_fu_261_p2(103 downto 96);
    p_Result_12_fu_456_p4 <= r_V_16_fu_261_p2(111 downto 104);
    p_Result_13_fu_471_p4 <= r_V_16_fu_261_p2(119 downto 112);
    p_Result_14_fu_486_p4 <= r_V_16_fu_261_p2(127 downto 120);
    p_Result_1_fu_276_p4 <= r_V_16_fu_261_p2(15 downto 8);
    p_Result_2_fu_291_p4 <= r_V_16_fu_261_p2(23 downto 16);
    p_Result_3_fu_306_p4 <= r_V_16_fu_261_p2(31 downto 24);
    p_Result_4_fu_321_p4 <= r_V_16_fu_261_p2(39 downto 32);
    p_Result_5_fu_336_p4 <= r_V_16_fu_261_p2(47 downto 40);
    p_Result_6_fu_351_p4 <= r_V_16_fu_261_p2(55 downto 48);
    p_Result_7_fu_366_p4 <= r_V_16_fu_261_p2(63 downto 56);
    p_Result_8_fu_381_p4 <= r_V_16_fu_261_p2(71 downto 64);
    p_Result_9_fu_396_p4 <= r_V_16_fu_261_p2(79 downto 72);
    p_Result_s_fu_411_p4 <= r_V_16_fu_261_p2(87 downto 80);
    r_V_10_fu_600_p2 <= std_logic_vector(unsigned(rhs_V_9_cast_fu_597_p1) + unsigned(r_V_9_reg_809));
    r_V_11_fu_608_p2 <= std_logic_vector(unsigned(rhs_V_10_cast_fu_605_p1) + unsigned(r_V_10_fu_600_p2));
    r_V_12_fu_617_p2 <= std_logic_vector(unsigned(rhs_V_11_cast_fu_614_p1) + unsigned(r_V_11_fu_608_p2));
    r_V_13_fu_626_p2 <= std_logic_vector(unsigned(rhs_V_12_cast_fu_623_p1) + unsigned(r_V_12_fu_617_p2));
    r_V_14_fu_635_p2 <= std_logic_vector(unsigned(rhs_V_13_cast_fu_632_p1) + unsigned(r_V_13_reg_814));
    r_V_16_fu_261_p2 <= (in2_V xor in1_V);
    r_V_2_fu_521_p2 <= std_logic_vector(unsigned(rhs_V_1_cast_fu_518_p1) + unsigned(lhs_V_4_cast_fu_515_p1));
    r_V_3_fu_530_p2 <= std_logic_vector(unsigned(rhs_V_2_cast_fu_527_p1) + unsigned(r_V_2_fu_521_p2));
    r_V_4_fu_543_p2 <= std_logic_vector(unsigned(rhs_V_3_cast_fu_540_p1) + unsigned(lhs_V_6_cast_fu_536_p1));
    r_V_5_fu_552_p2 <= std_logic_vector(unsigned(rhs_V_4_cast_fu_549_p1) + unsigned(r_V_4_fu_543_p2));
    r_V_6_fu_561_p2 <= std_logic_vector(unsigned(rhs_V_5_cast_fu_558_p1) + unsigned(r_V_5_reg_804));
    r_V_7_fu_569_p2 <= std_logic_vector(unsigned(rhs_V_6_cast_fu_566_p1) + unsigned(r_V_6_fu_561_p2));
    r_V_8_fu_582_p2 <= std_logic_vector(unsigned(rhs_V_7_cast_fu_579_p1) + unsigned(lhs_V_10_cast_fu_575_p1));
    r_V_9_fu_591_p2 <= std_logic_vector(unsigned(rhs_V_8_cast_fu_588_p1) + unsigned(r_V_8_fu_582_p2));
    r_V_fu_509_p2 <= std_logic_vector(unsigned(rhs_V_cast_fu_505_p1) + unsigned(lhs_V_cast_fu_501_p1));
    rhs_V_10_cast_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_11_reg_774_pp0_iter3_reg),8));
    rhs_V_11_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_12_reg_779_pp0_iter3_reg),8));
    rhs_V_12_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_13_reg_784_pp0_iter3_reg),8));
    rhs_V_13_cast_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_14_reg_789_pp0_iter4_reg),8));
    rhs_V_14_cast_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_15_reg_794_pp0_iter4_reg),8));
    rhs_V_1_cast_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_2_reg_729),6));
    rhs_V_2_cast_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_3_reg_734),6));
    rhs_V_3_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_4_reg_739),7));
    rhs_V_4_cast_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_5_reg_744),7));
    rhs_V_5_cast_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_6_reg_749_pp0_iter2_reg),7));
    rhs_V_6_cast_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_7_reg_754_pp0_iter2_reg),7));
    rhs_V_7_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_8_reg_759_pp0_iter2_reg),8));
    rhs_V_8_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_9_reg_764_pp0_iter2_reg),8));
    rhs_V_9_cast_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_load_10_reg_769_pp0_iter3_reg),8));
    rhs_V_cast_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bit_cnt_V_q1),5));
    tmp_10_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_10_fu_426_p4),64));
    tmp_11_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_11_fu_441_p4),64));
    tmp_12_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_12_fu_456_p4),64));
    tmp_13_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_13_fu_471_p4),64));
    tmp_14_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_14_fu_486_p4),64));
    tmp_15_fu_267_p1 <= r_V_16_fu_261_p2(8 - 1 downto 0);
    tmp_1_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_8_fu_381_p4),64));
    tmp_2_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_9_fu_396_p4),64));
    tmp_3_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_411_p4),64));
    tmp_4_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_fu_291_p4),64));
    tmp_5_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_fu_306_p4),64));
    tmp_6_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_321_p4),64));
    tmp_7_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_5_fu_336_p4),64));
    tmp_8_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_6_fu_351_p4),64));
    tmp_9_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_7_fu_366_p4),64));
    tmp_fu_271_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_267_p1),64));
    tmp_s_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_fu_276_p4),64));
end behav;
