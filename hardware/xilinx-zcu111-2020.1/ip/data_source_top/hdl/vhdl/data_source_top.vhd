-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1.0
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity data_source_top is
generic (
    C_S_AXI_CNTRL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CNTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    chan_ctrl_out_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    chan_ctrl_out_V_TVALID : OUT STD_LOGIC;
    chan_ctrl_out_V_TREADY : IN STD_LOGIC;
    enc_ctrl_out_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    enc_ctrl_out_TVALID : OUT STD_LOGIC;
    enc_ctrl_out_TREADY : IN STD_LOGIC;
    enc_ctrl_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    enc_keep_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    enc_keep_ctrl_V_V_TVALID : OUT STD_LOGIC;
    enc_keep_ctrl_V_V_TREADY : IN STD_LOGIC;
    dec_keep_ctrl_V_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    dec_keep_ctrl_V_V_TVALID : OUT STD_LOGIC;
    dec_keep_ctrl_V_V_TREADY : IN STD_LOGIC;
    dec_ctrl_out_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    dec_ctrl_out_TVALID : OUT STD_LOGIC;
    dec_ctrl_out_TREADY : IN STD_LOGIC;
    dec_ctrl_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    hard_data_out_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    hard_data_out_TVALID : OUT STD_LOGIC;
    hard_data_out_TREADY : IN STD_LOGIC;
    hard_data_out_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    hard_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_CNTRL_AWVALID : IN STD_LOGIC;
    s_axi_CNTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CNTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_WVALID : IN STD_LOGIC;
    s_axi_CNTRL_WREADY : OUT STD_LOGIC;
    s_axi_CNTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CNTRL_ARVALID : IN STD_LOGIC;
    s_axi_CNTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CNTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CNTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CNTRL_RVALID : OUT STD_LOGIC;
    s_axi_CNTRL_RREADY : IN STD_LOGIC;
    s_axi_CNTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CNTRL_DATA_WIDTH-1 downto 0);
    s_axi_CNTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CNTRL_BVALID : OUT STD_LOGIC;
    s_axi_CNTRL_BREADY : IN STD_LOGIC;
    s_axi_CNTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    cntrl_aclk : IN STD_LOGIC;
    ap_rst_n_cntrl_aclk : IN STD_LOGIC );
end;


architecture behav of data_source_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "data_source_top,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=8,HLS_SYN_FF=3373,HLS_SYN_LUT=3432}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal fec_type_V : STD_LOGIC_VECTOR (0 downto 0);
    signal mod_type_V : STD_LOGIC_VECTOR (2 downto 0);
    signal skip_chan_V : STD_LOGIC_VECTOR (0 downto 0);
    signal snr_V : STD_LOGIC_VECTOR (16 downto 0);
    signal inv_sigma_sq_V : STD_LOGIC_VECTOR (16 downto 0);
    signal enc_ctrl_word_V : STD_LOGIC_VECTOR (39 downto 0);
    signal dec_ctrl_word_V : STD_LOGIC_VECTOR (39 downto 0);
    signal num_blocks_V : STD_LOGIC_VECTOR (31 downto 0);
    signal source_words_V : STD_LOGIC_VECTOR (13 downto 0);
    signal chan_symbls_V : STD_LOGIC_VECTOR (13 downto 0);
    signal chan_rem_V : STD_LOGIC_VECTOR (4 downto 0);
    signal zero_data_V : STD_LOGIC_VECTOR (0 downto 0);
    signal source_keep_V : STD_LOGIC_VECTOR (15 downto 0);
    signal enc_keep_V : STD_LOGIC_VECTOR (63 downto 0);
    signal dec_keep_V : STD_LOGIC_VECTOR (63 downto 0);
    signal chan_ctrl_out_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal chan_ctrl_out_V_1_vld_in : STD_LOGIC;
    signal chan_ctrl_out_V_1_vld_out : STD_LOGIC;
    signal chan_ctrl_out_V_1_ack_in : STD_LOGIC;
    signal chan_ctrl_out_V_1_ack_out : STD_LOGIC;
    signal chan_ctrl_out_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal chan_ctrl_out_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal chan_ctrl_out_V_1_sel_rd : STD_LOGIC := '0';
    signal chan_ctrl_out_V_1_sel_wr : STD_LOGIC := '0';
    signal chan_ctrl_out_V_1_sel : STD_LOGIC;
    signal chan_ctrl_out_V_1_load_A : STD_LOGIC;
    signal chan_ctrl_out_V_1_load_B : STD_LOGIC;
    signal chan_ctrl_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal chan_ctrl_out_V_1_state_cmp_full : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal enc_ctrl_out_V_data_V_1_vld_in : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_vld_out : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_ack_in : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_ack_out : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal enc_ctrl_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal enc_ctrl_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal enc_ctrl_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal enc_ctrl_out_V_data_V_1_sel : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_load_A : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_load_B : STD_LOGIC;
    signal enc_ctrl_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal enc_ctrl_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal enc_ctrl_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_ctrl_out_V_last_V_1_vld_in : STD_LOGIC;
    signal enc_ctrl_out_V_last_V_1_vld_out : STD_LOGIC;
    signal enc_ctrl_out_V_last_V_1_ack_in : STD_LOGIC;
    signal enc_ctrl_out_V_last_V_1_ack_out : STD_LOGIC;
    signal enc_ctrl_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal enc_ctrl_out_V_last_V_1_sel : STD_LOGIC;
    signal enc_ctrl_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal enc_keep_ctrl_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_keep_ctrl_V_V_1_vld_in : STD_LOGIC;
    signal enc_keep_ctrl_V_V_1_vld_out : STD_LOGIC;
    signal enc_keep_ctrl_V_V_1_ack_in : STD_LOGIC;
    signal enc_keep_ctrl_V_V_1_ack_out : STD_LOGIC;
    signal enc_keep_ctrl_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_keep_ctrl_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_keep_ctrl_V_V_1_sel_rd : STD_LOGIC := '0';
    signal enc_keep_ctrl_V_V_1_sel_wr : STD_LOGIC := '0';
    signal enc_keep_ctrl_V_V_1_sel : STD_LOGIC;
    signal enc_keep_ctrl_V_V_1_load_A : STD_LOGIC;
    signal enc_keep_ctrl_V_V_1_load_B : STD_LOGIC;
    signal enc_keep_ctrl_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal enc_keep_ctrl_V_V_1_state_cmp_full : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal dec_keep_ctrl_V_V_1_vld_in : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_vld_out : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_ack_in : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_ack_out : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal dec_keep_ctrl_V_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal dec_keep_ctrl_V_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_keep_ctrl_V_V_1_sel_wr : STD_LOGIC := '0';
    signal dec_keep_ctrl_V_V_1_sel : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_load_A : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_load_B : STD_LOGIC;
    signal dec_keep_ctrl_V_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dec_keep_ctrl_V_V_1_state_cmp_full : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal dec_ctrl_out_V_data_V_1_vld_in : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_vld_out : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_ack_in : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_ack_out : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal dec_ctrl_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal dec_ctrl_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_ctrl_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal dec_ctrl_out_V_data_V_1_sel : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_load_A : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_load_B : STD_LOGIC;
    signal dec_ctrl_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dec_ctrl_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal dec_ctrl_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_ctrl_out_V_last_V_1_vld_in : STD_LOGIC;
    signal dec_ctrl_out_V_last_V_1_vld_out : STD_LOGIC;
    signal dec_ctrl_out_V_last_V_1_ack_in : STD_LOGIC;
    signal dec_ctrl_out_V_last_V_1_ack_out : STD_LOGIC;
    signal dec_ctrl_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dec_ctrl_out_V_last_V_1_sel : STD_LOGIC;
    signal dec_ctrl_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal hard_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal hard_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal hard_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal hard_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal hard_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal hard_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal hard_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal hard_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal hard_data_out_V_data_V_1_sel : STD_LOGIC;
    signal hard_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal hard_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal hard_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal hard_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal hard_data_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal hard_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal hard_data_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal hard_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_load_A : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_load_B : STD_LOGIC;
    signal hard_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_data_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal hard_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal hard_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal hard_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal hard_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal hard_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal hard_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal hard_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal hard_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal hard_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal hard_data_out_V_last_V_1_sel : STD_LOGIC;
    signal hard_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal hard_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal hard_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal chan_ctrl_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_2_reg_637 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_641 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal tmp_2_reg_637_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_641_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_ctrl_out_TDATA_blk_n : STD_LOGIC;
    signal enc_keep_ctrl_V_V_TDATA_blk_n : STD_LOGIC;
    signal dec_keep_ctrl_V_V_TDATA_blk_n : STD_LOGIC;
    signal dec_ctrl_out_TDATA_blk_n : STD_LOGIC;
    signal hard_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal tmp_2_reg_637_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal tmp_2_reg_637_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_cntrl_aclk_inv : STD_LOGIC;
    signal p_s_reg_316 : STD_LOGIC_VECTOR (11 downto 0);
    signal dec_keep_V_read_reg_562 : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_keep_V_read_reg_567 : STD_LOGIC_VECTOR (63 downto 0);
    signal source_keep_V_read_reg_572 : STD_LOGIC_VECTOR (15 downto 0);
    signal zero_data_V_read_reg_577 : STD_LOGIC_VECTOR (0 downto 0);
    signal chan_rem_V_read_reg_582 : STD_LOGIC_VECTOR (4 downto 0);
    signal chan_symbls_V_read_reg_587 : STD_LOGIC_VECTOR (13 downto 0);
    signal num_blocks_V_read_reg_592 : STD_LOGIC_VECTOR (31 downto 0);
    signal dec_ctrl_word_V_read_reg_597 : STD_LOGIC_VECTOR (39 downto 0);
    signal enc_ctrl_word_V_read_reg_602 : STD_LOGIC_VECTOR (39 downto 0);
    signal inv_sigma_sq_V_read_reg_607 : STD_LOGIC_VECTOR (16 downto 0);
    signal snr_V_read_reg_612 : STD_LOGIC_VECTOR (16 downto 0);
    signal skip_chan_V_read_reg_617 : STD_LOGIC_VECTOR (0 downto 0);
    signal mod_type_V_read_reg_622 : STD_LOGIC_VECTOR (2 downto 0);
    signal fec_type_V_read_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_347_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_reg_632 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_predicate_op101_write_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_predicate_op108_write_state4 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_2_reg_637_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_637_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal word_cnt_V_fu_393_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal word_cnt_V_reg_645 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal cast_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_last_V_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_656_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_fu_540_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_keep_V_fu_548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal grp_operator_s_fu_337_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_337_ap_done : STD_LOGIC;
    signal grp_operator_s_fu_337_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_337_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_337_ap_ce : STD_LOGIC;
    signal grp_operator_s_fu_337_ap_return : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_phi_mux_p_s_phi_fu_320_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_p_0459_1_in_phi_fu_330_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_operator_s_fu_337_ap_start_reg : STD_LOGIC := '0';
    signal t_V_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_cnt_V_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_399_p8 : STD_LOGIC_VECTOR (57 downto 0);
    signal p_Result_s_17_fu_498_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_508_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_494_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_3_fu_484_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_1_fu_474_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_s_fu_464_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_8_fu_454_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_6_fu_444_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_4_fu_434_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_2_fu_424_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal rnd_data_V_1_fu_420_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_5_fu_514_p12 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_state17 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1310 : BOOLEAN;

    component data_source_operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (34 downto 0) );
    end component;


    component data_source_top_CNTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        fec_type_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        mod_type_V : OUT STD_LOGIC_VECTOR (2 downto 0);
        skip_chan_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        snr_V : OUT STD_LOGIC_VECTOR (16 downto 0);
        inv_sigma_sq_V : OUT STD_LOGIC_VECTOR (16 downto 0);
        enc_ctrl_word_V : OUT STD_LOGIC_VECTOR (39 downto 0);
        dec_ctrl_word_V : OUT STD_LOGIC_VECTOR (39 downto 0);
        num_blocks_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        source_words_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        chan_symbls_V : OUT STD_LOGIC_VECTOR (13 downto 0);
        chan_rem_V : OUT STD_LOGIC_VECTOR (4 downto 0);
        zero_data_V : OUT STD_LOGIC_VECTOR (0 downto 0);
        source_keep_V : OUT STD_LOGIC_VECTOR (15 downto 0);
        enc_keep_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        dec_keep_V : OUT STD_LOGIC_VECTOR (63 downto 0);
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    top_CNTRL_s_axi_U : component data_source_top_CNTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CNTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CNTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CNTRL_AWVALID,
        AWREADY => s_axi_CNTRL_AWREADY,
        AWADDR => s_axi_CNTRL_AWADDR,
        WVALID => s_axi_CNTRL_WVALID,
        WREADY => s_axi_CNTRL_WREADY,
        WDATA => s_axi_CNTRL_WDATA,
        WSTRB => s_axi_CNTRL_WSTRB,
        ARVALID => s_axi_CNTRL_ARVALID,
        ARREADY => s_axi_CNTRL_ARREADY,
        ARADDR => s_axi_CNTRL_ARADDR,
        RVALID => s_axi_CNTRL_RVALID,
        RREADY => s_axi_CNTRL_RREADY,
        RDATA => s_axi_CNTRL_RDATA,
        RRESP => s_axi_CNTRL_RRESP,
        BVALID => s_axi_CNTRL_BVALID,
        BREADY => s_axi_CNTRL_BREADY,
        BRESP => s_axi_CNTRL_BRESP,
        ACLK => cntrl_aclk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        fec_type_V => fec_type_V,
        mod_type_V => mod_type_V,
        skip_chan_V => skip_chan_V,
        snr_V => snr_V,
        inv_sigma_sq_V => inv_sigma_sq_V,
        enc_ctrl_word_V => enc_ctrl_word_V,
        dec_ctrl_word_V => dec_ctrl_word_V,
        num_blocks_V => num_blocks_V,
        source_words_V => source_words_V,
        chan_symbls_V => chan_symbls_V,
        chan_rem_V => chan_rem_V,
        zero_data_V => zero_data_V,
        source_keep_V => source_keep_V,
        enc_keep_V => enc_keep_V,
        dec_keep_V => dec_keep_V,
        clk => ap_clk,
        rst => ap_rst_n_cntrl_aclk_inv);

    grp_operator_s_fu_337 : component data_source_operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_s_fu_337_ap_start,
        ap_done => grp_operator_s_fu_337_ap_done,
        ap_idle => grp_operator_s_fu_337_ap_idle,
        ap_ready => grp_operator_s_fu_337_ap_ready,
        ap_ce => grp_operator_s_fu_337_ap_ce,
        ap_return => grp_operator_s_fu_337_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    chan_ctrl_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_ctrl_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((chan_ctrl_out_V_1_ack_out = ap_const_logic_1) and (chan_ctrl_out_V_1_vld_out = ap_const_logic_1))) then 
                                        chan_ctrl_out_V_1_sel_rd <= not(chan_ctrl_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    chan_ctrl_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_ctrl_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((chan_ctrl_out_V_1_ack_in = ap_const_logic_1) and (chan_ctrl_out_V_1_vld_in = ap_const_logic_1))) then 
                                        chan_ctrl_out_V_1_sel_wr <= not(chan_ctrl_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    chan_ctrl_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_ctrl_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((chan_ctrl_out_V_1_state = ap_const_lv2_2) and (chan_ctrl_out_V_1_vld_in = ap_const_logic_0)) or ((chan_ctrl_out_V_1_state = ap_const_lv2_3) and (chan_ctrl_out_V_1_vld_in = ap_const_logic_0) and (chan_ctrl_out_V_1_ack_out = ap_const_logic_1)))) then 
                    chan_ctrl_out_V_1_state <= ap_const_lv2_2;
                elsif ((((chan_ctrl_out_V_1_state = ap_const_lv2_1) and (chan_ctrl_out_V_1_ack_out = ap_const_logic_0)) or ((chan_ctrl_out_V_1_state = ap_const_lv2_3) and (chan_ctrl_out_V_1_ack_out = ap_const_logic_0) and (chan_ctrl_out_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_ctrl_out_V_1_state <= ap_const_lv2_1;
                elsif (((not(((chan_ctrl_out_V_1_vld_in = ap_const_logic_0) and (chan_ctrl_out_V_1_ack_out = ap_const_logic_1))) and not(((chan_ctrl_out_V_1_ack_out = ap_const_logic_0) and (chan_ctrl_out_V_1_vld_in = ap_const_logic_1))) and (chan_ctrl_out_V_1_state = ap_const_lv2_3)) or ((chan_ctrl_out_V_1_state = ap_const_lv2_1) and (chan_ctrl_out_V_1_ack_out = ap_const_logic_1)) or ((chan_ctrl_out_V_1_state = ap_const_lv2_2) and (chan_ctrl_out_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_ctrl_out_V_1_state <= ap_const_lv2_3;
                else 
                    chan_ctrl_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dec_ctrl_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1) and (dec_ctrl_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        dec_ctrl_out_V_data_V_1_sel_rd <= not(dec_ctrl_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_ctrl_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dec_ctrl_out_V_data_V_1_ack_in = ap_const_logic_1) and (dec_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        dec_ctrl_out_V_data_V_1_sel_wr <= not(dec_ctrl_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dec_ctrl_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_ctrl_out_V_data_V_1_state = ap_const_lv2_2) and (dec_ctrl_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((dec_ctrl_out_V_data_V_1_state = ap_const_lv2_3) and (dec_ctrl_out_V_data_V_1_vld_in = ap_const_logic_0) and (dec_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_ctrl_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_ctrl_out_V_data_V_1_state = ap_const_lv2_1) and (dec_ctrl_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((dec_ctrl_out_V_data_V_1_state = ap_const_lv2_3) and (dec_ctrl_out_V_data_V_1_ack_out = ap_const_logic_0) and (dec_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_ctrl_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_ctrl_out_V_data_V_1_vld_in = ap_const_logic_0) and (dec_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((dec_ctrl_out_V_data_V_1_ack_out = ap_const_logic_0) and (dec_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1))) and (dec_ctrl_out_V_data_V_1_state = ap_const_lv2_3)) or ((dec_ctrl_out_V_data_V_1_state = ap_const_lv2_1) and (dec_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((dec_ctrl_out_V_data_V_1_state = ap_const_lv2_2) and (dec_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_ctrl_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dec_ctrl_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dec_ctrl_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1) and (dec_ctrl_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dec_ctrl_out_V_last_V_1_sel_rd <= not(dec_ctrl_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_ctrl_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_ctrl_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_ctrl_out_V_last_V_1_state = ap_const_lv2_2) and (dec_ctrl_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((dec_ctrl_out_V_last_V_1_state = ap_const_lv2_3) and (dec_ctrl_out_V_last_V_1_vld_in = ap_const_logic_0) and (dec_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_ctrl_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_ctrl_out_V_last_V_1_state = ap_const_lv2_1) and (dec_ctrl_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((dec_ctrl_out_V_last_V_1_state = ap_const_lv2_3) and (dec_ctrl_out_V_last_V_1_ack_out = ap_const_logic_0) and (dec_ctrl_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_ctrl_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_ctrl_out_V_last_V_1_vld_in = ap_const_logic_0) and (dec_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((dec_ctrl_out_V_last_V_1_ack_out = ap_const_logic_0) and (dec_ctrl_out_V_last_V_1_vld_in = ap_const_logic_1))) and (dec_ctrl_out_V_last_V_1_state = ap_const_lv2_3)) or ((dec_ctrl_out_V_last_V_1_state = ap_const_lv2_1) and (dec_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((dec_ctrl_out_V_last_V_1_state = ap_const_lv2_2) and (dec_ctrl_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_ctrl_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dec_ctrl_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dec_keep_ctrl_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_keep_ctrl_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dec_keep_ctrl_V_V_1_ack_out = ap_const_logic_1) and (dec_keep_ctrl_V_V_1_vld_out = ap_const_logic_1))) then 
                                        dec_keep_ctrl_V_V_1_sel_rd <= not(dec_keep_ctrl_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dec_keep_ctrl_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_keep_ctrl_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dec_keep_ctrl_V_V_1_ack_in = ap_const_logic_1) and (dec_keep_ctrl_V_V_1_vld_in = ap_const_logic_1))) then 
                                        dec_keep_ctrl_V_V_1_sel_wr <= not(dec_keep_ctrl_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dec_keep_ctrl_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dec_keep_ctrl_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((dec_keep_ctrl_V_V_1_state = ap_const_lv2_2) and (dec_keep_ctrl_V_V_1_vld_in = ap_const_logic_0)) or ((dec_keep_ctrl_V_V_1_state = ap_const_lv2_3) and (dec_keep_ctrl_V_V_1_vld_in = ap_const_logic_0) and (dec_keep_ctrl_V_V_1_ack_out = ap_const_logic_1)))) then 
                    dec_keep_ctrl_V_V_1_state <= ap_const_lv2_2;
                elsif ((((dec_keep_ctrl_V_V_1_state = ap_const_lv2_1) and (dec_keep_ctrl_V_V_1_ack_out = ap_const_logic_0)) or ((dec_keep_ctrl_V_V_1_state = ap_const_lv2_3) and (dec_keep_ctrl_V_V_1_ack_out = ap_const_logic_0) and (dec_keep_ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_keep_ctrl_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dec_keep_ctrl_V_V_1_vld_in = ap_const_logic_0) and (dec_keep_ctrl_V_V_1_ack_out = ap_const_logic_1))) and not(((dec_keep_ctrl_V_V_1_ack_out = ap_const_logic_0) and (dec_keep_ctrl_V_V_1_vld_in = ap_const_logic_1))) and (dec_keep_ctrl_V_V_1_state = ap_const_lv2_3)) or ((dec_keep_ctrl_V_V_1_state = ap_const_lv2_1) and (dec_keep_ctrl_V_V_1_ack_out = ap_const_logic_1)) or ((dec_keep_ctrl_V_V_1_state = ap_const_lv2_2) and (dec_keep_ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    dec_keep_ctrl_V_V_1_state <= ap_const_lv2_3;
                else 
                    dec_keep_ctrl_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    enc_ctrl_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_ctrl_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((enc_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1) and (enc_ctrl_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        enc_ctrl_out_V_data_V_1_sel_rd <= not(enc_ctrl_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    enc_ctrl_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_ctrl_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((enc_ctrl_out_V_data_V_1_ack_in = ap_const_logic_1) and (enc_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        enc_ctrl_out_V_data_V_1_sel_wr <= not(enc_ctrl_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    enc_ctrl_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_ctrl_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((enc_ctrl_out_V_data_V_1_state = ap_const_lv2_2) and (enc_ctrl_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((enc_ctrl_out_V_data_V_1_state = ap_const_lv2_3) and (enc_ctrl_out_V_data_V_1_vld_in = ap_const_logic_0) and (enc_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    enc_ctrl_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((enc_ctrl_out_V_data_V_1_state = ap_const_lv2_1) and (enc_ctrl_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((enc_ctrl_out_V_data_V_1_state = ap_const_lv2_3) and (enc_ctrl_out_V_data_V_1_ack_out = ap_const_logic_0) and (enc_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    enc_ctrl_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((enc_ctrl_out_V_data_V_1_vld_in = ap_const_logic_0) and (enc_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((enc_ctrl_out_V_data_V_1_ack_out = ap_const_logic_0) and (enc_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1))) and (enc_ctrl_out_V_data_V_1_state = ap_const_lv2_3)) or ((enc_ctrl_out_V_data_V_1_state = ap_const_lv2_1) and (enc_ctrl_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((enc_ctrl_out_V_data_V_1_state = ap_const_lv2_2) and (enc_ctrl_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    enc_ctrl_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    enc_ctrl_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    enc_ctrl_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_ctrl_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((enc_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1) and (enc_ctrl_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        enc_ctrl_out_V_last_V_1_sel_rd <= not(enc_ctrl_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    enc_ctrl_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_ctrl_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((enc_ctrl_out_V_last_V_1_state = ap_const_lv2_2) and (enc_ctrl_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((enc_ctrl_out_V_last_V_1_state = ap_const_lv2_3) and (enc_ctrl_out_V_last_V_1_vld_in = ap_const_logic_0) and (enc_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    enc_ctrl_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((enc_ctrl_out_V_last_V_1_state = ap_const_lv2_1) and (enc_ctrl_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((enc_ctrl_out_V_last_V_1_state = ap_const_lv2_3) and (enc_ctrl_out_V_last_V_1_ack_out = ap_const_logic_0) and (enc_ctrl_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    enc_ctrl_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((enc_ctrl_out_V_last_V_1_vld_in = ap_const_logic_0) and (enc_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((enc_ctrl_out_V_last_V_1_ack_out = ap_const_logic_0) and (enc_ctrl_out_V_last_V_1_vld_in = ap_const_logic_1))) and (enc_ctrl_out_V_last_V_1_state = ap_const_lv2_3)) or ((enc_ctrl_out_V_last_V_1_state = ap_const_lv2_1) and (enc_ctrl_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((enc_ctrl_out_V_last_V_1_state = ap_const_lv2_2) and (enc_ctrl_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    enc_ctrl_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    enc_ctrl_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    enc_keep_ctrl_V_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_keep_ctrl_V_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((enc_keep_ctrl_V_V_1_ack_out = ap_const_logic_1) and (enc_keep_ctrl_V_V_1_vld_out = ap_const_logic_1))) then 
                                        enc_keep_ctrl_V_V_1_sel_rd <= not(enc_keep_ctrl_V_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    enc_keep_ctrl_V_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_keep_ctrl_V_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((enc_keep_ctrl_V_V_1_ack_in = ap_const_logic_1) and (enc_keep_ctrl_V_V_1_vld_in = ap_const_logic_1))) then 
                                        enc_keep_ctrl_V_V_1_sel_wr <= not(enc_keep_ctrl_V_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    enc_keep_ctrl_V_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                enc_keep_ctrl_V_V_1_state <= ap_const_lv2_0;
            else
                if ((((enc_keep_ctrl_V_V_1_state = ap_const_lv2_2) and (enc_keep_ctrl_V_V_1_vld_in = ap_const_logic_0)) or ((enc_keep_ctrl_V_V_1_state = ap_const_lv2_3) and (enc_keep_ctrl_V_V_1_vld_in = ap_const_logic_0) and (enc_keep_ctrl_V_V_1_ack_out = ap_const_logic_1)))) then 
                    enc_keep_ctrl_V_V_1_state <= ap_const_lv2_2;
                elsif ((((enc_keep_ctrl_V_V_1_state = ap_const_lv2_1) and (enc_keep_ctrl_V_V_1_ack_out = ap_const_logic_0)) or ((enc_keep_ctrl_V_V_1_state = ap_const_lv2_3) and (enc_keep_ctrl_V_V_1_ack_out = ap_const_logic_0) and (enc_keep_ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    enc_keep_ctrl_V_V_1_state <= ap_const_lv2_1;
                elsif (((not(((enc_keep_ctrl_V_V_1_vld_in = ap_const_logic_0) and (enc_keep_ctrl_V_V_1_ack_out = ap_const_logic_1))) and not(((enc_keep_ctrl_V_V_1_ack_out = ap_const_logic_0) and (enc_keep_ctrl_V_V_1_vld_in = ap_const_logic_1))) and (enc_keep_ctrl_V_V_1_state = ap_const_lv2_3)) or ((enc_keep_ctrl_V_V_1_state = ap_const_lv2_1) and (enc_keep_ctrl_V_V_1_ack_out = ap_const_logic_1)) or ((enc_keep_ctrl_V_V_1_state = ap_const_lv2_2) and (enc_keep_ctrl_V_V_1_vld_in = ap_const_logic_1)))) then 
                    enc_keep_ctrl_V_V_1_state <= ap_const_lv2_3;
                else 
                    enc_keep_ctrl_V_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_337_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_s_fu_337_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_fu_370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_operator_s_fu_337_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_337_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_337_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((hard_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (hard_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        hard_data_out_V_data_V_1_sel_rd <= not(hard_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((hard_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (hard_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        hard_data_out_V_data_V_1_sel_wr <= not(hard_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((hard_data_out_V_data_V_1_state = ap_const_lv2_2) and (hard_data_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((hard_data_out_V_data_V_1_state = ap_const_lv2_3) and (hard_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (hard_data_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    hard_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((hard_data_out_V_data_V_1_state = ap_const_lv2_1) and (hard_data_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((hard_data_out_V_data_V_1_state = ap_const_lv2_3) and (hard_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (hard_data_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    hard_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((hard_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (hard_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((hard_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (hard_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (hard_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((hard_data_out_V_data_V_1_state = ap_const_lv2_1) and (hard_data_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((hard_data_out_V_data_V_1_state = ap_const_lv2_2) and (hard_data_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    hard_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    hard_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((hard_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (hard_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        hard_data_out_V_keep_V_1_sel_rd <= not(hard_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((hard_data_out_V_keep_V_1_ack_in = ap_const_logic_1) and (hard_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        hard_data_out_V_keep_V_1_sel_wr <= not(hard_data_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((hard_data_out_V_keep_V_1_state = ap_const_lv2_2) and (hard_data_out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((hard_data_out_V_keep_V_1_state = ap_const_lv2_3) and (hard_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (hard_data_out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    hard_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((hard_data_out_V_keep_V_1_state = ap_const_lv2_1) and (hard_data_out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((hard_data_out_V_keep_V_1_state = ap_const_lv2_3) and (hard_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (hard_data_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    hard_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((hard_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (hard_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((hard_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (hard_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (hard_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((hard_data_out_V_keep_V_1_state = ap_const_lv2_1) and (hard_data_out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((hard_data_out_V_keep_V_1_state = ap_const_lv2_2) and (hard_data_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    hard_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    hard_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((hard_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (hard_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        hard_data_out_V_last_V_1_sel_rd <= not(hard_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((hard_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (hard_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        hard_data_out_V_last_V_1_sel_wr <= not(hard_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    hard_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((hard_data_out_V_last_V_1_state = ap_const_lv2_2) and (hard_data_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((hard_data_out_V_last_V_1_state = ap_const_lv2_3) and (hard_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (hard_data_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    hard_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((hard_data_out_V_last_V_1_state = ap_const_lv2_1) and (hard_data_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((hard_data_out_V_last_V_1_state = ap_const_lv2_3) and (hard_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (hard_data_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    hard_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((hard_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (hard_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((hard_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (hard_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (hard_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((hard_data_out_V_last_V_1_state = ap_const_lv2_1) and (hard_data_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((hard_data_out_V_last_V_1_state = ap_const_lv2_2) and (hard_data_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    hard_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    hard_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    p_s_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_s_reg_316 <= word_cnt_V_reg_645;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_s_reg_316 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    t_V_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_3_fu_376_p2 = ap_const_lv1_1) and (tmp_2_fu_370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_fu_166 <= block_cnt_V_fu_382_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_fu_166 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_ctrl_out_V_1_load_A = ap_const_logic_1)) then
                chan_ctrl_out_V_1_payload_A <= cast_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_ctrl_out_V_1_load_B = ap_const_logic_1)) then
                chan_ctrl_out_V_1_payload_B <= cast_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                chan_rem_V_read_reg_582 <= chan_rem_V;
                chan_symbls_V_read_reg_587 <= chan_symbls_V;
                dec_ctrl_word_V_read_reg_597 <= dec_ctrl_word_V;
                dec_keep_V_read_reg_562 <= dec_keep_V;
                enc_ctrl_word_V_read_reg_602 <= enc_ctrl_word_V;
                enc_keep_V_read_reg_567 <= enc_keep_V;
                fec_type_V_read_reg_627 <= fec_type_V;
                inv_sigma_sq_V_read_reg_607 <= inv_sigma_sq_V;
                mod_type_V_read_reg_622 <= mod_type_V;
                num_blocks_V_read_reg_592 <= num_blocks_V;
                skip_chan_V_read_reg_617 <= skip_chan_V;
                snr_V_read_reg_612 <= snr_V;
                source_keep_V_read_reg_572 <= source_keep_V;
                tmp_4_reg_632 <= tmp_4_fu_347_p1;
                zero_data_V_read_reg_577 <= zero_data_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dec_ctrl_out_V_data_V_1_load_A = ap_const_logic_1)) then
                dec_ctrl_out_V_data_V_1_payload_A <= dec_ctrl_word_V_read_reg_597;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dec_ctrl_out_V_data_V_1_load_B = ap_const_logic_1)) then
                dec_ctrl_out_V_data_V_1_payload_B <= dec_ctrl_word_V_read_reg_597;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dec_keep_ctrl_V_V_1_load_A = ap_const_logic_1)) then
                dec_keep_ctrl_V_V_1_payload_A <= dec_keep_V_read_reg_562;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dec_keep_ctrl_V_V_1_load_B = ap_const_logic_1)) then
                dec_keep_ctrl_V_V_1_payload_B <= dec_keep_V_read_reg_562;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((enc_ctrl_out_V_data_V_1_load_A = ap_const_logic_1)) then
                enc_ctrl_out_V_data_V_1_payload_A <= enc_ctrl_word_V_read_reg_602;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((enc_ctrl_out_V_data_V_1_load_B = ap_const_logic_1)) then
                enc_ctrl_out_V_data_V_1_payload_B <= enc_ctrl_word_V_read_reg_602;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((enc_keep_ctrl_V_V_1_load_A = ap_const_logic_1)) then
                enc_keep_ctrl_V_V_1_payload_A <= enc_keep_V_read_reg_567;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((enc_keep_ctrl_V_V_1_load_B = ap_const_logic_1)) then
                enc_keep_ctrl_V_V_1_payload_B <= enc_keep_V_read_reg_567;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                hard_data_out_V_data_V_1_payload_A <= tmp_data_V_fu_540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                hard_data_out_V_data_V_1_payload_B <= tmp_data_V_fu_540_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                hard_data_out_V_keep_V_1_payload_A <= tmp_keep_V_fu_548_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                hard_data_out_V_keep_V_1_payload_B <= tmp_keep_V_fu_548_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                hard_data_out_V_last_V_1_payload_A <= tmp_last_V_reg_656_pp0_iter12_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                hard_data_out_V_last_V_1_payload_B <= tmp_last_V_reg_656_pp0_iter12_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_637 <= tmp_2_fu_370_p2;
                tmp_2_reg_637_pp0_iter1_reg <= tmp_2_reg_637;
                tmp_3_reg_641_pp0_iter1_reg <= tmp_3_reg_641;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_2_reg_637_pp0_iter10_reg <= tmp_2_reg_637_pp0_iter9_reg;
                tmp_2_reg_637_pp0_iter11_reg <= tmp_2_reg_637_pp0_iter10_reg;
                tmp_2_reg_637_pp0_iter12_reg <= tmp_2_reg_637_pp0_iter11_reg;
                tmp_2_reg_637_pp0_iter13_reg <= tmp_2_reg_637_pp0_iter12_reg;
                tmp_2_reg_637_pp0_iter2_reg <= tmp_2_reg_637_pp0_iter1_reg;
                tmp_2_reg_637_pp0_iter3_reg <= tmp_2_reg_637_pp0_iter2_reg;
                tmp_2_reg_637_pp0_iter4_reg <= tmp_2_reg_637_pp0_iter3_reg;
                tmp_2_reg_637_pp0_iter5_reg <= tmp_2_reg_637_pp0_iter4_reg;
                tmp_2_reg_637_pp0_iter6_reg <= tmp_2_reg_637_pp0_iter5_reg;
                tmp_2_reg_637_pp0_iter7_reg <= tmp_2_reg_637_pp0_iter6_reg;
                tmp_2_reg_637_pp0_iter8_reg <= tmp_2_reg_637_pp0_iter7_reg;
                tmp_2_reg_637_pp0_iter9_reg <= tmp_2_reg_637_pp0_iter8_reg;
                tmp_last_V_reg_656_pp0_iter10_reg <= tmp_last_V_reg_656_pp0_iter9_reg;
                tmp_last_V_reg_656_pp0_iter11_reg <= tmp_last_V_reg_656_pp0_iter10_reg;
                tmp_last_V_reg_656_pp0_iter12_reg <= tmp_last_V_reg_656_pp0_iter11_reg;
                tmp_last_V_reg_656_pp0_iter2_reg <= tmp_last_V_reg_656;
                tmp_last_V_reg_656_pp0_iter3_reg <= tmp_last_V_reg_656_pp0_iter2_reg;
                tmp_last_V_reg_656_pp0_iter4_reg <= tmp_last_V_reg_656_pp0_iter3_reg;
                tmp_last_V_reg_656_pp0_iter5_reg <= tmp_last_V_reg_656_pp0_iter4_reg;
                tmp_last_V_reg_656_pp0_iter6_reg <= tmp_last_V_reg_656_pp0_iter5_reg;
                tmp_last_V_reg_656_pp0_iter7_reg <= tmp_last_V_reg_656_pp0_iter6_reg;
                tmp_last_V_reg_656_pp0_iter8_reg <= tmp_last_V_reg_656_pp0_iter7_reg;
                tmp_last_V_reg_656_pp0_iter9_reg <= tmp_last_V_reg_656_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_fu_370_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_641 <= tmp_3_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_last_V_reg_656 <= tmp_last_V_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_fu_370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                word_cnt_V_reg_645 <= word_cnt_V_fu_393_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, chan_ctrl_out_V_1_ack_in, enc_ctrl_out_V_data_V_1_ack_in, enc_ctrl_out_V_last_V_1_ack_in, enc_keep_ctrl_V_V_1_ack_in, dec_keep_ctrl_V_V_1_ack_in, dec_ctrl_out_V_data_V_1_ack_in, dec_ctrl_out_V_last_V_1_ack_in, hard_data_out_V_data_V_1_ack_in, hard_data_out_V_keep_V_1_ack_in, hard_data_out_V_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, tmp_2_fu_370_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_2_fu_370_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_2_fu_370_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                if ((not(((hard_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (chan_ctrl_out_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_block_state3_io, ap_block_state4_io, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_block_state3_io, ap_block_state4_io, ap_block_state15_io, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state16_io) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state15_io) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state15_io_assign_proc : process(hard_data_out_V_data_V_1_ack_in, tmp_2_reg_637_pp0_iter12_reg)
    begin
                ap_block_state15_io <= ((tmp_2_reg_637_pp0_iter12_reg = ap_const_lv1_1) and (hard_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(hard_data_out_V_data_V_1_ack_in, tmp_2_reg_637_pp0_iter13_reg)
    begin
                ap_block_state16_io <= ((tmp_2_reg_637_pp0_iter13_reg = ap_const_lv1_1) and (hard_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state17_assign_proc : process(chan_ctrl_out_V_1_ack_in, enc_ctrl_out_V_data_V_1_ack_in, enc_ctrl_out_V_last_V_1_ack_in, enc_keep_ctrl_V_V_1_ack_in, dec_keep_ctrl_V_V_1_ack_in, dec_ctrl_out_V_data_V_1_ack_in, dec_ctrl_out_V_last_V_1_ack_in, hard_data_out_V_data_V_1_ack_in, hard_data_out_V_keep_V_1_ack_in, hard_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state17 <= ((hard_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (chan_ctrl_out_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(chan_ctrl_out_V_1_ack_in, enc_ctrl_out_V_data_V_1_ack_in, enc_keep_ctrl_V_V_1_ack_in, dec_keep_ctrl_V_V_1_ack_in, dec_ctrl_out_V_data_V_1_ack_in, ap_predicate_op101_write_state3)
    begin
                ap_block_state3_io <= (((dec_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op101_write_state3 = ap_const_boolean_1)) or ((enc_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op101_write_state3 = ap_const_boolean_1)) or ((dec_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op101_write_state3 = ap_const_boolean_1)) or ((enc_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op101_write_state3 = ap_const_boolean_1)) or ((chan_ctrl_out_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op101_write_state3 = ap_const_boolean_1)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(chan_ctrl_out_V_1_ack_in, enc_ctrl_out_V_data_V_1_ack_in, enc_keep_ctrl_V_V_1_ack_in, dec_keep_ctrl_V_V_1_ack_in, dec_ctrl_out_V_data_V_1_ack_in, ap_predicate_op108_write_state4)
    begin
                ap_block_state4_io <= (((dec_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op108_write_state4 = ap_const_boolean_1)) or ((enc_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op108_write_state4 = ap_const_boolean_1)) or ((dec_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op108_write_state4 = ap_const_boolean_1)) or ((enc_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op108_write_state4 = ap_const_boolean_1)) or ((chan_ctrl_out_V_1_ack_in = ap_const_logic_0) and (ap_predicate_op108_write_state4 = ap_const_boolean_1)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1310_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, tmp_2_fu_370_p2, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_1310 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_2_fu_370_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(tmp_2_fu_370_p2)
    begin
        if ((tmp_2_fu_370_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(chan_ctrl_out_V_1_ack_in, enc_ctrl_out_V_data_V_1_ack_in, enc_ctrl_out_V_last_V_1_ack_in, enc_keep_ctrl_V_V_1_ack_in, dec_keep_ctrl_V_V_1_ack_in, dec_ctrl_out_V_data_V_1_ack_in, dec_ctrl_out_V_last_V_1_ack_in, hard_data_out_V_data_V_1_ack_in, hard_data_out_V_keep_V_1_ack_in, hard_data_out_V_last_V_1_ack_in, ap_CS_fsm_state17)
    begin
        if ((not(((hard_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (chan_ctrl_out_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_0459_1_in_phi_fu_330_p4_assign_proc : process(tmp_4_reg_632, tmp_3_fu_376_p2, ap_phi_mux_p_s_phi_fu_320_p4, ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327, ap_condition_1310)
    begin
        if ((ap_const_boolean_1 = ap_condition_1310)) then
            if ((tmp_3_fu_376_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_p_0459_1_in_phi_fu_330_p4 <= ap_phi_mux_p_s_phi_fu_320_p4;
            elsif ((tmp_3_fu_376_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_p_0459_1_in_phi_fu_330_p4 <= tmp_4_reg_632;
            else 
                ap_phi_mux_p_0459_1_in_phi_fu_330_p4 <= ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327;
            end if;
        else 
            ap_phi_mux_p_0459_1_in_phi_fu_330_p4 <= ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327;
        end if; 
    end process;


    ap_phi_mux_p_s_phi_fu_320_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_2_reg_637, p_s_reg_316, word_cnt_V_reg_645)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_s_phi_fu_320_p4 <= word_cnt_V_reg_645;
        else 
            ap_phi_mux_p_s_phi_fu_320_p4 <= p_s_reg_316;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327 <= "XXXXXXXXXXXX";

    ap_predicate_op101_write_state3_assign_proc : process(tmp_2_reg_637, tmp_3_reg_641)
    begin
                ap_predicate_op101_write_state3 <= ((tmp_3_reg_641 = ap_const_lv1_1) and (tmp_2_reg_637 = ap_const_lv1_1));
    end process;


    ap_predicate_op108_write_state4_assign_proc : process(tmp_2_reg_637_pp0_iter1_reg, tmp_3_reg_641_pp0_iter1_reg)
    begin
                ap_predicate_op108_write_state4 <= ((tmp_3_reg_641_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_637_pp0_iter1_reg = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(chan_ctrl_out_V_1_ack_in, enc_ctrl_out_V_data_V_1_ack_in, enc_ctrl_out_V_last_V_1_ack_in, enc_keep_ctrl_V_V_1_ack_in, dec_keep_ctrl_V_V_1_ack_in, dec_ctrl_out_V_data_V_1_ack_in, dec_ctrl_out_V_last_V_1_ack_in, hard_data_out_V_data_V_1_ack_in, hard_data_out_V_keep_V_1_ack_in, hard_data_out_V_last_V_1_ack_in, ap_CS_fsm_state17)
    begin
        if ((not(((hard_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (chan_ctrl_out_V_1_ack_in = ap_const_logic_0) or (hard_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (dec_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0) or (dec_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_keep_ctrl_V_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_last_V_1_ack_in = ap_const_logic_0) or (enc_ctrl_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_cntrl_aclk_inv_assign_proc : process(ap_rst_n_cntrl_aclk)
    begin
                ap_rst_n_cntrl_aclk_inv <= not(ap_rst_n_cntrl_aclk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    block_cnt_V_fu_382_p2 <= std_logic_vector(unsigned(t_V_fu_166) + unsigned(ap_const_lv32_1));
        cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp4_fu_399_p8),64));

    chan_ctrl_out_V_1_ack_in <= chan_ctrl_out_V_1_state(1);
    chan_ctrl_out_V_1_ack_out <= chan_ctrl_out_V_TREADY;

    chan_ctrl_out_V_1_data_out_assign_proc : process(chan_ctrl_out_V_1_payload_A, chan_ctrl_out_V_1_payload_B, chan_ctrl_out_V_1_sel)
    begin
        if ((chan_ctrl_out_V_1_sel = ap_const_logic_1)) then 
            chan_ctrl_out_V_1_data_out <= chan_ctrl_out_V_1_payload_B;
        else 
            chan_ctrl_out_V_1_data_out <= chan_ctrl_out_V_1_payload_A;
        end if; 
    end process;

    chan_ctrl_out_V_1_load_A <= (not(chan_ctrl_out_V_1_sel_wr) and chan_ctrl_out_V_1_state_cmp_full);
    chan_ctrl_out_V_1_load_B <= (chan_ctrl_out_V_1_state_cmp_full and chan_ctrl_out_V_1_sel_wr);
    chan_ctrl_out_V_1_sel <= chan_ctrl_out_V_1_sel_rd;
    chan_ctrl_out_V_1_state_cmp_full <= '0' when (chan_ctrl_out_V_1_state = ap_const_lv2_1) else '1';

    chan_ctrl_out_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op101_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            chan_ctrl_out_V_1_vld_in <= ap_const_logic_1;
        else 
            chan_ctrl_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    chan_ctrl_out_V_1_vld_out <= chan_ctrl_out_V_1_state(0);
    chan_ctrl_out_V_TDATA <= chan_ctrl_out_V_1_data_out;

    chan_ctrl_out_V_TDATA_blk_n_assign_proc : process(chan_ctrl_out_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_2_reg_637, tmp_3_reg_641, ap_enable_reg_pp0_iter2, tmp_2_reg_637_pp0_iter1_reg, tmp_3_reg_641_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_637_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641 = ap_const_lv1_1) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            chan_ctrl_out_V_TDATA_blk_n <= chan_ctrl_out_V_1_state(1);
        else 
            chan_ctrl_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_ctrl_out_V_TVALID <= chan_ctrl_out_V_1_state(0);
    dec_ctrl_out_TDATA <= dec_ctrl_out_V_data_V_1_data_out;

    dec_ctrl_out_TDATA_blk_n_assign_proc : process(dec_ctrl_out_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_2_reg_637, tmp_3_reg_641, ap_enable_reg_pp0_iter2, tmp_2_reg_637_pp0_iter1_reg, tmp_3_reg_641_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_637_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641 = ap_const_lv1_1) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dec_ctrl_out_TDATA_blk_n <= dec_ctrl_out_V_data_V_1_state(1);
        else 
            dec_ctrl_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dec_ctrl_out_TLAST <= dec_ctrl_out_V_last_V_1_data_out;
    dec_ctrl_out_TVALID <= dec_ctrl_out_V_last_V_1_state(0);
    dec_ctrl_out_V_data_V_1_ack_in <= dec_ctrl_out_V_data_V_1_state(1);
    dec_ctrl_out_V_data_V_1_ack_out <= dec_ctrl_out_TREADY;

    dec_ctrl_out_V_data_V_1_data_out_assign_proc : process(dec_ctrl_out_V_data_V_1_payload_A, dec_ctrl_out_V_data_V_1_payload_B, dec_ctrl_out_V_data_V_1_sel)
    begin
        if ((dec_ctrl_out_V_data_V_1_sel = ap_const_logic_1)) then 
            dec_ctrl_out_V_data_V_1_data_out <= dec_ctrl_out_V_data_V_1_payload_B;
        else 
            dec_ctrl_out_V_data_V_1_data_out <= dec_ctrl_out_V_data_V_1_payload_A;
        end if; 
    end process;

    dec_ctrl_out_V_data_V_1_load_A <= (not(dec_ctrl_out_V_data_V_1_sel_wr) and dec_ctrl_out_V_data_V_1_state_cmp_full);
    dec_ctrl_out_V_data_V_1_load_B <= (dec_ctrl_out_V_data_V_1_state_cmp_full and dec_ctrl_out_V_data_V_1_sel_wr);
    dec_ctrl_out_V_data_V_1_sel <= dec_ctrl_out_V_data_V_1_sel_rd;
    dec_ctrl_out_V_data_V_1_state_cmp_full <= '0' when (dec_ctrl_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    dec_ctrl_out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op101_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dec_ctrl_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_ctrl_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_ctrl_out_V_data_V_1_vld_out <= dec_ctrl_out_V_data_V_1_state(0);
    dec_ctrl_out_V_last_V_1_ack_in <= dec_ctrl_out_V_last_V_1_state(1);
    dec_ctrl_out_V_last_V_1_ack_out <= dec_ctrl_out_TREADY;
    dec_ctrl_out_V_last_V_1_data_out <= ap_const_lv1_1;
    dec_ctrl_out_V_last_V_1_sel <= dec_ctrl_out_V_last_V_1_sel_rd;

    dec_ctrl_out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op101_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dec_ctrl_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_ctrl_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_ctrl_out_V_last_V_1_vld_out <= dec_ctrl_out_V_last_V_1_state(0);
    dec_keep_ctrl_V_V_1_ack_in <= dec_keep_ctrl_V_V_1_state(1);
    dec_keep_ctrl_V_V_1_ack_out <= dec_keep_ctrl_V_V_TREADY;

    dec_keep_ctrl_V_V_1_data_out_assign_proc : process(dec_keep_ctrl_V_V_1_payload_A, dec_keep_ctrl_V_V_1_payload_B, dec_keep_ctrl_V_V_1_sel)
    begin
        if ((dec_keep_ctrl_V_V_1_sel = ap_const_logic_1)) then 
            dec_keep_ctrl_V_V_1_data_out <= dec_keep_ctrl_V_V_1_payload_B;
        else 
            dec_keep_ctrl_V_V_1_data_out <= dec_keep_ctrl_V_V_1_payload_A;
        end if; 
    end process;

    dec_keep_ctrl_V_V_1_load_A <= (not(dec_keep_ctrl_V_V_1_sel_wr) and dec_keep_ctrl_V_V_1_state_cmp_full);
    dec_keep_ctrl_V_V_1_load_B <= (dec_keep_ctrl_V_V_1_state_cmp_full and dec_keep_ctrl_V_V_1_sel_wr);
    dec_keep_ctrl_V_V_1_sel <= dec_keep_ctrl_V_V_1_sel_rd;
    dec_keep_ctrl_V_V_1_state_cmp_full <= '0' when (dec_keep_ctrl_V_V_1_state = ap_const_lv2_1) else '1';

    dec_keep_ctrl_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op101_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dec_keep_ctrl_V_V_1_vld_in <= ap_const_logic_1;
        else 
            dec_keep_ctrl_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dec_keep_ctrl_V_V_1_vld_out <= dec_keep_ctrl_V_V_1_state(0);
    dec_keep_ctrl_V_V_TDATA <= dec_keep_ctrl_V_V_1_data_out;

    dec_keep_ctrl_V_V_TDATA_blk_n_assign_proc : process(dec_keep_ctrl_V_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_2_reg_637, tmp_3_reg_641, ap_enable_reg_pp0_iter2, tmp_2_reg_637_pp0_iter1_reg, tmp_3_reg_641_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_637_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641 = ap_const_lv1_1) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dec_keep_ctrl_V_V_TDATA_blk_n <= dec_keep_ctrl_V_V_1_state(1);
        else 
            dec_keep_ctrl_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dec_keep_ctrl_V_V_TVALID <= dec_keep_ctrl_V_V_1_state(0);
    enc_ctrl_out_TDATA <= enc_ctrl_out_V_data_V_1_data_out;

    enc_ctrl_out_TDATA_blk_n_assign_proc : process(enc_ctrl_out_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_2_reg_637, tmp_3_reg_641, ap_enable_reg_pp0_iter2, tmp_2_reg_637_pp0_iter1_reg, tmp_3_reg_641_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_637_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641 = ap_const_lv1_1) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            enc_ctrl_out_TDATA_blk_n <= enc_ctrl_out_V_data_V_1_state(1);
        else 
            enc_ctrl_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    enc_ctrl_out_TLAST <= enc_ctrl_out_V_last_V_1_data_out;
    enc_ctrl_out_TVALID <= enc_ctrl_out_V_last_V_1_state(0);
    enc_ctrl_out_V_data_V_1_ack_in <= enc_ctrl_out_V_data_V_1_state(1);
    enc_ctrl_out_V_data_V_1_ack_out <= enc_ctrl_out_TREADY;

    enc_ctrl_out_V_data_V_1_data_out_assign_proc : process(enc_ctrl_out_V_data_V_1_payload_A, enc_ctrl_out_V_data_V_1_payload_B, enc_ctrl_out_V_data_V_1_sel)
    begin
        if ((enc_ctrl_out_V_data_V_1_sel = ap_const_logic_1)) then 
            enc_ctrl_out_V_data_V_1_data_out <= enc_ctrl_out_V_data_V_1_payload_B;
        else 
            enc_ctrl_out_V_data_V_1_data_out <= enc_ctrl_out_V_data_V_1_payload_A;
        end if; 
    end process;

    enc_ctrl_out_V_data_V_1_load_A <= (not(enc_ctrl_out_V_data_V_1_sel_wr) and enc_ctrl_out_V_data_V_1_state_cmp_full);
    enc_ctrl_out_V_data_V_1_load_B <= (enc_ctrl_out_V_data_V_1_state_cmp_full and enc_ctrl_out_V_data_V_1_sel_wr);
    enc_ctrl_out_V_data_V_1_sel <= enc_ctrl_out_V_data_V_1_sel_rd;
    enc_ctrl_out_V_data_V_1_state_cmp_full <= '0' when (enc_ctrl_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    enc_ctrl_out_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op101_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            enc_ctrl_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            enc_ctrl_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    enc_ctrl_out_V_data_V_1_vld_out <= enc_ctrl_out_V_data_V_1_state(0);
    enc_ctrl_out_V_last_V_1_ack_in <= enc_ctrl_out_V_last_V_1_state(1);
    enc_ctrl_out_V_last_V_1_ack_out <= enc_ctrl_out_TREADY;
    enc_ctrl_out_V_last_V_1_data_out <= ap_const_lv1_1;
    enc_ctrl_out_V_last_V_1_sel <= enc_ctrl_out_V_last_V_1_sel_rd;

    enc_ctrl_out_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op101_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            enc_ctrl_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            enc_ctrl_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    enc_ctrl_out_V_last_V_1_vld_out <= enc_ctrl_out_V_last_V_1_state(0);
    enc_keep_ctrl_V_V_1_ack_in <= enc_keep_ctrl_V_V_1_state(1);
    enc_keep_ctrl_V_V_1_ack_out <= enc_keep_ctrl_V_V_TREADY;

    enc_keep_ctrl_V_V_1_data_out_assign_proc : process(enc_keep_ctrl_V_V_1_payload_A, enc_keep_ctrl_V_V_1_payload_B, enc_keep_ctrl_V_V_1_sel)
    begin
        if ((enc_keep_ctrl_V_V_1_sel = ap_const_logic_1)) then 
            enc_keep_ctrl_V_V_1_data_out <= enc_keep_ctrl_V_V_1_payload_B;
        else 
            enc_keep_ctrl_V_V_1_data_out <= enc_keep_ctrl_V_V_1_payload_A;
        end if; 
    end process;

    enc_keep_ctrl_V_V_1_load_A <= (not(enc_keep_ctrl_V_V_1_sel_wr) and enc_keep_ctrl_V_V_1_state_cmp_full);
    enc_keep_ctrl_V_V_1_load_B <= (enc_keep_ctrl_V_V_1_state_cmp_full and enc_keep_ctrl_V_V_1_sel_wr);
    enc_keep_ctrl_V_V_1_sel <= enc_keep_ctrl_V_V_1_sel_rd;
    enc_keep_ctrl_V_V_1_state_cmp_full <= '0' when (enc_keep_ctrl_V_V_1_state = ap_const_lv2_1) else '1';

    enc_keep_ctrl_V_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op101_write_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op101_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            enc_keep_ctrl_V_V_1_vld_in <= ap_const_logic_1;
        else 
            enc_keep_ctrl_V_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    enc_keep_ctrl_V_V_1_vld_out <= enc_keep_ctrl_V_V_1_state(0);
    enc_keep_ctrl_V_V_TDATA <= enc_keep_ctrl_V_V_1_data_out;

    enc_keep_ctrl_V_V_TDATA_blk_n_assign_proc : process(enc_keep_ctrl_V_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_2_reg_637, tmp_3_reg_641, ap_enable_reg_pp0_iter2, tmp_2_reg_637_pp0_iter1_reg, tmp_3_reg_641_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641_pp0_iter1_reg = ap_const_lv1_1) and (tmp_2_reg_637_pp0_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_3_reg_641 = ap_const_lv1_1) and (tmp_2_reg_637 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            enc_keep_ctrl_V_V_TDATA_blk_n <= enc_keep_ctrl_V_V_1_state(1);
        else 
            enc_keep_ctrl_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    enc_keep_ctrl_V_V_TVALID <= enc_keep_ctrl_V_V_1_state(0);

    grp_operator_s_fu_337_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_2_reg_637, tmp_2_reg_637_pp0_iter1_reg, tmp_2_reg_637_pp0_iter12_reg, ap_block_pp0_stage0_11001, tmp_2_reg_637_pp0_iter2_reg, tmp_2_reg_637_pp0_iter3_reg, tmp_2_reg_637_pp0_iter4_reg, tmp_2_reg_637_pp0_iter5_reg, tmp_2_reg_637_pp0_iter6_reg, tmp_2_reg_637_pp0_iter7_reg, tmp_2_reg_637_pp0_iter8_reg, tmp_2_reg_637_pp0_iter9_reg, tmp_2_reg_637_pp0_iter10_reg, tmp_2_reg_637_pp0_iter11_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_2_reg_637_pp0_iter11_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter10_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter9_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter8_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter7_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter6_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter5_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter4_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter3_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter2_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter12_reg = ap_const_lv1_1) or (tmp_2_reg_637_pp0_iter1_reg = ap_const_lv1_1) or (tmp_2_reg_637 = ap_const_lv1_1)))) then 
            grp_operator_s_fu_337_ap_ce <= ap_const_logic_1;
        else 
            grp_operator_s_fu_337_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_operator_s_fu_337_ap_start <= grp_operator_s_fu_337_ap_start_reg;
    hard_data_out_TDATA <= hard_data_out_V_data_V_1_data_out;

    hard_data_out_TDATA_blk_n_assign_proc : process(hard_data_out_V_data_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, tmp_2_reg_637_pp0_iter12_reg, ap_enable_reg_pp0_iter14, tmp_2_reg_637_pp0_iter13_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_2_reg_637_pp0_iter13_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_2_reg_637_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1)))) then 
            hard_data_out_TDATA_blk_n <= hard_data_out_V_data_V_1_state(1);
        else 
            hard_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hard_data_out_TKEEP <= hard_data_out_V_keep_V_1_data_out;
    hard_data_out_TLAST <= hard_data_out_V_last_V_1_data_out;
    hard_data_out_TVALID <= hard_data_out_V_last_V_1_state(0);
    hard_data_out_V_data_V_1_ack_in <= hard_data_out_V_data_V_1_state(1);
    hard_data_out_V_data_V_1_ack_out <= hard_data_out_TREADY;

    hard_data_out_V_data_V_1_data_out_assign_proc : process(hard_data_out_V_data_V_1_payload_A, hard_data_out_V_data_V_1_payload_B, hard_data_out_V_data_V_1_sel)
    begin
        if ((hard_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            hard_data_out_V_data_V_1_data_out <= hard_data_out_V_data_V_1_payload_B;
        else 
            hard_data_out_V_data_V_1_data_out <= hard_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    hard_data_out_V_data_V_1_load_A <= (hard_data_out_V_data_V_1_state_cmp_full and not(hard_data_out_V_data_V_1_sel_wr));
    hard_data_out_V_data_V_1_load_B <= (hard_data_out_V_data_V_1_state_cmp_full and hard_data_out_V_data_V_1_sel_wr);
    hard_data_out_V_data_V_1_sel <= hard_data_out_V_data_V_1_sel_rd;
    hard_data_out_V_data_V_1_state_cmp_full <= '0' when (hard_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    hard_data_out_V_data_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter13, tmp_2_reg_637_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_reg_637_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            hard_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            hard_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    hard_data_out_V_data_V_1_vld_out <= hard_data_out_V_data_V_1_state(0);
    hard_data_out_V_keep_V_1_ack_in <= hard_data_out_V_keep_V_1_state(1);
    hard_data_out_V_keep_V_1_ack_out <= hard_data_out_TREADY;

    hard_data_out_V_keep_V_1_data_out_assign_proc : process(hard_data_out_V_keep_V_1_payload_A, hard_data_out_V_keep_V_1_payload_B, hard_data_out_V_keep_V_1_sel)
    begin
        if ((hard_data_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            hard_data_out_V_keep_V_1_data_out <= hard_data_out_V_keep_V_1_payload_B;
        else 
            hard_data_out_V_keep_V_1_data_out <= hard_data_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    hard_data_out_V_keep_V_1_load_A <= (hard_data_out_V_keep_V_1_state_cmp_full and not(hard_data_out_V_keep_V_1_sel_wr));
    hard_data_out_V_keep_V_1_load_B <= (hard_data_out_V_keep_V_1_state_cmp_full and hard_data_out_V_keep_V_1_sel_wr);
    hard_data_out_V_keep_V_1_sel <= hard_data_out_V_keep_V_1_sel_rd;
    hard_data_out_V_keep_V_1_state_cmp_full <= '0' when (hard_data_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    hard_data_out_V_keep_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter13, tmp_2_reg_637_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_reg_637_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            hard_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            hard_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    hard_data_out_V_keep_V_1_vld_out <= hard_data_out_V_keep_V_1_state(0);
    hard_data_out_V_last_V_1_ack_in <= hard_data_out_V_last_V_1_state(1);
    hard_data_out_V_last_V_1_ack_out <= hard_data_out_TREADY;

    hard_data_out_V_last_V_1_data_out_assign_proc : process(hard_data_out_V_last_V_1_payload_A, hard_data_out_V_last_V_1_payload_B, hard_data_out_V_last_V_1_sel)
    begin
        if ((hard_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            hard_data_out_V_last_V_1_data_out <= hard_data_out_V_last_V_1_payload_B;
        else 
            hard_data_out_V_last_V_1_data_out <= hard_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    hard_data_out_V_last_V_1_load_A <= (hard_data_out_V_last_V_1_state_cmp_full and not(hard_data_out_V_last_V_1_sel_wr));
    hard_data_out_V_last_V_1_load_B <= (hard_data_out_V_last_V_1_state_cmp_full and hard_data_out_V_last_V_1_sel_wr);
    hard_data_out_V_last_V_1_sel <= hard_data_out_V_last_V_1_sel_rd;
    hard_data_out_V_last_V_1_state_cmp_full <= '0' when (hard_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    hard_data_out_V_last_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter13, tmp_2_reg_637_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_2_reg_637_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
            hard_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            hard_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    hard_data_out_V_last_V_1_vld_out <= hard_data_out_V_last_V_1_state(0);
    p_Result_1_fu_474_p4 <= grp_operator_s_fu_337_ap_return(11 downto 8);
    p_Result_2_fu_424_p4 <= grp_operator_s_fu_337_ap_return(31 downto 28);
    p_Result_3_fu_484_p4 <= grp_operator_s_fu_337_ap_return(7 downto 4);
    p_Result_4_fu_434_p4 <= grp_operator_s_fu_337_ap_return(27 downto 24);
    p_Result_5_fu_514_p12 <= ((((((((((tmp_s_fu_508_p2 & p_Result_s_17_fu_498_p4) & tmp_7_fu_494_p1) & p_Result_3_fu_484_p4) & p_Result_1_fu_474_p4) & p_Result_s_fu_464_p4) & p_Result_8_fu_454_p4) & p_Result_6_fu_444_p4) & p_Result_4_fu_434_p4) & p_Result_2_fu_424_p4) & rnd_data_V_1_fu_420_p1);
    p_Result_6_fu_444_p4 <= grp_operator_s_fu_337_ap_return(23 downto 20);
    p_Result_8_fu_454_p4 <= grp_operator_s_fu_337_ap_return(19 downto 16);
    
    p_Result_s_17_fu_498_p4_proc : process(grp_operator_s_fu_337_ap_return)
    variable vlo_cpy : STD_LOGIC_VECTOR(35+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(35+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(35 - 1 downto 0);
    variable p_Result_s_17_fu_498_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(35 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(35 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(35 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_1F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := grp_operator_s_fu_337_ap_return;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(35-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(35-1-unsigned(ap_const_lv32_1F(6-1 downto 0)));
            for p_Result_s_17_fu_498_p4_i in 0 to 35-1 loop
                v0_cpy(p_Result_s_17_fu_498_p4_i) := grp_operator_s_fu_337_ap_return(35-1-p_Result_s_17_fu_498_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(35-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_17_fu_498_p4 <= resvalue(32-1 downto 0);
    end process;

    p_Result_s_fu_464_p4 <= grp_operator_s_fu_337_ap_return(15 downto 12);
    rnd_data_V_1_fu_420_p1 <= grp_operator_s_fu_337_ap_return(32 - 1 downto 0);
    tmp4_fu_399_p8 <= ((((((chan_rem_V_read_reg_582 & chan_symbls_V_read_reg_587) & inv_sigma_sq_V_read_reg_607) & snr_V_read_reg_612) & skip_chan_V_read_reg_617) & mod_type_V_read_reg_622) & fec_type_V_read_reg_627);
    tmp_1_fu_364_p2 <= "0" when (ap_phi_mux_p_s_phi_fu_320_p4 = ap_const_lv12_0) else "1";
    tmp_2_fu_370_p2 <= (tmp_fu_359_p2 or tmp_1_fu_364_p2);
    tmp_3_fu_376_p2 <= "1" when (ap_phi_mux_p_s_phi_fu_320_p4 = ap_const_lv12_0) else "0";
    tmp_4_fu_347_p1 <= source_words_V(12 - 1 downto 0);
    tmp_7_fu_494_p1 <= grp_operator_s_fu_337_ap_return(4 - 1 downto 0);
    tmp_data_V_fu_540_p3 <= 
        ap_const_lv128_lc_2 when (zero_data_V_read_reg_577(0) = '1') else 
        p_Result_5_fu_514_p12;
    tmp_fu_359_p2 <= "1" when (unsigned(t_V_fu_166) < unsigned(num_blocks_V_read_reg_592)) else "0";
    tmp_keep_V_fu_548_p3 <= 
        source_keep_V_read_reg_572 when (tmp_last_V_reg_656_pp0_iter12_reg(0) = '1') else 
        ap_const_lv16_FFFF;
    tmp_last_V_fu_415_p2 <= "1" when (word_cnt_V_reg_645 = ap_const_lv12_0) else "0";
    tmp_s_fu_508_p2 <= (p_Result_s_17_fu_498_p4 xor ap_const_lv32_FFFFFFFF);
    word_cnt_V_fu_393_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_0459_1_in_phi_fu_330_p4) + unsigned(ap_const_lv12_FFF));
end behav;
