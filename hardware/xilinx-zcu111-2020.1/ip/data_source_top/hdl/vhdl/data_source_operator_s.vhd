-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1.0
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity data_source_operator_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (34 downto 0) );
end;


architecture behav of data_source_operator_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000001001000110100010101100111100010011010101111001101111011110001001000110100010101100111100010011010101111001101111011110000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv9_180 : STD_LOGIC_VECTOR (8 downto 0) := "110000000";
    constant ap_const_lv15_4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv47_1C7C3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000011100011111000011";
    constant ap_const_lv49_200 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000001000000000";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv38_3C00000001 : STD_LOGIC_VECTOR (37 downto 0) := "11110000000000000000000000000000000001";
    constant ap_const_lv35_3FFFFFFFF : STD_LOGIC_VECTOR (34 downto 0) := "01111111111111111111111111111111111";
    constant ap_const_lv35_400000001 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal rnd_src_lfsr128_V : STD_LOGIC_VECTOR (127 downto 0) := "00000001001000110100010101100111100010011010101111001101111011110001001000110100010101100111100010011010101111001101111011110000";
    signal coarseContents_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coarseContents_ce0 : STD_LOGIC;
    signal coarseContents_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal coarseContents_ce1 : STD_LOGIC;
    signal coarseContents_q1 : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_address2 : STD_LOGIC_VECTOR (8 downto 0);
    signal coarseContents_ce2 : STD_LOGIC;
    signal coarseContents_q2 : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_address3 : STD_LOGIC_VECTOR (8 downto 0);
    signal coarseContents_ce3 : STD_LOGIC;
    signal coarseContents_q3 : STD_LOGIC_VECTOR (16 downto 0);
    signal gradientContents_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gradientContents_ce0 : STD_LOGIC;
    signal gradientContents_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal gradientContents_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal gradientContents_ce1 : STD_LOGIC;
    signal gradientContents_q1 : STD_LOGIC_VECTOR (12 downto 0);
    signal gradientContents_address2 : STD_LOGIC_VECTOR (8 downto 0);
    signal gradientContents_ce2 : STD_LOGIC;
    signal gradientContents_q2 : STD_LOGIC_VECTOR (12 downto 0);
    signal gradientContents_address3 : STD_LOGIC_VECTOR (8 downto 0);
    signal gradientContents_ce3 : STD_LOGIC;
    signal gradientContents_q3 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_s_reg_1614 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Val2_s_reg_1614_pp0_iter1_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Val2_s_reg_1614_pp0_iter2_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Val2_s_reg_1614_pp0_iter3_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Val2_s_reg_1614_pp0_iter4_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal p_Val2_s_reg_1614_pp0_iter5_reg : STD_LOGIC_VECTOR (127 downto 0);
    signal icmp_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1622 : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_V_load_3_0_1_fu_320_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_0_1_reg_1628 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp3_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp3_reg_1634 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_reg_1640 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_fu_354_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_reg_1645 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_reg_1645_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_reg_1645_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_reg_1645_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp1_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_reg_1650 : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_V_load_3_1_1_fu_402_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_1_1_reg_1656 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp2_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp2_reg_1662 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_1_reg_1668 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_45_1_reg_1673 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_1_reg_1673_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_1_reg_1673_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_1_reg_1673_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp5_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp5_reg_1678 : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_V_load_3_2_1_fu_490_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_2_1_reg_1684 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp7_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp7_reg_1690 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_2_reg_1696 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_45_2_reg_1701 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_2_reg_1701_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_2_reg_1701_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_2_reg_1701_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp9_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp9_reg_1706 : STD_LOGIC_VECTOR (0 downto 0);
    signal norm_V_load_3_3_1_fu_578_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_3_1_reg_1712 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp10_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp10_reg_1718 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp2_3_reg_1724 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_45_3_reg_1729 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_3_reg_1729_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_3_reg_1729_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_45_3_reg_1729_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_860_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_reg_1734 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_reg_1739 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_979_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_reg_1744 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_1749 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_39_fu_1098_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_reg_1754 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_40_reg_1759 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_46_fu_1217_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_46_reg_1764 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_47_reg_1769 : STD_LOGIC_VECTOR (3 downto 0);
    signal coarseContents_load_reg_1814 : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_reg_1814_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_reg_1814_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal gradientContents_loa_reg_1819 : STD_LOGIC_VECTOR (12 downto 0);
    signal coarseContents_load_1_reg_1824 : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_1_reg_1824_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_1_reg_1824_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal gradientContents_loa_1_reg_1829 : STD_LOGIC_VECTOR (12 downto 0);
    signal coarseContents_load_2_reg_1834 : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_2_reg_1834_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_2_reg_1834_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal gradientContents_loa_2_reg_1839 : STD_LOGIC_VECTOR (12 downto 0);
    signal coarseContents_load_3_reg_1844 : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_3_reg_1844_pp0_iter4_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal coarseContents_load_3_reg_1844_pp0_iter5_reg : STD_LOGIC_VECTOR (16 downto 0);
    signal gradientContents_loa_3_reg_1849 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1590_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_9_reg_1894 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1596_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_9_1_reg_1899 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1602_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_9_2_reg_1904 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1608_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_9_3_reg_1909 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp7_fu_1484_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp7_reg_1914 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp8_fu_1490_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp8_reg_1919 : STD_LOGIC_VECTOR (29 downto 0);
    signal centralLimitNoise_V_fu_1502_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal centralLimitNoise_V_reg_1924 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1511_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_25_reg_1934 : STD_LOGIC_VECTOR (46 downto 0);
    signal r_V_fu_1524_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_reg_1939 : STD_LOGIC_VECTOR (48 downto 0);
    signal icmp12_fu_1550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp12_reg_1944 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_1556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1950 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_3_fu_1238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_1_fu_1250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_2_fu_1262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_46_3_fu_1274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_742_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_9_fu_286_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_302_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_312_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal phitmp1_fu_276_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_10_fu_328_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_24_fu_368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_384_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_1_fu_394_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal phitmp1_1_fu_358_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_fu_410_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_33_fu_456_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_34_fu_472_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_2_fu_482_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal phitmp1_2_fu_446_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_35_fu_498_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_48_fu_544_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_42_fu_560_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_74_3_fu_570_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal phitmp1_3_fu_534_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_50_fu_586_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_49_fu_636_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_13_fu_646_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lfsr1_V_fu_622_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_14_fu_654_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_3_fu_660_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_15_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_16_fu_674_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_17_fu_680_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_60_fu_692_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_19_fu_696_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lfsr2_V_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_20_fu_704_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_8_fu_710_p4 : STD_LOGIC_VECTOR (50 downto 0);
    signal r_V_21_fu_720_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_22_fu_724_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_23_fu_730_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_18_fu_686_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_24_fu_736_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bramChapter_V_load_1_fu_756_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_0_s_fu_763_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_770_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_0_2_fu_782_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_12_fu_788_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal bramChapter_V_load_1_1_fu_775_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp6_fu_798_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_0_1_fu_804_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_818_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_826_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bramChapter_V_load_1_2_fu_810_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_834_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_0_3_fu_842_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_V_load_fu_848_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_20_fu_856_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bramChapter_V_load_1_3_fu_875_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_1_s_fu_882_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_889_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_1_2_fu_901_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_27_fu_907_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal bramChapter_V_load_1_4_fu_894_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp4_fu_917_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_1_1_fu_923_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_fu_937_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_fu_945_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bramChapter_V_load_1_5_fu_929_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_fu_953_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_1_3_fu_961_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_V_load_s_fu_967_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_31_fu_975_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bramChapter_V_load_1_6_fu_994_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_2_s_fu_1001_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_36_fu_1008_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_2_2_fu_1020_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_37_fu_1026_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal bramChapter_V_load_1_7_fu_1013_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp8_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_2_1_fu_1042_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_38_fu_1056_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_fu_1064_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bramChapter_V_load_1_8_fu_1048_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_43_fu_1072_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_2_3_fu_1080_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_V_load_2_fu_1086_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_fu_1094_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal bramChapter_V_load_1_9_fu_1113_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_76_3_s_fu_1120_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_51_fu_1127_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_load_3_3_2_fu_1139_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_52_fu_1145_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal bramChapter_V_load_1_11_fu_1132_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp11_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_3_1_fu_1161_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_53_fu_1175_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1183_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bramChapter_V_load_1_10_fu_1167_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_55_fu_1191_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_3_3_fu_1199_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_V_load_3_fu_1205_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_fu_1213_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_1232_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_1_fu_1244_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_2_fu_1256_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_44_3_fu_1268_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_s_fu_1314_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_6_fu_1311_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_cast_fu_1321_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_fu_1304_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1325_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal addconv_fu_1331_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_16_1_fu_1355_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_47_1_fu_1352_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_16_1_cast_fu_1362_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_23_fu_1345_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_1_fu_1366_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal addconv_1_fu_1372_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_16_2_fu_1396_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_47_2_fu_1393_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_16_2_cast_fu_1403_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_32_fu_1386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_2_fu_1407_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal addconv_2_fu_1413_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_16_3_fu_1437_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_47_3_fu_1434_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_16_3_cast_fu_1444_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_45_fu_1427_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_3_fu_1448_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal addconv_3_fu_1454_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_V_load_fu_1337_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_V_load_1_fu_1378_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_V_load_2_fu_1419_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_V_load_3_fu_1460_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_3_cast_fu_1472_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_2_cast_fu_1468_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_fu_1476_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_18_fu_1480_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp8_cast_fu_1499_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp7_cast_fu_1496_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1511_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_8_cast_fu_1517_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_18_fu_1520_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_63_fu_1540_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundedNoise_V_fu_1530_p4 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_fu_1578_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal saturatedNoise_V_1_fu_1571_p3 : STD_LOGIC_VECTOR (34 downto 0);
    signal saturatedNoise_V_fu_1562_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal grp_fu_1590_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1596_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1602_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1608_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1511_ce : STD_LOGIC;
    signal grp_fu_1590_ce : STD_LOGIC;
    signal grp_fu_1596_ce : STD_LOGIC;
    signal grp_fu_1602_ce : STD_LOGIC;
    signal grp_fu_1608_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1590_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1596_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1602_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1608_p00 : STD_LOGIC_VECTOR (22 downto 0);

    component data_source_top_mul_31s_18ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component data_source_top_mul_mul_13ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component data_source_operator_s_coarsebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (16 downto 0);
        address3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component data_source_operator_s_gradiecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address2 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (12 downto 0);
        address3 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    coarseContents_U : component data_source_operator_s_coarsebkb
    generic map (
        DataWidth => 17,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coarseContents_address0,
        ce0 => coarseContents_ce0,
        q0 => coarseContents_q0,
        address1 => coarseContents_address1,
        ce1 => coarseContents_ce1,
        q1 => coarseContents_q1,
        address2 => coarseContents_address2,
        ce2 => coarseContents_ce2,
        q2 => coarseContents_q2,
        address3 => coarseContents_address3,
        ce3 => coarseContents_ce3,
        q3 => coarseContents_q3);

    gradientContents_U : component data_source_operator_s_gradiecud
    generic map (
        DataWidth => 13,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradientContents_address0,
        ce0 => gradientContents_ce0,
        q0 => gradientContents_q0,
        address1 => gradientContents_address1,
        ce1 => gradientContents_ce1,
        q1 => gradientContents_q1,
        address2 => gradientContents_address2,
        ce2 => gradientContents_ce2,
        q2 => gradientContents_q2,
        address3 => gradientContents_address3,
        ce3 => gradientContents_ce3,
        q3 => gradientContents_q3);

    top_mul_31s_18ns_dEe_U1 : component data_source_top_mul_31s_18ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 31,
        din1_WIDTH => 18,
        dout_WIDTH => 47)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => centralLimitNoise_V_reg_1924,
        din1 => grp_fu_1511_p1,
        ce => grp_fu_1511_ce,
        dout => grp_fu_1511_p2);

    top_mul_mul_13ns_eOg_U2 : component data_source_top_mul_mul_13ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1590_p0,
        din1 => tmp_22_reg_1645_pp0_iter3_reg,
        ce => grp_fu_1590_ce,
        dout => grp_fu_1590_p2);

    top_mul_mul_13ns_eOg_U3 : component data_source_top_mul_mul_13ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1596_p0,
        din1 => tmp_45_1_reg_1673_pp0_iter3_reg,
        ce => grp_fu_1596_ce,
        dout => grp_fu_1596_p2);

    top_mul_mul_13ns_eOg_U4 : component data_source_top_mul_mul_13ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1602_p0,
        din1 => tmp_45_2_reg_1701_pp0_iter3_reg,
        ce => grp_fu_1602_ce,
        dout => grp_fu_1602_p2);

    top_mul_mul_13ns_eOg_U5 : component data_source_top_mul_mul_13ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        dout_WIDTH => 23)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1608_p0,
        din1 => tmp_45_3_reg_1729_pp0_iter3_reg,
        ce => grp_fu_1608_ce,
        dout => grp_fu_1608_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    rnd_src_lfsr128_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rnd_src_lfsr128_V <= ap_const_lv128_lc_1;
            else
                if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    rnd_src_lfsr128_V <= p_Result_s_fu_742_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                centralLimitNoise_V_reg_1924 <= centralLimitNoise_V_fu_1502_p2;
                coarseContents_load_1_reg_1824_pp0_iter4_reg <= coarseContents_load_1_reg_1824;
                coarseContents_load_1_reg_1824_pp0_iter5_reg <= coarseContents_load_1_reg_1824_pp0_iter4_reg;
                coarseContents_load_2_reg_1834_pp0_iter4_reg <= coarseContents_load_2_reg_1834;
                coarseContents_load_2_reg_1834_pp0_iter5_reg <= coarseContents_load_2_reg_1834_pp0_iter4_reg;
                coarseContents_load_3_reg_1844_pp0_iter4_reg <= coarseContents_load_3_reg_1844;
                coarseContents_load_3_reg_1844_pp0_iter5_reg <= coarseContents_load_3_reg_1844_pp0_iter4_reg;
                coarseContents_load_reg_1814_pp0_iter4_reg <= coarseContents_load_reg_1814;
                coarseContents_load_reg_1814_pp0_iter5_reg <= coarseContents_load_reg_1814_pp0_iter4_reg;
                icmp12_reg_1944 <= icmp12_fu_1550_p2;
                p_Val2_s_reg_1614_pp0_iter2_reg <= p_Val2_s_reg_1614_pp0_iter1_reg;
                p_Val2_s_reg_1614_pp0_iter3_reg <= p_Val2_s_reg_1614_pp0_iter2_reg;
                p_Val2_s_reg_1614_pp0_iter4_reg <= p_Val2_s_reg_1614_pp0_iter3_reg;
                p_Val2_s_reg_1614_pp0_iter5_reg <= p_Val2_s_reg_1614_pp0_iter4_reg;
                r_V_25_reg_1934 <= grp_fu_1511_p2;
                r_V_9_1_reg_1899 <= grp_fu_1596_p2;
                r_V_9_2_reg_1904 <= grp_fu_1602_p2;
                r_V_9_3_reg_1909 <= grp_fu_1608_p2;
                r_V_9_reg_1894 <= grp_fu_1590_p2;
                r_V_reg_1939 <= r_V_fu_1524_p2;
                tmp7_reg_1914 <= tmp7_fu_1484_p2;
                tmp8_reg_1919 <= tmp8_fu_1490_p2;
                tmp_21_reg_1950 <= tmp_21_fu_1556_p2;
                tmp_22_reg_1645_pp0_iter2_reg <= tmp_22_reg_1645_pp0_iter1_reg;
                tmp_22_reg_1645_pp0_iter3_reg <= tmp_22_reg_1645_pp0_iter2_reg;
                tmp_45_1_reg_1673_pp0_iter2_reg <= tmp_45_1_reg_1673_pp0_iter1_reg;
                tmp_45_1_reg_1673_pp0_iter3_reg <= tmp_45_1_reg_1673_pp0_iter2_reg;
                tmp_45_2_reg_1701_pp0_iter2_reg <= tmp_45_2_reg_1701_pp0_iter1_reg;
                tmp_45_2_reg_1701_pp0_iter3_reg <= tmp_45_2_reg_1701_pp0_iter2_reg;
                tmp_45_3_reg_1729_pp0_iter2_reg <= tmp_45_3_reg_1729_pp0_iter1_reg;
                tmp_45_3_reg_1729_pp0_iter3_reg <= tmp_45_3_reg_1729_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                coarseContents_load_1_reg_1824 <= coarseContents_q1;
                coarseContents_load_2_reg_1834 <= coarseContents_q2;
                coarseContents_load_3_reg_1844 <= coarseContents_q3;
                coarseContents_load_reg_1814 <= coarseContents_q0;
                gradientContents_loa_1_reg_1829 <= gradientContents_q1;
                gradientContents_loa_2_reg_1839 <= gradientContents_q2;
                gradientContents_loa_3_reg_1849 <= gradientContents_q3;
                gradientContents_loa_reg_1819 <= gradientContents_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp10_reg_1718 <= icmp10_fu_596_p2;
                icmp1_reg_1650 <= icmp1_fu_378_p2;
                icmp2_reg_1662 <= icmp2_fu_420_p2;
                icmp3_reg_1634 <= icmp3_fu_338_p2;
                icmp5_reg_1678 <= icmp5_fu_466_p2;
                icmp7_reg_1690 <= icmp7_fu_508_p2;
                icmp9_reg_1706 <= icmp9_fu_554_p2;
                icmp_reg_1622 <= icmp_fu_296_p2;
                norm_V_load_3_0_1_reg_1628 <= norm_V_load_3_0_1_fu_320_p3;
                norm_V_load_3_1_1_reg_1656 <= norm_V_load_3_1_1_fu_402_p3;
                norm_V_load_3_2_1_reg_1684 <= norm_V_load_3_2_1_fu_490_p3;
                norm_V_load_3_3_1_reg_1712 <= norm_V_load_3_3_1_fu_578_p3;
                p_Val2_s_reg_1614 <= rnd_src_lfsr128_V;
                p_Val2_s_reg_1614_pp0_iter1_reg <= p_Val2_s_reg_1614;
                phitmp2_1_reg_1668 <= rnd_src_lfsr128_V(46 downto 42);
                phitmp2_2_reg_1696 <= rnd_src_lfsr128_V(78 downto 74);
                phitmp2_3_reg_1724 <= rnd_src_lfsr128_V(110 downto 106);
                phitmp2_reg_1640 <= rnd_src_lfsr128_V(14 downto 10);
                tmp_16_reg_1744 <= tmp_16_fu_979_p2;
                tmp_17_reg_1749 <= bramChapter_V_load_s_fu_967_p3(8 downto 5);
                tmp_1_reg_1739 <= bramChapter_V_load_fu_848_p3(8 downto 5);
                tmp_22_reg_1645 <= tmp_22_fu_354_p1;
                tmp_22_reg_1645_pp0_iter1_reg <= tmp_22_reg_1645;
                tmp_39_reg_1754 <= tmp_39_fu_1098_p2;
                tmp_40_reg_1759 <= bramChapter_V_load_2_fu_1086_p3(8 downto 5);
                tmp_45_1_reg_1673 <= rnd_src_lfsr128_V(41 downto 32);
                tmp_45_1_reg_1673_pp0_iter1_reg <= tmp_45_1_reg_1673;
                tmp_45_2_reg_1701 <= rnd_src_lfsr128_V(73 downto 64);
                tmp_45_2_reg_1701_pp0_iter1_reg <= tmp_45_2_reg_1701;
                tmp_45_3_reg_1729 <= rnd_src_lfsr128_V(105 downto 96);
                tmp_45_3_reg_1729_pp0_iter1_reg <= tmp_45_3_reg_1729;
                tmp_46_reg_1764 <= tmp_46_fu_1217_p2;
                tmp_47_reg_1769 <= bramChapter_V_load_3_fu_1205_p3(8 downto 5);
                tmp_s_reg_1734 <= tmp_s_fu_860_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    addconv_1_fu_1372_p2 <= std_logic_vector(unsigned(r_V_16_1_cast_fu_1362_p1) + unsigned(tmp_47_1_fu_1352_p1));
    addconv_2_fu_1413_p2 <= std_logic_vector(unsigned(r_V_16_2_cast_fu_1403_p1) + unsigned(tmp_47_2_fu_1393_p1));
    addconv_3_fu_1454_p2 <= std_logic_vector(unsigned(r_V_16_3_cast_fu_1444_p1) + unsigned(tmp_47_3_fu_1434_p1));
    addconv_fu_1331_p2 <= std_logic_vector(unsigned(r_V_cast_fu_1321_p1) + unsigned(tmp_6_fu_1311_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to11)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to11 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        saturatedNoise_V_1_fu_1571_p3 when (tmp_fu_1578_p2(0) = '1') else 
        saturatedNoise_V_fu_1562_p4;
    bramChapter_V_load_1_10_fu_1167_p3 <= 
        bramChapter_V_load_1_11_fu_1132_p3 when (icmp11_fu_1155_p2(0) = '1') else 
        tmp_76_3_1_fu_1161_p2;
    bramChapter_V_load_1_11_fu_1132_p3 <= 
        bramChapter_V_load_1_9_fu_1113_p3 when (icmp10_reg_1718(0) = '1') else 
        tmp_76_3_s_fu_1120_p3;
    bramChapter_V_load_1_1_fu_775_p3 <= 
        bramChapter_V_load_1_fu_756_p3 when (icmp3_reg_1634(0) = '1') else 
        tmp_76_0_s_fu_763_p3;
    bramChapter_V_load_1_2_fu_810_p3 <= 
        bramChapter_V_load_1_1_fu_775_p3 when (icmp6_fu_798_p2(0) = '1') else 
        tmp_76_0_1_fu_804_p2;
    bramChapter_V_load_1_3_fu_875_p3 <= 
        ap_const_lv9_0 when (icmp1_reg_1650(0) = '1') else 
        ap_const_lv9_100;
    bramChapter_V_load_1_4_fu_894_p3 <= 
        bramChapter_V_load_1_3_fu_875_p3 when (icmp2_reg_1662(0) = '1') else 
        tmp_76_1_s_fu_882_p3;
    bramChapter_V_load_1_5_fu_929_p3 <= 
        bramChapter_V_load_1_4_fu_894_p3 when (icmp4_fu_917_p2(0) = '1') else 
        tmp_76_1_1_fu_923_p2;
    bramChapter_V_load_1_6_fu_994_p3 <= 
        ap_const_lv9_0 when (icmp5_reg_1678(0) = '1') else 
        ap_const_lv9_100;
    bramChapter_V_load_1_7_fu_1013_p3 <= 
        bramChapter_V_load_1_6_fu_994_p3 when (icmp7_reg_1690(0) = '1') else 
        tmp_76_2_s_fu_1001_p3;
    bramChapter_V_load_1_8_fu_1048_p3 <= 
        bramChapter_V_load_1_7_fu_1013_p3 when (icmp8_fu_1036_p2(0) = '1') else 
        tmp_76_2_1_fu_1042_p2;
    bramChapter_V_load_1_9_fu_1113_p3 <= 
        ap_const_lv9_0 when (icmp9_reg_1706(0) = '1') else 
        ap_const_lv9_100;
    bramChapter_V_load_1_fu_756_p3 <= 
        ap_const_lv9_0 when (icmp_reg_1622(0) = '1') else 
        ap_const_lv9_100;
    bramChapter_V_load_2_fu_1086_p3 <= 
        tmp_76_2_3_fu_1080_p2 when (tmp_43_fu_1072_p3(0) = '1') else 
        bramChapter_V_load_1_8_fu_1048_p3;
    bramChapter_V_load_3_fu_1205_p3 <= 
        tmp_76_3_3_fu_1199_p2 when (tmp_55_fu_1191_p3(0) = '1') else 
        bramChapter_V_load_1_10_fu_1167_p3;
    bramChapter_V_load_fu_848_p3 <= 
        tmp_76_0_3_fu_842_p2 when (tmp_19_fu_834_p3(0) = '1') else 
        bramChapter_V_load_1_2_fu_810_p3;
    bramChapter_V_load_s_fu_967_p3 <= 
        tmp_76_1_3_fu_961_p2 when (tmp_30_fu_953_p3(0) = '1') else 
        bramChapter_V_load_1_5_fu_929_p3;
    centralLimitNoise_V_fu_1502_p2 <= std_logic_vector(signed(tmp8_cast_fu_1499_p1) + signed(tmp7_cast_fu_1496_p1));
    coarseContents_address0 <= tmp_3_fu_1238_p1(9 - 1 downto 0);
    coarseContents_address1 <= tmp_46_1_fu_1250_p1(9 - 1 downto 0);
    coarseContents_address2 <= tmp_46_2_fu_1262_p1(9 - 1 downto 0);
    coarseContents_address3 <= tmp_46_3_fu_1274_p1(9 - 1 downto 0);

    coarseContents_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            coarseContents_ce0 <= ap_const_logic_1;
        else 
            coarseContents_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    coarseContents_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            coarseContents_ce1 <= ap_const_logic_1;
        else 
            coarseContents_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    coarseContents_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            coarseContents_ce2 <= ap_const_logic_1;
        else 
            coarseContents_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    coarseContents_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            coarseContents_ce3 <= ap_const_logic_1;
        else 
            coarseContents_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    gradientContents_address0 <= tmp_3_fu_1238_p1(9 - 1 downto 0);
    gradientContents_address1 <= tmp_46_1_fu_1250_p1(9 - 1 downto 0);
    gradientContents_address2 <= tmp_46_2_fu_1262_p1(9 - 1 downto 0);
    gradientContents_address3 <= tmp_46_3_fu_1274_p1(9 - 1 downto 0);

    gradientContents_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gradientContents_ce0 <= ap_const_logic_1;
        else 
            gradientContents_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    gradientContents_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gradientContents_ce1 <= ap_const_logic_1;
        else 
            gradientContents_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    gradientContents_ce2_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gradientContents_ce2 <= ap_const_logic_1;
        else 
            gradientContents_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    gradientContents_ce3_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            gradientContents_ce3 <= ap_const_logic_1;
        else 
            gradientContents_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_1511_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1511_ce <= ap_const_logic_1;
        else 
            grp_fu_1511_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1511_p1 <= ap_const_lv47_1C7C3(18 - 1 downto 0);

    grp_fu_1590_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1590_ce <= ap_const_logic_1;
        else 
            grp_fu_1590_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1590_p0 <= grp_fu_1590_p00(13 - 1 downto 0);
    grp_fu_1590_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gradientContents_loa_reg_1819),23));

    grp_fu_1596_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1596_ce <= ap_const_logic_1;
        else 
            grp_fu_1596_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1596_p0 <= grp_fu_1596_p00(13 - 1 downto 0);
    grp_fu_1596_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gradientContents_loa_1_reg_1829),23));

    grp_fu_1602_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1602_ce <= ap_const_logic_1;
        else 
            grp_fu_1602_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1602_p0 <= grp_fu_1602_p00(13 - 1 downto 0);
    grp_fu_1602_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gradientContents_loa_2_reg_1839),23));

    grp_fu_1608_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1608_ce <= ap_const_logic_1;
        else 
            grp_fu_1608_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1608_p0 <= grp_fu_1608_p00(13 - 1 downto 0);
    grp_fu_1608_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gradientContents_loa_3_reg_1849),23));
    icmp10_fu_596_p2 <= "1" when (tmp_50_fu_586_p4 = ap_const_lv4_0) else "0";
    icmp11_fu_1155_p2 <= "1" when (tmp_52_fu_1145_p4 = ap_const_lv2_0) else "0";
    icmp12_fu_1550_p2 <= "1" when (signed(tmp_63_fu_1540_p4) > signed(ap_const_lv4_0)) else "0";
    icmp1_fu_378_p2 <= "1" when (tmp_24_fu_368_p4 = ap_const_lv8_0) else "0";
    icmp2_fu_420_p2 <= "1" when (tmp_25_fu_410_p4 = ap_const_lv4_0) else "0";
    icmp3_fu_338_p2 <= "1" when (tmp_10_fu_328_p4 = ap_const_lv4_0) else "0";
    icmp4_fu_917_p2 <= "1" when (tmp_27_fu_907_p4 = ap_const_lv2_0) else "0";
    icmp5_fu_466_p2 <= "1" when (tmp_33_fu_456_p4 = ap_const_lv8_0) else "0";
    icmp6_fu_798_p2 <= "1" when (tmp_12_fu_788_p4 = ap_const_lv2_0) else "0";
    icmp7_fu_508_p2 <= "1" when (tmp_35_fu_498_p4 = ap_const_lv4_0) else "0";
    icmp8_fu_1036_p2 <= "1" when (tmp_37_fu_1026_p4 = ap_const_lv2_0) else "0";
    icmp9_fu_554_p2 <= "1" when (tmp_48_fu_544_p4 = ap_const_lv8_0) else "0";
    icmp_fu_296_p2 <= "1" when (tmp_9_fu_286_p4 = ap_const_lv8_0) else "0";
    lfsr1_V_fu_622_p4 <= rnd_src_lfsr128_V(127 downto 64);
    lfsr2_V_fu_632_p1 <= rnd_src_lfsr128_V(64 - 1 downto 0);
    noiseGen_V_load_1_fu_1378_p3 <= 
        tmp_53_1_fu_1366_p2 when (tmp_23_fu_1345_p3(0) = '1') else 
        addconv_1_fu_1372_p2;
    noiseGen_V_load_2_fu_1419_p3 <= 
        tmp_53_2_fu_1407_p2 when (tmp_32_fu_1386_p3(0) = '1') else 
        addconv_2_fu_1413_p2;
    noiseGen_V_load_3_fu_1460_p3 <= 
        tmp_53_3_fu_1448_p2 when (tmp_45_fu_1427_p3(0) = '1') else 
        addconv_3_fu_1454_p2;
    noiseGen_V_load_fu_1337_p3 <= 
        tmp_7_fu_1325_p2 when (tmp_8_fu_1304_p3(0) = '1') else 
        addconv_fu_1331_p2;
    norm_V_load_3_0_1_fu_320_p3 <= 
        tmp_2_fu_312_p3 when (icmp_fu_296_p2(0) = '1') else 
        phitmp1_fu_276_p4;
    norm_V_load_3_0_2_fu_782_p3 <= 
        tmp_11_fu_770_p2 when (icmp3_reg_1634(0) = '1') else 
        norm_V_load_3_0_1_reg_1628;
    norm_V_load_3_1_1_fu_402_p3 <= 
        tmp_74_1_fu_394_p3 when (icmp1_fu_378_p2(0) = '1') else 
        phitmp1_1_fu_358_p4;
    norm_V_load_3_1_2_fu_901_p3 <= 
        tmp_26_fu_889_p2 when (icmp2_reg_1662(0) = '1') else 
        norm_V_load_3_1_1_reg_1656;
    norm_V_load_3_2_1_fu_490_p3 <= 
        tmp_74_2_fu_482_p3 when (icmp5_fu_466_p2(0) = '1') else 
        phitmp1_2_fu_446_p4;
    norm_V_load_3_2_2_fu_1020_p3 <= 
        tmp_36_fu_1008_p2 when (icmp7_reg_1690(0) = '1') else 
        norm_V_load_3_2_1_reg_1684;
    norm_V_load_3_3_1_fu_578_p3 <= 
        tmp_74_3_fu_570_p3 when (icmp9_fu_554_p2(0) = '1') else 
        phitmp1_3_fu_534_p4;
    norm_V_load_3_3_2_fu_1139_p3 <= 
        tmp_51_fu_1127_p2 when (icmp10_reg_1718(0) = '1') else 
        norm_V_load_3_3_1_reg_1712;
        p_2_cast_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_V_load_fu_1337_p3),30));

        p_3_cast_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_V_load_1_fu_1378_p3),30));

    p_Result_s_fu_742_p3 <= (r_V_18_fu_686_p2 & r_V_24_fu_736_p2);
    phitmp1_1_fu_358_p4 <= rnd_src_lfsr128_V(61 downto 47);
    phitmp1_2_fu_446_p4 <= rnd_src_lfsr128_V(93 downto 79);
    phitmp1_3_fu_534_p4 <= rnd_src_lfsr128_V(125 downto 111);
    phitmp1_fu_276_p4 <= rnd_src_lfsr128_V(29 downto 15);
    r_V_13_fu_646_p3 <= (tmp_49_fu_636_p4 & ap_const_lv34_0);
    r_V_14_fu_654_p2 <= (r_V_13_fu_646_p3 xor lfsr1_V_fu_622_p4);
    r_V_15_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_3_fu_660_p4),64));
    r_V_16_1_cast_fu_1362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_16_1_fu_1355_p3),29));
    r_V_16_1_fu_1355_p3 <= (coarseContents_load_1_reg_1824_pp0_iter5_reg & ap_const_lv10_0);
    r_V_16_2_cast_fu_1403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_16_2_fu_1396_p3),29));
    r_V_16_2_fu_1396_p3 <= (coarseContents_load_2_reg_1834_pp0_iter5_reg & ap_const_lv10_0);
    r_V_16_3_cast_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_16_3_fu_1437_p3),29));
    r_V_16_3_fu_1437_p3 <= (coarseContents_load_3_reg_1844_pp0_iter5_reg & ap_const_lv10_0);
    r_V_16_fu_674_p2 <= (r_V_15_fu_670_p1 xor r_V_14_fu_654_p2);
    r_V_17_fu_680_p2 <= std_logic_vector(shift_left(unsigned(r_V_16_fu_674_p2),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    r_V_18_fu_686_p2 <= (r_V_17_fu_680_p2 xor r_V_16_fu_674_p2);
    r_V_19_fu_696_p3 <= (tmp_60_fu_692_p1 & ap_const_lv58_0);
    r_V_20_fu_704_p2 <= (r_V_19_fu_696_p3 xor lfsr2_V_fu_632_p1);
    r_V_21_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_fu_710_p4),64));
    r_V_22_fu_724_p2 <= (r_V_21_fu_720_p1 xor r_V_20_fu_704_p2);
    r_V_23_fu_730_p2 <= std_logic_vector(shift_left(unsigned(r_V_22_fu_724_p2),to_integer(unsigned('0' & ap_const_lv64_7(31-1 downto 0)))));
    r_V_24_fu_736_p2 <= (r_V_23_fu_730_p2 xor r_V_22_fu_724_p2);
    r_V_3_fu_660_p4 <= r_V_14_fu_654_p2(63 downto 35);
        r_V_8_cast_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_25_reg_1934),48));

    r_V_8_fu_710_p4 <= r_V_20_fu_704_p2(63 downto 13);
    r_V_cast_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_s_fu_1314_p3),29));
    r_V_fu_1524_p2 <= std_logic_vector(unsigned(tmp_18_fu_1520_p1) + unsigned(ap_const_lv49_200));
    r_V_s_fu_1314_p3 <= (coarseContents_load_reg_1814_pp0_iter5_reg & ap_const_lv10_0);
    roundedNoise_V_fu_1530_p4 <= r_V_fu_1524_p2(47 downto 10);
    saturatedNoise_V_1_fu_1571_p3 <= 
        ap_const_lv35_3FFFFFFFF when (icmp12_reg_1944(0) = '1') else 
        ap_const_lv35_400000001;
    saturatedNoise_V_fu_1562_p4 <= r_V_reg_1939(44 downto 10);
        tmp7_cast_fu_1496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp7_reg_1914),31));

    tmp7_fu_1484_p2 <= std_logic_vector(signed(p_3_cast_fu_1472_p1) + signed(p_2_cast_fu_1468_p1));
        tmp8_cast_fu_1499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp8_reg_1919),31));

    tmp8_fu_1490_p2 <= std_logic_vector(signed(tmp_cast_fu_1476_p1) + signed(tmp_cast_18_fu_1480_p1));
    tmp_10_fu_328_p4 <= norm_V_load_3_0_1_fu_320_p3(14 downto 11);
    tmp_11_fu_770_p2 <= std_logic_vector(shift_left(unsigned(norm_V_load_3_0_1_reg_1628),to_integer(unsigned('0' & ap_const_lv15_4(15-1 downto 0)))));
    tmp_12_fu_788_p4 <= norm_V_load_3_0_2_fu_782_p3(14 downto 13);
    tmp_13_fu_818_p3 <= norm_V_load_3_0_2_fu_782_p3(12 downto 12);
    tmp_14_fu_826_p3 <= norm_V_load_3_0_2_fu_782_p3(14 downto 14);
    tmp_15_fu_384_p4 <= rnd_src_lfsr128_V(53 downto 47);
    tmp_16_fu_979_p2 <= (tmp_31_fu_975_p1 or phitmp2_1_reg_1668);
    tmp_18_fu_1520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_8_cast_fu_1517_p1),49));
    tmp_19_fu_834_p3 <= 
        tmp_13_fu_818_p3 when (icmp6_fu_798_p2(0) = '1') else 
        tmp_14_fu_826_p3;
    tmp_20_fu_856_p1 <= bramChapter_V_load_fu_848_p3(5 - 1 downto 0);
    tmp_21_fu_1556_p2 <= "1" when (signed(roundedNoise_V_fu_1530_p4) < signed(ap_const_lv38_3C00000001)) else "0";
    tmp_22_fu_354_p1 <= rnd_src_lfsr128_V(10 - 1 downto 0);
    tmp_23_fu_1345_p3 <= p_Val2_s_reg_1614_pp0_iter5_reg(63 downto 63);
    tmp_24_fu_368_p4 <= rnd_src_lfsr128_V(61 downto 54);
    tmp_25_fu_410_p4 <= norm_V_load_3_1_1_fu_402_p3(14 downto 11);
    tmp_26_fu_889_p2 <= std_logic_vector(shift_left(unsigned(norm_V_load_3_1_1_reg_1656),to_integer(unsigned('0' & ap_const_lv15_4(15-1 downto 0)))));
    tmp_27_fu_907_p4 <= norm_V_load_3_1_2_fu_901_p3(14 downto 13);
    tmp_28_fu_937_p3 <= norm_V_load_3_1_2_fu_901_p3(12 downto 12);
    tmp_29_fu_945_p3 <= norm_V_load_3_1_2_fu_901_p3(14 downto 14);
    tmp_2_fu_312_p3 <= (tmp_4_fu_302_p4 & ap_const_lv8_0);
    tmp_30_fu_953_p3 <= 
        tmp_28_fu_937_p3 when (icmp4_fu_917_p2(0) = '1') else 
        tmp_29_fu_945_p3;
    tmp_31_fu_975_p1 <= bramChapter_V_load_s_fu_967_p3(5 - 1 downto 0);
    tmp_32_fu_1386_p3 <= p_Val2_s_reg_1614_pp0_iter5_reg(95 downto 95);
    tmp_33_fu_456_p4 <= rnd_src_lfsr128_V(93 downto 86);
    tmp_34_fu_472_p4 <= rnd_src_lfsr128_V(85 downto 79);
    tmp_35_fu_498_p4 <= norm_V_load_3_2_1_fu_490_p3(14 downto 11);
    tmp_36_fu_1008_p2 <= std_logic_vector(shift_left(unsigned(norm_V_load_3_2_1_reg_1684),to_integer(unsigned('0' & ap_const_lv15_4(15-1 downto 0)))));
    tmp_37_fu_1026_p4 <= norm_V_load_3_2_2_fu_1020_p3(14 downto 13);
    tmp_38_fu_1056_p3 <= norm_V_load_3_2_2_fu_1020_p3(12 downto 12);
    tmp_39_fu_1098_p2 <= (tmp_44_fu_1094_p1 or phitmp2_2_reg_1696);
    tmp_3_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_1232_p3),64));
    tmp_41_fu_1064_p3 <= norm_V_load_3_2_2_fu_1020_p3(14 downto 14);
    tmp_42_fu_560_p4 <= rnd_src_lfsr128_V(117 downto 111);
    tmp_43_fu_1072_p3 <= 
        tmp_38_fu_1056_p3 when (icmp8_fu_1036_p2(0) = '1') else 
        tmp_41_fu_1064_p3;
    tmp_44_1_fu_1244_p3 <= (tmp_17_reg_1749 & tmp_16_reg_1744);
    tmp_44_2_fu_1256_p3 <= (tmp_40_reg_1759 & tmp_39_reg_1754);
    tmp_44_3_fu_1268_p3 <= (tmp_47_reg_1769 & tmp_46_reg_1764);
    tmp_44_fu_1094_p1 <= bramChapter_V_load_2_fu_1086_p3(5 - 1 downto 0);
    tmp_45_fu_1427_p3 <= p_Val2_s_reg_1614_pp0_iter5_reg(127 downto 127);
    tmp_46_1_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_1_fu_1244_p3),64));
    tmp_46_2_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_2_fu_1256_p3),64));
    tmp_46_3_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_3_fu_1268_p3),64));
    tmp_46_fu_1217_p2 <= (tmp_56_fu_1213_p1 or phitmp2_3_reg_1724);
        tmp_47_1_fu_1352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_1_reg_1899),29));

        tmp_47_2_fu_1393_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_2_reg_1904),29));

        tmp_47_3_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_3_reg_1909),29));

    tmp_48_fu_544_p4 <= rnd_src_lfsr128_V(125 downto 118);
    tmp_49_fu_636_p4 <= rnd_src_lfsr128_V(93 downto 64);
    tmp_4_fu_302_p4 <= rnd_src_lfsr128_V(21 downto 15);
    tmp_50_fu_586_p4 <= norm_V_load_3_3_1_fu_578_p3(14 downto 11);
    tmp_51_fu_1127_p2 <= std_logic_vector(shift_left(unsigned(norm_V_load_3_3_1_reg_1712),to_integer(unsigned('0' & ap_const_lv15_4(15-1 downto 0)))));
    tmp_52_fu_1145_p4 <= norm_V_load_3_3_2_fu_1139_p3(14 downto 13);
    tmp_53_1_fu_1366_p2 <= std_logic_vector(signed(tmp_47_1_fu_1352_p1) - signed(r_V_16_1_cast_fu_1362_p1));
    tmp_53_2_fu_1407_p2 <= std_logic_vector(signed(tmp_47_2_fu_1393_p1) - signed(r_V_16_2_cast_fu_1403_p1));
    tmp_53_3_fu_1448_p2 <= std_logic_vector(signed(tmp_47_3_fu_1434_p1) - signed(r_V_16_3_cast_fu_1444_p1));
    tmp_53_fu_1175_p3 <= norm_V_load_3_3_2_fu_1139_p3(12 downto 12);
    tmp_54_fu_1183_p3 <= norm_V_load_3_3_2_fu_1139_p3(14 downto 14);
    tmp_55_fu_1191_p3 <= 
        tmp_53_fu_1175_p3 when (icmp11_fu_1155_p2(0) = '1') else 
        tmp_54_fu_1183_p3;
    tmp_56_fu_1213_p1 <= bramChapter_V_load_3_fu_1205_p3(5 - 1 downto 0);
    tmp_5_fu_1232_p3 <= (tmp_1_reg_1739 & tmp_s_reg_1734);
    tmp_60_fu_692_p1 <= rnd_src_lfsr128_V(6 - 1 downto 0);
    tmp_63_fu_1540_p4 <= r_V_fu_1524_p2(47 downto 44);
        tmp_6_fu_1311_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_reg_1894),29));

    tmp_74_1_fu_394_p3 <= (tmp_15_fu_384_p4 & ap_const_lv8_0);
    tmp_74_2_fu_482_p3 <= (tmp_34_fu_472_p4 & ap_const_lv8_0);
    tmp_74_3_fu_570_p3 <= (tmp_42_fu_560_p4 & ap_const_lv8_0);
    tmp_76_0_1_fu_804_p2 <= (bramChapter_V_load_1_1_fu_775_p3 or ap_const_lv9_40);
    tmp_76_0_3_fu_842_p2 <= (bramChapter_V_load_1_2_fu_810_p3 or ap_const_lv9_20);
    tmp_76_0_s_fu_763_p3 <= 
        ap_const_lv9_80 when (icmp_reg_1622(0) = '1') else 
        ap_const_lv9_180;
    tmp_76_1_1_fu_923_p2 <= (bramChapter_V_load_1_4_fu_894_p3 or ap_const_lv9_40);
    tmp_76_1_3_fu_961_p2 <= (bramChapter_V_load_1_5_fu_929_p3 or ap_const_lv9_20);
    tmp_76_1_s_fu_882_p3 <= 
        ap_const_lv9_80 when (icmp1_reg_1650(0) = '1') else 
        ap_const_lv9_180;
    tmp_76_2_1_fu_1042_p2 <= (bramChapter_V_load_1_7_fu_1013_p3 or ap_const_lv9_40);
    tmp_76_2_3_fu_1080_p2 <= (bramChapter_V_load_1_8_fu_1048_p3 or ap_const_lv9_20);
    tmp_76_2_s_fu_1001_p3 <= 
        ap_const_lv9_80 when (icmp5_reg_1678(0) = '1') else 
        ap_const_lv9_180;
    tmp_76_3_1_fu_1161_p2 <= (bramChapter_V_load_1_11_fu_1132_p3 or ap_const_lv9_40);
    tmp_76_3_3_fu_1199_p2 <= (bramChapter_V_load_1_10_fu_1167_p3 or ap_const_lv9_20);
    tmp_76_3_s_fu_1120_p3 <= 
        ap_const_lv9_80 when (icmp9_reg_1706(0) = '1') else 
        ap_const_lv9_180;
    tmp_7_fu_1325_p2 <= std_logic_vector(signed(tmp_6_fu_1311_p1) - signed(r_V_cast_fu_1321_p1));
    tmp_8_fu_1304_p3 <= p_Val2_s_reg_1614_pp0_iter5_reg(31 downto 31);
    tmp_9_fu_286_p4 <= rnd_src_lfsr128_V(29 downto 22);
        tmp_cast_18_fu_1480_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_V_load_3_fu_1460_p3),30));

        tmp_cast_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_V_load_2_fu_1419_p3),30));

    tmp_fu_1578_p2 <= (tmp_21_reg_1950 or icmp12_reg_1944);
    tmp_s_fu_860_p2 <= (tmp_20_fu_856_p1 or phitmp2_reg_1640);
end behav;
