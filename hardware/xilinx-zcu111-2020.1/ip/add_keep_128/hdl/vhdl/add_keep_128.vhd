-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1.0
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity add_keep_128 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ctrl_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    ctrl_V_V_TVALID : IN STD_LOGIC;
    ctrl_V_V_TREADY : OUT STD_LOGIC;
    din_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    din_TVALID : IN STD_LOGIC;
    din_TREADY : OUT STD_LOGIC;
    din_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dout_TDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    dout_TVALID : OUT STD_LOGIC;
    dout_TREADY : IN STD_LOGIC;
    dout_TKEEP : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of add_keep_128 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "add_keep_128,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=0.357000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=626,HLS_SYN_LUT=303}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ctrl_V_V_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl_V_V_0_vld_in : STD_LOGIC;
    signal ctrl_V_V_0_vld_out : STD_LOGIC;
    signal ctrl_V_V_0_ack_in : STD_LOGIC;
    signal ctrl_V_V_0_ack_out : STD_LOGIC;
    signal ctrl_V_V_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl_V_V_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal ctrl_V_V_0_sel_rd : STD_LOGIC := '0';
    signal ctrl_V_V_0_sel_wr : STD_LOGIC := '0';
    signal ctrl_V_V_0_sel : STD_LOGIC;
    signal ctrl_V_V_0_load_A : STD_LOGIC;
    signal ctrl_V_V_0_load_B : STD_LOGIC;
    signal ctrl_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ctrl_V_V_0_state_cmp_full : STD_LOGIC;
    signal din_V_data_V_0_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal din_V_data_V_0_vld_in : STD_LOGIC;
    signal din_V_data_V_0_vld_out : STD_LOGIC;
    signal din_V_data_V_0_ack_in : STD_LOGIC;
    signal din_V_data_V_0_ack_out : STD_LOGIC;
    signal din_V_data_V_0_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal din_V_data_V_0_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal din_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal din_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal din_V_data_V_0_sel : STD_LOGIC;
    signal din_V_data_V_0_load_A : STD_LOGIC;
    signal din_V_data_V_0_load_B : STD_LOGIC;
    signal din_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal din_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal din_V_last_V_0_vld_in : STD_LOGIC;
    signal din_V_last_V_0_vld_out : STD_LOGIC;
    signal din_V_last_V_0_ack_in : STD_LOGIC;
    signal din_V_last_V_0_ack_out : STD_LOGIC;
    signal din_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal din_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal din_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal din_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal din_V_last_V_0_sel : STD_LOGIC;
    signal din_V_last_V_0_load_A : STD_LOGIC;
    signal din_V_last_V_0_load_B : STD_LOGIC;
    signal din_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal din_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal dout_V_data_V_1_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal dout_V_data_V_1_vld_in : STD_LOGIC;
    signal dout_V_data_V_1_vld_out : STD_LOGIC;
    signal dout_V_data_V_1_ack_in : STD_LOGIC;
    signal dout_V_data_V_1_ack_out : STD_LOGIC;
    signal dout_V_data_V_1_payload_A : STD_LOGIC_VECTOR (127 downto 0);
    signal dout_V_data_V_1_payload_B : STD_LOGIC_VECTOR (127 downto 0);
    signal dout_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal dout_V_data_V_1_sel : STD_LOGIC;
    signal dout_V_data_V_1_load_A : STD_LOGIC;
    signal dout_V_data_V_1_load_B : STD_LOGIC;
    signal dout_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal dout_V_keep_V_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal dout_V_keep_V_1_vld_in : STD_LOGIC;
    signal dout_V_keep_V_1_vld_out : STD_LOGIC;
    signal dout_V_keep_V_1_ack_in : STD_LOGIC;
    signal dout_V_keep_V_1_ack_out : STD_LOGIC;
    signal dout_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal dout_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal dout_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal dout_V_keep_V_1_sel : STD_LOGIC;
    signal dout_V_keep_V_1_load_A : STD_LOGIC;
    signal dout_V_keep_V_1_load_B : STD_LOGIC;
    signal dout_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal dout_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_vld_in : STD_LOGIC;
    signal dout_V_last_V_1_vld_out : STD_LOGIC;
    signal dout_V_last_V_1_ack_in : STD_LOGIC;
    signal dout_V_last_V_1_ack_out : STD_LOGIC;
    signal dout_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dout_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal dout_V_last_V_1_sel : STD_LOGIC;
    signal dout_V_last_V_1_load_A : STD_LOGIC;
    signal dout_V_last_V_1_load_B : STD_LOGIC;
    signal dout_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dout_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal ctrl_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal din_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal dout_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_V_reg_95 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_last_V_fu_82_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_out_keep_V_fu_87_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_last_V_fu_82_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ctrl_V_V_0_vld_out = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (ctrl_V_V_0_vld_out = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ctrl_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ctrl_V_V_0_ack_out = ap_const_logic_1) and (ctrl_V_V_0_vld_out = ap_const_logic_1))) then 
                                        ctrl_V_V_0_sel_rd <= not(ctrl_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ctrl_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ctrl_V_V_0_ack_in = ap_const_logic_1) and (ctrl_V_V_0_vld_in = ap_const_logic_1))) then 
                                        ctrl_V_V_0_sel_wr <= not(ctrl_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ctrl_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((ctrl_V_V_0_vld_in = ap_const_logic_0) and (ctrl_V_V_0_state = ap_const_lv2_2)) or ((ctrl_V_V_0_vld_in = ap_const_logic_0) and (ctrl_V_V_0_state = ap_const_lv2_3) and (ctrl_V_V_0_ack_out = ap_const_logic_1)))) then 
                    ctrl_V_V_0_state <= ap_const_lv2_2;
                elsif ((((ctrl_V_V_0_ack_out = ap_const_logic_0) and (ctrl_V_V_0_state = ap_const_lv2_1)) or ((ctrl_V_V_0_ack_out = ap_const_logic_0) and (ctrl_V_V_0_state = ap_const_lv2_3) and (ctrl_V_V_0_vld_in = ap_const_logic_1)))) then 
                    ctrl_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ctrl_V_V_0_vld_in = ap_const_logic_0) and (ctrl_V_V_0_ack_out = ap_const_logic_1))) and not(((ctrl_V_V_0_ack_out = ap_const_logic_0) and (ctrl_V_V_0_vld_in = ap_const_logic_1))) and (ctrl_V_V_0_state = ap_const_lv2_3)) or ((ctrl_V_V_0_state = ap_const_lv2_1) and (ctrl_V_V_0_ack_out = ap_const_logic_1)) or ((ctrl_V_V_0_state = ap_const_lv2_2) and (ctrl_V_V_0_vld_in = ap_const_logic_1)))) then 
                    ctrl_V_V_0_state <= ap_const_lv2_3;
                else 
                    ctrl_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    din_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((din_V_data_V_0_ack_out = ap_const_logic_1) and (din_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        din_V_data_V_0_sel_rd <= not(din_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((din_V_data_V_0_ack_in = ap_const_logic_1) and (din_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        din_V_data_V_0_sel_wr <= not(din_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    din_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((din_V_data_V_0_state = ap_const_lv2_2) and (din_V_data_V_0_vld_in = ap_const_logic_0)) or ((din_V_data_V_0_state = ap_const_lv2_3) and (din_V_data_V_0_vld_in = ap_const_logic_0) and (din_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    din_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((din_V_data_V_0_state = ap_const_lv2_1) and (din_V_data_V_0_ack_out = ap_const_logic_0)) or ((din_V_data_V_0_state = ap_const_lv2_3) and (din_V_data_V_0_ack_out = ap_const_logic_0) and (din_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    din_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((din_V_data_V_0_vld_in = ap_const_logic_0) and (din_V_data_V_0_ack_out = ap_const_logic_1))) and not(((din_V_data_V_0_ack_out = ap_const_logic_0) and (din_V_data_V_0_vld_in = ap_const_logic_1))) and (din_V_data_V_0_state = ap_const_lv2_3)) or ((din_V_data_V_0_state = ap_const_lv2_1) and (din_V_data_V_0_ack_out = ap_const_logic_1)) or ((din_V_data_V_0_state = ap_const_lv2_2) and (din_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    din_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    din_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    din_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((din_V_last_V_0_ack_out = ap_const_logic_1) and (din_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        din_V_last_V_0_sel_rd <= not(din_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    din_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((din_V_last_V_0_ack_in = ap_const_logic_1) and (din_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        din_V_last_V_0_sel_wr <= not(din_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    din_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                din_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((din_V_last_V_0_state = ap_const_lv2_2) and (din_V_last_V_0_vld_in = ap_const_logic_0)) or ((din_V_last_V_0_state = ap_const_lv2_3) and (din_V_last_V_0_vld_in = ap_const_logic_0) and (din_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    din_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((din_V_last_V_0_state = ap_const_lv2_1) and (din_V_last_V_0_ack_out = ap_const_logic_0)) or ((din_V_last_V_0_state = ap_const_lv2_3) and (din_V_last_V_0_ack_out = ap_const_logic_0) and (din_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    din_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((din_V_last_V_0_vld_in = ap_const_logic_0) and (din_V_last_V_0_ack_out = ap_const_logic_1))) and not(((din_V_last_V_0_ack_out = ap_const_logic_0) and (din_V_last_V_0_vld_in = ap_const_logic_1))) and (din_V_last_V_0_state = ap_const_lv2_3)) or ((din_V_last_V_0_state = ap_const_lv2_1) and (din_V_last_V_0_ack_out = ap_const_logic_1)) or ((din_V_last_V_0_state = ap_const_lv2_2) and (din_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    din_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    din_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_data_V_1_ack_out = ap_const_logic_1) and (dout_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_V_data_V_1_sel_rd <= not(dout_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dout_V_data_V_1_ack_in = ap_const_logic_1) and (dout_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        dout_V_data_V_1_sel_wr <= not(dout_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dout_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_data_V_1_state = ap_const_lv2_2) and (dout_V_data_V_1_vld_in = ap_const_logic_0)) or ((dout_V_data_V_1_state = ap_const_lv2_3) and (dout_V_data_V_1_vld_in = ap_const_logic_0) and (dout_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    dout_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_V_data_V_1_state = ap_const_lv2_1) and (dout_V_data_V_1_ack_out = ap_const_logic_0)) or ((dout_V_data_V_1_state = ap_const_lv2_3) and (dout_V_data_V_1_ack_out = ap_const_logic_0) and (dout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dout_V_data_V_1_vld_in = ap_const_logic_0) and (dout_V_data_V_1_ack_out = ap_const_logic_1))) and not(((dout_V_data_V_1_ack_out = ap_const_logic_0) and (dout_V_data_V_1_vld_in = ap_const_logic_1))) and (dout_V_data_V_1_state = ap_const_lv2_3)) or ((dout_V_data_V_1_state = ap_const_lv2_1) and (dout_V_data_V_1_ack_out = ap_const_logic_1)) or ((dout_V_data_V_1_state = ap_const_lv2_2) and (dout_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    dout_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_keep_V_1_ack_out = ap_const_logic_1) and (dout_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_V_keep_V_1_sel_rd <= not(dout_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dout_V_keep_V_1_ack_in = ap_const_logic_1) and (dout_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        dout_V_keep_V_1_sel_wr <= not(dout_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dout_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_keep_V_1_state = ap_const_lv2_2) and (dout_V_keep_V_1_vld_in = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_V_keep_V_1_vld_in = ap_const_logic_0) and (dout_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    dout_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_V_keep_V_1_state = ap_const_lv2_1) and (dout_V_keep_V_1_ack_out = ap_const_logic_0)) or ((dout_V_keep_V_1_state = ap_const_lv2_3) and (dout_V_keep_V_1_ack_out = ap_const_logic_0) and (dout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dout_V_keep_V_1_vld_in = ap_const_logic_0) and (dout_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((dout_V_keep_V_1_ack_out = ap_const_logic_0) and (dout_V_keep_V_1_vld_in = ap_const_logic_1))) and (dout_V_keep_V_1_state = ap_const_lv2_3)) or ((dout_V_keep_V_1_state = ap_const_lv2_1) and (dout_V_keep_V_1_ack_out = ap_const_logic_1)) or ((dout_V_keep_V_1_state = ap_const_lv2_2) and (dout_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    dout_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dout_V_last_V_1_ack_out = ap_const_logic_1) and (dout_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dout_V_last_V_1_sel_rd <= not(dout_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dout_V_last_V_1_ack_in = ap_const_logic_1) and (dout_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        dout_V_last_V_1_sel_wr <= not(dout_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dout_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                dout_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dout_V_last_V_1_state = ap_const_lv2_2) and (dout_V_last_V_1_vld_in = ap_const_logic_0)) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_V_last_V_1_vld_in = ap_const_logic_0) and (dout_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dout_V_last_V_1_state = ap_const_lv2_1) and (dout_V_last_V_1_ack_out = ap_const_logic_0)) or ((dout_V_last_V_1_state = ap_const_lv2_3) and (dout_V_last_V_1_ack_out = ap_const_logic_0) and (dout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dout_V_last_V_1_vld_in = ap_const_logic_0) and (dout_V_last_V_1_ack_out = ap_const_logic_1))) and not(((dout_V_last_V_1_ack_out = ap_const_logic_0) and (dout_V_last_V_1_vld_in = ap_const_logic_1))) and (dout_V_last_V_1_state = ap_const_lv2_3)) or ((dout_V_last_V_1_state = ap_const_lv2_1) and (dout_V_last_V_1_ack_out = ap_const_logic_1)) or ((dout_V_last_V_1_state = ap_const_lv2_2) and (dout_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dout_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    dout_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_V_V_0_load_A = ap_const_logic_1)) then
                ctrl_V_V_0_payload_A <= ctrl_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_V_V_0_load_B = ap_const_logic_1)) then
                ctrl_V_V_0_payload_B <= ctrl_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_data_V_0_load_A = ap_const_logic_1)) then
                din_V_data_V_0_payload_A <= din_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_data_V_0_load_B = ap_const_logic_1)) then
                din_V_data_V_0_payload_B <= din_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_last_V_0_load_A = ap_const_logic_1)) then
                din_V_last_V_0_payload_A <= din_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((din_V_last_V_0_load_B = ap_const_logic_1)) then
                din_V_last_V_0_payload_B <= din_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_data_V_1_load_A = ap_const_logic_1)) then
                dout_V_data_V_1_payload_A <= din_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_data_V_1_load_B = ap_const_logic_1)) then
                dout_V_data_V_1_payload_B <= din_V_data_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_keep_V_1_load_A = ap_const_logic_1)) then
                dout_V_keep_V_1_payload_A <= data_out_keep_V_fu_87_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_keep_V_1_load_B = ap_const_logic_1)) then
                dout_V_keep_V_1_payload_B <= data_out_keep_V_fu_87_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_last_V_1_load_A = ap_const_logic_1)) then
                dout_V_last_V_1_payload_A <= din_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dout_V_last_V_1_load_B = ap_const_logic_1)) then
                dout_V_last_V_1_payload_B <= din_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ctrl_V_V_0_vld_out = ap_const_logic_1))) then
                tmp_V_reg_95 <= ctrl_V_V_0_data_out;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ctrl_V_V_0_vld_out, dout_V_data_V_1_ack_in, dout_V_keep_V_1_ack_in, dout_V_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ctrl_V_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((dout_V_last_V_1_ack_in = ap_const_logic_0) or (dout_V_keep_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(din_V_data_V_0_vld_out, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((din_V_data_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(din_V_data_V_0_vld_out, dout_V_data_V_1_ack_in, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= (((dout_V_data_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((din_V_data_V_0_vld_out = ap_const_logic_0) or (dout_V_data_V_1_ack_in = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(din_V_data_V_0_vld_out, dout_V_data_V_1_ack_in, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= (((dout_V_data_V_1_ack_in = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((din_V_data_V_0_vld_out = ap_const_logic_0) or (dout_V_data_V_1_ack_in = ap_const_logic_0))));
    end process;


    ap_block_state3_pp0_stage0_iter0_assign_proc : process(din_V_data_V_0_vld_out)
    begin
                ap_block_state3_pp0_stage0_iter0 <= (din_V_data_V_0_vld_out = ap_const_logic_0);
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(dout_V_data_V_1_ack_in, dout_V_keep_V_1_ack_in, dout_V_last_V_1_ack_in)
    begin
                ap_block_state5 <= ((dout_V_last_V_1_ack_in = ap_const_logic_0) or (dout_V_keep_V_1_ack_in = ap_const_logic_0) or (dout_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ctrl_V_V_0_ack_in <= ctrl_V_V_0_state(1);

    ctrl_V_V_0_ack_out_assign_proc : process(ctrl_V_V_0_vld_out, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ctrl_V_V_0_vld_out = ap_const_logic_1))) then 
            ctrl_V_V_0_ack_out <= ap_const_logic_1;
        else 
            ctrl_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    ctrl_V_V_0_data_out_assign_proc : process(ctrl_V_V_0_payload_A, ctrl_V_V_0_payload_B, ctrl_V_V_0_sel)
    begin
        if ((ctrl_V_V_0_sel = ap_const_logic_1)) then 
            ctrl_V_V_0_data_out <= ctrl_V_V_0_payload_B;
        else 
            ctrl_V_V_0_data_out <= ctrl_V_V_0_payload_A;
        end if; 
    end process;

    ctrl_V_V_0_load_A <= (not(ctrl_V_V_0_sel_wr) and ctrl_V_V_0_state_cmp_full);
    ctrl_V_V_0_load_B <= (ctrl_V_V_0_state_cmp_full and ctrl_V_V_0_sel_wr);
    ctrl_V_V_0_sel <= ctrl_V_V_0_sel_rd;
    ctrl_V_V_0_state_cmp_full <= '0' when (ctrl_V_V_0_state = ap_const_lv2_1) else '1';
    ctrl_V_V_0_vld_in <= ctrl_V_V_TVALID;
    ctrl_V_V_0_vld_out <= ctrl_V_V_0_state(0);

    ctrl_V_V_TDATA_blk_n_assign_proc : process(ctrl_V_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctrl_V_V_TDATA_blk_n <= ctrl_V_V_0_state(0);
        else 
            ctrl_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl_V_V_TREADY <= ctrl_V_V_0_state(1);
    data_out_keep_V_fu_87_p3 <= 
        tmp_V_reg_95 when (din_V_last_V_0_data_out(0) = '1') else 
        ap_const_lv16_FFFF;

    din_TDATA_blk_n_assign_proc : process(din_V_data_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            din_TDATA_blk_n <= din_V_data_V_0_state(0);
        else 
            din_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    din_TREADY <= din_V_last_V_0_state(1);
    din_V_data_V_0_ack_in <= din_V_data_V_0_state(1);

    din_V_data_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            din_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            din_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    din_V_data_V_0_data_out_assign_proc : process(din_V_data_V_0_payload_A, din_V_data_V_0_payload_B, din_V_data_V_0_sel)
    begin
        if ((din_V_data_V_0_sel = ap_const_logic_1)) then 
            din_V_data_V_0_data_out <= din_V_data_V_0_payload_B;
        else 
            din_V_data_V_0_data_out <= din_V_data_V_0_payload_A;
        end if; 
    end process;

    din_V_data_V_0_load_A <= (not(din_V_data_V_0_sel_wr) and din_V_data_V_0_state_cmp_full);
    din_V_data_V_0_load_B <= (din_V_data_V_0_state_cmp_full and din_V_data_V_0_sel_wr);
    din_V_data_V_0_sel <= din_V_data_V_0_sel_rd;
    din_V_data_V_0_state_cmp_full <= '0' when (din_V_data_V_0_state = ap_const_lv2_1) else '1';
    din_V_data_V_0_vld_in <= din_TVALID;
    din_V_data_V_0_vld_out <= din_V_data_V_0_state(0);
    din_V_last_V_0_ack_in <= din_V_last_V_0_state(1);

    din_V_last_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            din_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            din_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    din_V_last_V_0_data_out_assign_proc : process(din_V_last_V_0_payload_A, din_V_last_V_0_payload_B, din_V_last_V_0_sel)
    begin
        if ((din_V_last_V_0_sel = ap_const_logic_1)) then 
            din_V_last_V_0_data_out <= din_V_last_V_0_payload_B;
        else 
            din_V_last_V_0_data_out <= din_V_last_V_0_payload_A;
        end if; 
    end process;

    din_V_last_V_0_load_A <= (not(din_V_last_V_0_sel_wr) and din_V_last_V_0_state_cmp_full);
    din_V_last_V_0_load_B <= (din_V_last_V_0_state_cmp_full and din_V_last_V_0_sel_wr);
    din_V_last_V_0_sel <= din_V_last_V_0_sel_rd;
    din_V_last_V_0_state_cmp_full <= '0' when (din_V_last_V_0_state = ap_const_lv2_1) else '1';
    din_V_last_V_0_vld_in <= din_TVALID;
    din_V_last_V_0_vld_out <= din_V_last_V_0_state(0);
    dout_TDATA <= dout_V_data_V_1_data_out;

    dout_TDATA_blk_n_assign_proc : process(dout_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dout_TDATA_blk_n <= dout_V_data_V_1_state(1);
        else 
            dout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_TKEEP <= dout_V_keep_V_1_data_out;
    dout_TLAST <= dout_V_last_V_1_data_out;
    dout_TVALID <= dout_V_last_V_1_state(0);
    dout_V_data_V_1_ack_in <= dout_V_data_V_1_state(1);
    dout_V_data_V_1_ack_out <= dout_TREADY;

    dout_V_data_V_1_data_out_assign_proc : process(dout_V_data_V_1_payload_A, dout_V_data_V_1_payload_B, dout_V_data_V_1_sel)
    begin
        if ((dout_V_data_V_1_sel = ap_const_logic_1)) then 
            dout_V_data_V_1_data_out <= dout_V_data_V_1_payload_B;
        else 
            dout_V_data_V_1_data_out <= dout_V_data_V_1_payload_A;
        end if; 
    end process;

    dout_V_data_V_1_load_A <= (not(dout_V_data_V_1_sel_wr) and dout_V_data_V_1_state_cmp_full);
    dout_V_data_V_1_load_B <= (dout_V_data_V_1_state_cmp_full and dout_V_data_V_1_sel_wr);
    dout_V_data_V_1_sel <= dout_V_data_V_1_sel_rd;
    dout_V_data_V_1_state_cmp_full <= '0' when (dout_V_data_V_1_state = ap_const_lv2_1) else '1';

    dout_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_data_V_1_vld_out <= dout_V_data_V_1_state(0);
    dout_V_keep_V_1_ack_in <= dout_V_keep_V_1_state(1);
    dout_V_keep_V_1_ack_out <= dout_TREADY;

    dout_V_keep_V_1_data_out_assign_proc : process(dout_V_keep_V_1_payload_A, dout_V_keep_V_1_payload_B, dout_V_keep_V_1_sel)
    begin
        if ((dout_V_keep_V_1_sel = ap_const_logic_1)) then 
            dout_V_keep_V_1_data_out <= dout_V_keep_V_1_payload_B;
        else 
            dout_V_keep_V_1_data_out <= dout_V_keep_V_1_payload_A;
        end if; 
    end process;

    dout_V_keep_V_1_load_A <= (not(dout_V_keep_V_1_sel_wr) and dout_V_keep_V_1_state_cmp_full);
    dout_V_keep_V_1_load_B <= (dout_V_keep_V_1_state_cmp_full and dout_V_keep_V_1_sel_wr);
    dout_V_keep_V_1_sel <= dout_V_keep_V_1_sel_rd;
    dout_V_keep_V_1_state_cmp_full <= '0' when (dout_V_keep_V_1_state = ap_const_lv2_1) else '1';

    dout_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_keep_V_1_vld_out <= dout_V_keep_V_1_state(0);
    dout_V_last_V_1_ack_in <= dout_V_last_V_1_state(1);
    dout_V_last_V_1_ack_out <= dout_TREADY;

    dout_V_last_V_1_data_out_assign_proc : process(dout_V_last_V_1_payload_A, dout_V_last_V_1_payload_B, dout_V_last_V_1_sel)
    begin
        if ((dout_V_last_V_1_sel = ap_const_logic_1)) then 
            dout_V_last_V_1_data_out <= dout_V_last_V_1_payload_B;
        else 
            dout_V_last_V_1_data_out <= dout_V_last_V_1_payload_A;
        end if; 
    end process;

    dout_V_last_V_1_load_A <= (not(dout_V_last_V_1_sel_wr) and dout_V_last_V_1_state_cmp_full);
    dout_V_last_V_1_load_B <= (dout_V_last_V_1_state_cmp_full and dout_V_last_V_1_sel_wr);
    dout_V_last_V_1_sel <= dout_V_last_V_1_sel_rd;
    dout_V_last_V_1_state_cmp_full <= '0' when (dout_V_last_V_1_state = ap_const_lv2_1) else '1';

    dout_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dout_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dout_V_last_V_1_vld_out <= dout_V_last_V_1_state(0);
    tmp_last_V_fu_82_p1 <= din_V_last_V_0_data_out;
end behav;
