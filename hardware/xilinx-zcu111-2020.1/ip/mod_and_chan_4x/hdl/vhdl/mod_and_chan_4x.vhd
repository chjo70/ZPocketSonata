-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1.0
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mod_and_chan_4x is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ctrl_in_V_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    ctrl_in_V_TVALID : IN STD_LOGIC;
    ctrl_in_V_TREADY : OUT STD_LOGIC;
    ctrl_out_V_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    ctrl_out_V_TVALID : OUT STD_LOGIC;
    ctrl_out_V_TREADY : IN STD_LOGIC;
    hard_data_V_V_TDATA : IN STD_LOGIC_VECTOR (95 downto 0);
    hard_data_V_V_TVALID : IN STD_LOGIC;
    hard_data_V_V_TREADY : OUT STD_LOGIC;
    chan_data_1_V_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    chan_data_1_V_TVALID : OUT STD_LOGIC;
    chan_data_1_V_TREADY : IN STD_LOGIC;
    chan_data_2_V_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    chan_data_2_V_TVALID : OUT STD_LOGIC;
    chan_data_2_V_TREADY : IN STD_LOGIC;
    chan_data_3_V_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    chan_data_3_V_TVALID : OUT STD_LOGIC;
    chan_data_3_V_TREADY : IN STD_LOGIC;
    chan_data_4_V_TDATA : OUT STD_LOGIC_VECTOR (39 downto 0);
    chan_data_4_V_TVALID : OUT STD_LOGIC;
    chan_data_4_V_TREADY : IN STD_LOGIC );
end;


architecture behav of mod_and_chan_4x is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "mod_and_chan_4x,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.189000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=80,HLS_SYN_DSP=64,HLS_SYN_FF=14617,HLS_SYN_LUT=17869}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv17_1CFD5 : STD_LOGIC_VECTOR (16 downto 0) := "11100111111010101";
    constant ap_const_lv16_9FAB : STD_LOGIC_VECTOR (15 downto 0) := "1001111110101011";
    constant ap_const_lv16_CFD5 : STD_LOGIC_VECTOR (15 downto 0) := "1100111111010101";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv7_60 : STD_LOGIC_VECTOR (6 downto 0) := "1100000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ctrl_in_V_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl_in_V_0_vld_in : STD_LOGIC;
    signal ctrl_in_V_0_vld_out : STD_LOGIC;
    signal ctrl_in_V_0_ack_in : STD_LOGIC;
    signal ctrl_in_V_0_ack_out : STD_LOGIC;
    signal ctrl_in_V_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl_in_V_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl_in_V_0_sel_rd : STD_LOGIC := '0';
    signal ctrl_in_V_0_sel_wr : STD_LOGIC := '0';
    signal ctrl_in_V_0_sel : STD_LOGIC;
    signal ctrl_in_V_0_load_A : STD_LOGIC;
    signal ctrl_in_V_0_load_B : STD_LOGIC;
    signal ctrl_in_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ctrl_in_V_0_state_cmp_full : STD_LOGIC;
    signal ctrl_out_V_1_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl_out_V_1_vld_in : STD_LOGIC;
    signal ctrl_out_V_1_vld_out : STD_LOGIC;
    signal ctrl_out_V_1_ack_in : STD_LOGIC;
    signal ctrl_out_V_1_ack_out : STD_LOGIC;
    signal ctrl_out_V_1_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl_out_V_1_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal ctrl_out_V_1_sel_rd : STD_LOGIC := '0';
    signal ctrl_out_V_1_sel_wr : STD_LOGIC := '0';
    signal ctrl_out_V_1_sel : STD_LOGIC;
    signal ctrl_out_V_1_load_A : STD_LOGIC;
    signal ctrl_out_V_1_load_B : STD_LOGIC;
    signal ctrl_out_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ctrl_out_V_1_state_cmp_full : STD_LOGIC;
    signal hard_data_V_V_0_data_out : STD_LOGIC_VECTOR (95 downto 0);
    signal hard_data_V_V_0_vld_in : STD_LOGIC;
    signal hard_data_V_V_0_vld_out : STD_LOGIC;
    signal hard_data_V_V_0_ack_in : STD_LOGIC;
    signal hard_data_V_V_0_ack_out : STD_LOGIC;
    signal hard_data_V_V_0_payload_A : STD_LOGIC_VECTOR (95 downto 0);
    signal hard_data_V_V_0_payload_B : STD_LOGIC_VECTOR (95 downto 0);
    signal hard_data_V_V_0_sel_rd : STD_LOGIC := '0';
    signal hard_data_V_V_0_sel_wr : STD_LOGIC := '0';
    signal hard_data_V_V_0_sel : STD_LOGIC;
    signal hard_data_V_V_0_load_A : STD_LOGIC;
    signal hard_data_V_V_0_load_B : STD_LOGIC;
    signal hard_data_V_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal hard_data_V_V_0_state_cmp_full : STD_LOGIC;
    signal chan_data_1_V_1_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_1_V_1_vld_in : STD_LOGIC;
    signal chan_data_1_V_1_vld_out : STD_LOGIC;
    signal chan_data_1_V_1_ack_in : STD_LOGIC;
    signal chan_data_1_V_1_ack_out : STD_LOGIC;
    signal chan_data_1_V_1_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_1_V_1_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_1_V_1_sel_rd : STD_LOGIC := '0';
    signal chan_data_1_V_1_sel_wr : STD_LOGIC := '0';
    signal chan_data_1_V_1_sel : STD_LOGIC;
    signal chan_data_1_V_1_load_A : STD_LOGIC;
    signal chan_data_1_V_1_load_B : STD_LOGIC;
    signal chan_data_1_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal chan_data_1_V_1_state_cmp_full : STD_LOGIC;
    signal chan_data_2_V_1_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_2_V_1_vld_in : STD_LOGIC;
    signal chan_data_2_V_1_vld_out : STD_LOGIC;
    signal chan_data_2_V_1_ack_in : STD_LOGIC;
    signal chan_data_2_V_1_ack_out : STD_LOGIC;
    signal chan_data_2_V_1_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_2_V_1_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_2_V_1_sel_rd : STD_LOGIC := '0';
    signal chan_data_2_V_1_sel_wr : STD_LOGIC := '0';
    signal chan_data_2_V_1_sel : STD_LOGIC;
    signal chan_data_2_V_1_load_A : STD_LOGIC;
    signal chan_data_2_V_1_load_B : STD_LOGIC;
    signal chan_data_2_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal chan_data_2_V_1_state_cmp_full : STD_LOGIC;
    signal chan_data_3_V_1_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_3_V_1_vld_in : STD_LOGIC;
    signal chan_data_3_V_1_vld_out : STD_LOGIC;
    signal chan_data_3_V_1_ack_in : STD_LOGIC;
    signal chan_data_3_V_1_ack_out : STD_LOGIC;
    signal chan_data_3_V_1_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_3_V_1_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_3_V_1_sel_rd : STD_LOGIC := '0';
    signal chan_data_3_V_1_sel_wr : STD_LOGIC := '0';
    signal chan_data_3_V_1_sel : STD_LOGIC;
    signal chan_data_3_V_1_load_A : STD_LOGIC;
    signal chan_data_3_V_1_load_B : STD_LOGIC;
    signal chan_data_3_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal chan_data_3_V_1_state_cmp_full : STD_LOGIC;
    signal chan_data_4_V_1_data_out : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_4_V_1_vld_in : STD_LOGIC;
    signal chan_data_4_V_1_vld_out : STD_LOGIC;
    signal chan_data_4_V_1_ack_in : STD_LOGIC;
    signal chan_data_4_V_1_ack_out : STD_LOGIC;
    signal chan_data_4_V_1_payload_A : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_4_V_1_payload_B : STD_LOGIC_VECTOR (39 downto 0);
    signal chan_data_4_V_1_sel_rd : STD_LOGIC := '0';
    signal chan_data_4_V_1_sel_wr : STD_LOGIC := '0';
    signal chan_data_4_V_1_sel : STD_LOGIC;
    signal chan_data_4_V_1_load_A : STD_LOGIC;
    signal chan_data_4_V_1_load_B : STD_LOGIC;
    signal chan_data_4_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal chan_data_4_V_1_state_cmp_full : STD_LOGIC;
    signal ctrl_in_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ctrl_out_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal hard_data_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_5_reg_1553 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1557 : STD_LOGIC_VECTOR (0 downto 0);
    signal chan_data_1_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal tmp_5_reg_1553_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal tmp_5_reg_1553_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal chan_data_2_V_TDATA_blk_n : STD_LOGIC;
    signal chan_data_3_V_TDATA_blk_n : STD_LOGIC;
    signal chan_data_4_V_TDATA_blk_n : STD_LOGIC;
    signal p_3_reg_281 : STD_LOGIC_VECTOR (95 downto 0);
    signal symbols_reg_293 : STD_LOGIC_VECTOR (13 downto 0);
    signal ctrl_mod_type_V_reg_1413 : STD_LOGIC_VECTOR (2 downto 0);
    signal ctrl_skip_chan_V_reg_1426 : STD_LOGIC_VECTOR (0 downto 0);
    signal ctrl_block_symbls_V_reg_1438 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_162_cast_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sh_assign_fu_580_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sh_assign_reg_1448 : STD_LOGIC_VECTOR (1 downto 0);
    signal snr_mod_V_fu_588_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal snr_mod_V_reg_1453 : STD_LOGIC_VECTOR (16 downto 0);
    signal signbit_reg_1458 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_reg_1465 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_reg_1470 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_reg_1475 : STD_LOGIC_VECTOR (1 downto 0);
    signal sh_assign_cast_fu_651_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal sh_assign_cast_reg_1481 : STD_LOGIC_VECTOR (17 downto 0);
    signal awgn_snr_V_fu_774_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal awgn_snr_V_reg_1493 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_cast_fu_782_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_cast_reg_1505 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_790_p1 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_6_reg_1511 : STD_LOGIC_VECTOR (95 downto 0);
    signal tmp_17_cast_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_cast_reg_1516 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp_fu_804_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1521 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_1529 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp5_reg_1537 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_reg_1545 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op126_read_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_5_reg_1553_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1553_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_833_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1557_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal symbols_V_1_fu_858_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal symbol_1_V_4_fu_981_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_4_reg_1571_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_fu_1009_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_7_reg_1576_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_fu_1037_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_5_reg_1581_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_fu_1065_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter12_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal p_7_reg_1586_pp0_iter13_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_1072_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal r_V_reg_1591 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal p_Val2_29_reg_1596 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_reg_1601 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_reg_1606 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_6_reg_1611 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_7_reg_1616 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_10_reg_1621 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_11_reg_1626 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_12_reg_1631 : STD_LOGIC_VECTOR (15 downto 0);
    signal cast1_fu_1337_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal cast2_fu_1350_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal cast3_fu_1363_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal cast4_fu_1376_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal grp_awgn_real1_fu_312_ap_start : STD_LOGIC;
    signal grp_awgn_real1_fu_312_ap_done : STD_LOGIC;
    signal grp_awgn_real1_fu_312_ap_idle : STD_LOGIC;
    signal grp_awgn_real1_fu_312_ap_ready : STD_LOGIC;
    signal grp_awgn_real1_fu_312_ap_ce : STD_LOGIC;
    signal grp_awgn_real1_fu_312_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_awgn_imag1_fu_325_ap_start : STD_LOGIC;
    signal grp_awgn_imag1_fu_325_ap_done : STD_LOGIC;
    signal grp_awgn_imag1_fu_325_ap_idle : STD_LOGIC;
    signal grp_awgn_imag1_fu_325_ap_ready : STD_LOGIC;
    signal grp_awgn_imag1_fu_325_ap_ce : STD_LOGIC;
    signal grp_awgn_imag1_fu_325_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_awgn_real2_fu_338_ap_start : STD_LOGIC;
    signal grp_awgn_real2_fu_338_ap_done : STD_LOGIC;
    signal grp_awgn_real2_fu_338_ap_idle : STD_LOGIC;
    signal grp_awgn_real2_fu_338_ap_ready : STD_LOGIC;
    signal grp_awgn_real2_fu_338_ap_ce : STD_LOGIC;
    signal grp_awgn_real2_fu_338_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_awgn_imag2_fu_351_ap_start : STD_LOGIC;
    signal grp_awgn_imag2_fu_351_ap_done : STD_LOGIC;
    signal grp_awgn_imag2_fu_351_ap_idle : STD_LOGIC;
    signal grp_awgn_imag2_fu_351_ap_ready : STD_LOGIC;
    signal grp_awgn_imag2_fu_351_ap_ce : STD_LOGIC;
    signal grp_awgn_imag2_fu_351_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_awgn_real3_fu_364_ap_start : STD_LOGIC;
    signal grp_awgn_real3_fu_364_ap_done : STD_LOGIC;
    signal grp_awgn_real3_fu_364_ap_idle : STD_LOGIC;
    signal grp_awgn_real3_fu_364_ap_ready : STD_LOGIC;
    signal grp_awgn_real3_fu_364_ap_ce : STD_LOGIC;
    signal grp_awgn_real3_fu_364_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_awgn_imag3_fu_377_ap_start : STD_LOGIC;
    signal grp_awgn_imag3_fu_377_ap_done : STD_LOGIC;
    signal grp_awgn_imag3_fu_377_ap_idle : STD_LOGIC;
    signal grp_awgn_imag3_fu_377_ap_ready : STD_LOGIC;
    signal grp_awgn_imag3_fu_377_ap_ce : STD_LOGIC;
    signal grp_awgn_imag3_fu_377_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_awgn_real4_fu_390_ap_start : STD_LOGIC;
    signal grp_awgn_real4_fu_390_ap_done : STD_LOGIC;
    signal grp_awgn_real4_fu_390_ap_idle : STD_LOGIC;
    signal grp_awgn_real4_fu_390_ap_ready : STD_LOGIC;
    signal grp_awgn_real4_fu_390_ap_ce : STD_LOGIC;
    signal grp_awgn_real4_fu_390_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_awgn_imag4_fu_403_ap_start : STD_LOGIC;
    signal grp_awgn_imag4_fu_403_ap_done : STD_LOGIC;
    signal grp_awgn_imag4_fu_403_ap_idle : STD_LOGIC;
    signal grp_awgn_imag4_fu_403_ap_ready : STD_LOGIC;
    signal grp_awgn_imag4_fu_403_ap_ce : STD_LOGIC;
    signal grp_awgn_imag4_fu_403_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_modulate_bits_fu_416_ap_start : STD_LOGIC;
    signal grp_modulate_bits_fu_416_ap_done : STD_LOGIC;
    signal grp_modulate_bits_fu_416_ap_idle : STD_LOGIC;
    signal grp_modulate_bits_fu_416_ap_ready : STD_LOGIC;
    signal grp_modulate_bits_fu_416_ap_ce : STD_LOGIC;
    signal grp_modulate_bits_fu_416_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_416_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_430_ap_start : STD_LOGIC;
    signal grp_modulate_bits_fu_430_ap_done : STD_LOGIC;
    signal grp_modulate_bits_fu_430_ap_idle : STD_LOGIC;
    signal grp_modulate_bits_fu_430_ap_ready : STD_LOGIC;
    signal grp_modulate_bits_fu_430_ap_ce : STD_LOGIC;
    signal grp_modulate_bits_fu_430_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_430_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_444_ap_start : STD_LOGIC;
    signal grp_modulate_bits_fu_444_ap_done : STD_LOGIC;
    signal grp_modulate_bits_fu_444_ap_idle : STD_LOGIC;
    signal grp_modulate_bits_fu_444_ap_ready : STD_LOGIC;
    signal grp_modulate_bits_fu_444_ap_ce : STD_LOGIC;
    signal grp_modulate_bits_fu_444_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_444_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_458_ap_start : STD_LOGIC;
    signal grp_modulate_bits_fu_458_ap_done : STD_LOGIC;
    signal grp_modulate_bits_fu_458_ap_idle : STD_LOGIC;
    signal grp_modulate_bits_fu_458_ap_ready : STD_LOGIC;
    signal grp_modulate_bits_fu_458_ap_ce : STD_LOGIC;
    signal grp_modulate_bits_fu_458_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_modulate_bits_fu_458_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_p_3_phi_fu_285_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_phi_mux_p_Val2_5_phi_fu_305_p4 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_phi_reg_pp0_iter0_p_Val2_5_reg_302 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_phi_reg_pp0_iter1_p_Val2_5_reg_302 : STD_LOGIC_VECTOR (95 downto 0);
    signal ap_phi_reg_pp0_iter2_p_Val2_5_reg_302 : STD_LOGIC_VECTOR (95 downto 0);
    signal grp_awgn_real1_fu_312_ap_start_reg : STD_LOGIC := '0';
    signal grp_awgn_imag1_fu_325_ap_start_reg : STD_LOGIC := '0';
    signal grp_awgn_real2_fu_338_ap_start_reg : STD_LOGIC := '0';
    signal grp_awgn_imag2_fu_351_ap_start_reg : STD_LOGIC := '0';
    signal grp_awgn_real3_fu_364_ap_start_reg : STD_LOGIC := '0';
    signal grp_awgn_imag3_fu_377_ap_start_reg : STD_LOGIC := '0';
    signal grp_awgn_real4_fu_390_ap_start_reg : STD_LOGIC := '0';
    signal grp_awgn_imag4_fu_403_ap_start_reg : STD_LOGIC := '0';
    signal grp_modulate_bits_fu_416_ap_start_reg : STD_LOGIC := '0';
    signal grp_modulate_bits_fu_430_ap_start_reg : STD_LOGIC := '0';
    signal grp_modulate_bits_fu_444_ap_start_reg : STD_LOGIC := '0';
    signal grp_modulate_bits_fu_458_ap_start_reg : STD_LOGIC := '0';
    signal p_6_fu_214 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_6_fu_218 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_1_fu_222 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_fu_226 : STD_LOGIC_VECTOR (5 downto 0);
    signal remaining_bits_fu_230 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal remaining_bits_2_fu_838_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal remaining_bits_1_fu_848_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_27_fu_477_p1 : STD_LOGIC_VECTOR (57 downto 0);
    signal ctrl_snr_V_fu_499_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_7_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_538_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_cast_fu_546_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_560_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_530_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_cast_fu_572_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_2_cast_fu_568_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_3_fu_654_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_4_fu_664_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_25_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_657_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_38_i_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_fu_699_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_not_fu_729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_not_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_39_demorgan_i_not_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_i_i_not_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neg_src_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_fu_758_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_s_fu_766_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_630_p10 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_cast_fu_786_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_794_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal symbol_1_V_5_fu_876_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_1_fu_960_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_2_fu_967_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_1_V_3_fu_974_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_4_V_3_fu_920_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_10_fu_910_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_4_fu_988_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_9_fu_890_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_5_fu_995_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_fu_880_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_2_V_6_fu_1002_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_1_fu_940_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_fu_930_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_2_fu_1016_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_3_fu_1023_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_3_V_4_fu_1030_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_4_V_2_fu_950_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp1_fu_1044_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp2_fu_1051_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal symbol_4_V_fu_900_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal sel_tmp4_fu_1058_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_13_fu_1129_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_real_1_V_fu_1169_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_8_fu_1193_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_14_fu_1134_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_imag_1_V_fu_1172_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_10_fu_1203_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_15_fu_1139_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_real_2_V_fu_1175_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_11_fu_1213_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_16_fu_1144_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_imag_2_V_fu_1178_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_12_fu_1223_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_17_fu_1149_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_real_3_V_fu_1181_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_13_fu_1233_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_18_fu_1154_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_imag_3_V_fu_1184_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_14_fu_1243_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_19_fu_1159_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_real_4_V_fu_1187_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_15_fu_1253_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_20_fu_1164_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal err_sample_imag_4_V_fu_1190_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_16_fu_1263_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_1_V_1_fu_1197_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_imag_1_V_1_fu_1207_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_2_V_1_fu_1217_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_imag_2_V_1_fu_1227_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_3_V_1_fu_1237_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_imag_3_V_1_fu_1247_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_4_V_1_fu_1257_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_imag_4_V_1_fu_1267_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_imag_1_V_3_fu_1280_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_1_V_3_fu_1273_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_276_fu_1329_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal err_sample_imag_2_V_3_fu_1294_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_2_V_3_fu_1287_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_381_fu_1342_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal err_sample_imag_3_V_3_fu_1308_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_3_V_3_fu_1301_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_486_fu_1355_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal err_sample_imag_4_V_3_fu_1322_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal err_sample_real_4_V_3_fu_1315_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_591_fu_1368_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_state22 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_902 : BOOLEAN;

    component awgn_real1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_imag1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_real2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_imag2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_real3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_imag3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_real4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component awgn_imag4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        snr_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component modulate_bits IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        modulation_type : IN STD_LOGIC_VECTOR (2 downto 0);
        symbol_V : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component mod_and_chan_4x_mGfk IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (5 downto 0);
        din4 : IN STD_LOGIC_VECTOR (5 downto 0);
        din5 : IN STD_LOGIC_VECTOR (5 downto 0);
        din6 : IN STD_LOGIC_VECTOR (5 downto 0);
        din7 : IN STD_LOGIC_VECTOR (5 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    grp_awgn_real1_fu_312 : component awgn_real1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_real1_fu_312_ap_start,
        ap_done => grp_awgn_real1_fu_312_ap_done,
        ap_idle => grp_awgn_real1_fu_312_ap_idle,
        ap_ready => grp_awgn_real1_fu_312_ap_ready,
        ap_ce => grp_awgn_real1_fu_312_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_real1_fu_312_ap_return);

    grp_awgn_imag1_fu_325 : component awgn_imag1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_imag1_fu_325_ap_start,
        ap_done => grp_awgn_imag1_fu_325_ap_done,
        ap_idle => grp_awgn_imag1_fu_325_ap_idle,
        ap_ready => grp_awgn_imag1_fu_325_ap_ready,
        ap_ce => grp_awgn_imag1_fu_325_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_imag1_fu_325_ap_return);

    grp_awgn_real2_fu_338 : component awgn_real2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_real2_fu_338_ap_start,
        ap_done => grp_awgn_real2_fu_338_ap_done,
        ap_idle => grp_awgn_real2_fu_338_ap_idle,
        ap_ready => grp_awgn_real2_fu_338_ap_ready,
        ap_ce => grp_awgn_real2_fu_338_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_real2_fu_338_ap_return);

    grp_awgn_imag2_fu_351 : component awgn_imag2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_imag2_fu_351_ap_start,
        ap_done => grp_awgn_imag2_fu_351_ap_done,
        ap_idle => grp_awgn_imag2_fu_351_ap_idle,
        ap_ready => grp_awgn_imag2_fu_351_ap_ready,
        ap_ce => grp_awgn_imag2_fu_351_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_imag2_fu_351_ap_return);

    grp_awgn_real3_fu_364 : component awgn_real3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_real3_fu_364_ap_start,
        ap_done => grp_awgn_real3_fu_364_ap_done,
        ap_idle => grp_awgn_real3_fu_364_ap_idle,
        ap_ready => grp_awgn_real3_fu_364_ap_ready,
        ap_ce => grp_awgn_real3_fu_364_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_real3_fu_364_ap_return);

    grp_awgn_imag3_fu_377 : component awgn_imag3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_imag3_fu_377_ap_start,
        ap_done => grp_awgn_imag3_fu_377_ap_done,
        ap_idle => grp_awgn_imag3_fu_377_ap_idle,
        ap_ready => grp_awgn_imag3_fu_377_ap_ready,
        ap_ce => grp_awgn_imag3_fu_377_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_imag3_fu_377_ap_return);

    grp_awgn_real4_fu_390 : component awgn_real4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_real4_fu_390_ap_start,
        ap_done => grp_awgn_real4_fu_390_ap_done,
        ap_idle => grp_awgn_real4_fu_390_ap_idle,
        ap_ready => grp_awgn_real4_fu_390_ap_ready,
        ap_ce => grp_awgn_real4_fu_390_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_real4_fu_390_ap_return);

    grp_awgn_imag4_fu_403 : component awgn_imag4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_awgn_imag4_fu_403_ap_start,
        ap_done => grp_awgn_imag4_fu_403_ap_done,
        ap_idle => grp_awgn_imag4_fu_403_ap_idle,
        ap_ready => grp_awgn_imag4_fu_403_ap_ready,
        ap_ce => grp_awgn_imag4_fu_403_ap_ce,
        snr_V => awgn_snr_V_reg_1493,
        ap_return => grp_awgn_imag4_fu_403_ap_return);

    grp_modulate_bits_fu_416 : component modulate_bits
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_modulate_bits_fu_416_ap_start,
        ap_done => grp_modulate_bits_fu_416_ap_done,
        ap_idle => grp_modulate_bits_fu_416_ap_idle,
        ap_ready => grp_modulate_bits_fu_416_ap_ready,
        ap_ce => grp_modulate_bits_fu_416_ap_ce,
        modulation_type => ctrl_mod_type_V_reg_1413,
        symbol_V => symbol_1_V_4_reg_1571_pp0_iter13_reg,
        ap_return_0 => grp_modulate_bits_fu_416_ap_return_0,
        ap_return_1 => grp_modulate_bits_fu_416_ap_return_1);

    grp_modulate_bits_fu_430 : component modulate_bits
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_modulate_bits_fu_430_ap_start,
        ap_done => grp_modulate_bits_fu_430_ap_done,
        ap_idle => grp_modulate_bits_fu_430_ap_idle,
        ap_ready => grp_modulate_bits_fu_430_ap_ready,
        ap_ce => grp_modulate_bits_fu_430_ap_ce,
        modulation_type => ctrl_mod_type_V_reg_1413,
        symbol_V => symbol_2_V_7_reg_1576_pp0_iter13_reg,
        ap_return_0 => grp_modulate_bits_fu_430_ap_return_0,
        ap_return_1 => grp_modulate_bits_fu_430_ap_return_1);

    grp_modulate_bits_fu_444 : component modulate_bits
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_modulate_bits_fu_444_ap_start,
        ap_done => grp_modulate_bits_fu_444_ap_done,
        ap_idle => grp_modulate_bits_fu_444_ap_idle,
        ap_ready => grp_modulate_bits_fu_444_ap_ready,
        ap_ce => grp_modulate_bits_fu_444_ap_ce,
        modulation_type => ctrl_mod_type_V_reg_1413,
        symbol_V => symbol_3_V_5_reg_1581_pp0_iter13_reg,
        ap_return_0 => grp_modulate_bits_fu_444_ap_return_0,
        ap_return_1 => grp_modulate_bits_fu_444_ap_return_1);

    grp_modulate_bits_fu_458 : component modulate_bits
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_modulate_bits_fu_458_ap_start,
        ap_done => grp_modulate_bits_fu_458_ap_done,
        ap_idle => grp_modulate_bits_fu_458_ap_idle,
        ap_ready => grp_modulate_bits_fu_458_ap_ready,
        ap_ce => grp_modulate_bits_fu_458_ap_ce,
        modulation_type => ctrl_mod_type_V_reg_1413,
        symbol_V => p_7_reg_1586_pp0_iter13_reg,
        ap_return_0 => grp_modulate_bits_fu_458_ap_return_0,
        ap_return_1 => grp_modulate_bits_fu_458_ap_return_1);

    mod_and_chan_4x_mGfk_U64 : component mod_and_chan_4x_mGfk
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 6,
        din4_WIDTH => 6,
        din5_WIDTH => 6,
        din6_WIDTH => 6,
        din7_WIDTH => 6,
        din8_WIDTH => 3,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_4,
        din1 => ap_const_lv6_8,
        din2 => ap_const_lv6_C,
        din3 => ap_const_lv6_18,
        din4 => ap_const_lv6_0,
        din5 => ap_const_lv6_0,
        din6 => ap_const_lv6_0,
        din7 => ap_const_lv6_0,
        din8 => ctrl_mod_type_V_reg_1413,
        dout => p_2_fu_630_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ctrl_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                elsif (((ctrl_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    chan_data_1_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_1_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((chan_data_1_V_1_ack_out = ap_const_logic_1) and (chan_data_1_V_1_vld_out = ap_const_logic_1))) then 
                                        chan_data_1_V_1_sel_rd <= not(chan_data_1_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    chan_data_1_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_1_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((chan_data_1_V_1_ack_in = ap_const_logic_1) and (chan_data_1_V_1_vld_in = ap_const_logic_1))) then 
                                        chan_data_1_V_1_sel_wr <= not(chan_data_1_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    chan_data_1_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_1_V_1_state <= ap_const_lv2_0;
            else
                if ((((chan_data_1_V_1_state = ap_const_lv2_2) and (chan_data_1_V_1_vld_in = ap_const_logic_0)) or ((chan_data_1_V_1_state = ap_const_lv2_3) and (chan_data_1_V_1_vld_in = ap_const_logic_0) and (chan_data_1_V_1_ack_out = ap_const_logic_1)))) then 
                    chan_data_1_V_1_state <= ap_const_lv2_2;
                elsif ((((chan_data_1_V_1_state = ap_const_lv2_1) and (chan_data_1_V_1_ack_out = ap_const_logic_0)) or ((chan_data_1_V_1_state = ap_const_lv2_3) and (chan_data_1_V_1_ack_out = ap_const_logic_0) and (chan_data_1_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_1_V_1_state <= ap_const_lv2_1;
                elsif (((not(((chan_data_1_V_1_vld_in = ap_const_logic_0) and (chan_data_1_V_1_ack_out = ap_const_logic_1))) and not(((chan_data_1_V_1_ack_out = ap_const_logic_0) and (chan_data_1_V_1_vld_in = ap_const_logic_1))) and (chan_data_1_V_1_state = ap_const_lv2_3)) or ((chan_data_1_V_1_state = ap_const_lv2_1) and (chan_data_1_V_1_ack_out = ap_const_logic_1)) or ((chan_data_1_V_1_state = ap_const_lv2_2) and (chan_data_1_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_1_V_1_state <= ap_const_lv2_3;
                else 
                    chan_data_1_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    chan_data_2_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_2_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((chan_data_2_V_1_ack_out = ap_const_logic_1) and (chan_data_2_V_1_vld_out = ap_const_logic_1))) then 
                                        chan_data_2_V_1_sel_rd <= not(chan_data_2_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    chan_data_2_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_2_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((chan_data_2_V_1_ack_in = ap_const_logic_1) and (chan_data_2_V_1_vld_in = ap_const_logic_1))) then 
                                        chan_data_2_V_1_sel_wr <= not(chan_data_2_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    chan_data_2_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_2_V_1_state <= ap_const_lv2_0;
            else
                if ((((chan_data_2_V_1_state = ap_const_lv2_2) and (chan_data_2_V_1_vld_in = ap_const_logic_0)) or ((chan_data_2_V_1_state = ap_const_lv2_3) and (chan_data_2_V_1_vld_in = ap_const_logic_0) and (chan_data_2_V_1_ack_out = ap_const_logic_1)))) then 
                    chan_data_2_V_1_state <= ap_const_lv2_2;
                elsif ((((chan_data_2_V_1_state = ap_const_lv2_1) and (chan_data_2_V_1_ack_out = ap_const_logic_0)) or ((chan_data_2_V_1_state = ap_const_lv2_3) and (chan_data_2_V_1_ack_out = ap_const_logic_0) and (chan_data_2_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_2_V_1_state <= ap_const_lv2_1;
                elsif (((not(((chan_data_2_V_1_vld_in = ap_const_logic_0) and (chan_data_2_V_1_ack_out = ap_const_logic_1))) and not(((chan_data_2_V_1_ack_out = ap_const_logic_0) and (chan_data_2_V_1_vld_in = ap_const_logic_1))) and (chan_data_2_V_1_state = ap_const_lv2_3)) or ((chan_data_2_V_1_state = ap_const_lv2_1) and (chan_data_2_V_1_ack_out = ap_const_logic_1)) or ((chan_data_2_V_1_state = ap_const_lv2_2) and (chan_data_2_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_2_V_1_state <= ap_const_lv2_3;
                else 
                    chan_data_2_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    chan_data_3_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_3_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((chan_data_3_V_1_ack_out = ap_const_logic_1) and (chan_data_3_V_1_vld_out = ap_const_logic_1))) then 
                                        chan_data_3_V_1_sel_rd <= not(chan_data_3_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    chan_data_3_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_3_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((chan_data_3_V_1_ack_in = ap_const_logic_1) and (chan_data_3_V_1_vld_in = ap_const_logic_1))) then 
                                        chan_data_3_V_1_sel_wr <= not(chan_data_3_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    chan_data_3_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_3_V_1_state <= ap_const_lv2_0;
            else
                if ((((chan_data_3_V_1_state = ap_const_lv2_2) and (chan_data_3_V_1_vld_in = ap_const_logic_0)) or ((chan_data_3_V_1_state = ap_const_lv2_3) and (chan_data_3_V_1_vld_in = ap_const_logic_0) and (chan_data_3_V_1_ack_out = ap_const_logic_1)))) then 
                    chan_data_3_V_1_state <= ap_const_lv2_2;
                elsif ((((chan_data_3_V_1_state = ap_const_lv2_1) and (chan_data_3_V_1_ack_out = ap_const_logic_0)) or ((chan_data_3_V_1_state = ap_const_lv2_3) and (chan_data_3_V_1_ack_out = ap_const_logic_0) and (chan_data_3_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_3_V_1_state <= ap_const_lv2_1;
                elsif (((not(((chan_data_3_V_1_vld_in = ap_const_logic_0) and (chan_data_3_V_1_ack_out = ap_const_logic_1))) and not(((chan_data_3_V_1_ack_out = ap_const_logic_0) and (chan_data_3_V_1_vld_in = ap_const_logic_1))) and (chan_data_3_V_1_state = ap_const_lv2_3)) or ((chan_data_3_V_1_state = ap_const_lv2_1) and (chan_data_3_V_1_ack_out = ap_const_logic_1)) or ((chan_data_3_V_1_state = ap_const_lv2_2) and (chan_data_3_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_3_V_1_state <= ap_const_lv2_3;
                else 
                    chan_data_3_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    chan_data_4_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_4_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((chan_data_4_V_1_ack_out = ap_const_logic_1) and (chan_data_4_V_1_vld_out = ap_const_logic_1))) then 
                                        chan_data_4_V_1_sel_rd <= not(chan_data_4_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    chan_data_4_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_4_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((chan_data_4_V_1_ack_in = ap_const_logic_1) and (chan_data_4_V_1_vld_in = ap_const_logic_1))) then 
                                        chan_data_4_V_1_sel_wr <= not(chan_data_4_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    chan_data_4_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                chan_data_4_V_1_state <= ap_const_lv2_0;
            else
                if ((((chan_data_4_V_1_state = ap_const_lv2_2) and (chan_data_4_V_1_vld_in = ap_const_logic_0)) or ((chan_data_4_V_1_state = ap_const_lv2_3) and (chan_data_4_V_1_vld_in = ap_const_logic_0) and (chan_data_4_V_1_ack_out = ap_const_logic_1)))) then 
                    chan_data_4_V_1_state <= ap_const_lv2_2;
                elsif ((((chan_data_4_V_1_state = ap_const_lv2_1) and (chan_data_4_V_1_ack_out = ap_const_logic_0)) or ((chan_data_4_V_1_state = ap_const_lv2_3) and (chan_data_4_V_1_ack_out = ap_const_logic_0) and (chan_data_4_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_4_V_1_state <= ap_const_lv2_1;
                elsif (((not(((chan_data_4_V_1_vld_in = ap_const_logic_0) and (chan_data_4_V_1_ack_out = ap_const_logic_1))) and not(((chan_data_4_V_1_ack_out = ap_const_logic_0) and (chan_data_4_V_1_vld_in = ap_const_logic_1))) and (chan_data_4_V_1_state = ap_const_lv2_3)) or ((chan_data_4_V_1_state = ap_const_lv2_1) and (chan_data_4_V_1_ack_out = ap_const_logic_1)) or ((chan_data_4_V_1_state = ap_const_lv2_2) and (chan_data_4_V_1_vld_in = ap_const_logic_1)))) then 
                    chan_data_4_V_1_state <= ap_const_lv2_3;
                else 
                    chan_data_4_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ctrl_in_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_in_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((ctrl_in_V_0_ack_out = ap_const_logic_1) and (ctrl_in_V_0_vld_out = ap_const_logic_1))) then 
                                        ctrl_in_V_0_sel_rd <= not(ctrl_in_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ctrl_in_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_in_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((ctrl_in_V_0_ack_in = ap_const_logic_1) and (ctrl_in_V_0_vld_in = ap_const_logic_1))) then 
                                        ctrl_in_V_0_sel_wr <= not(ctrl_in_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ctrl_in_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_in_V_0_state <= ap_const_lv2_0;
            else
                if ((((ctrl_in_V_0_state = ap_const_lv2_2) and (ctrl_in_V_0_vld_in = ap_const_logic_0)) or ((ctrl_in_V_0_state = ap_const_lv2_3) and (ctrl_in_V_0_vld_in = ap_const_logic_0) and (ctrl_in_V_0_ack_out = ap_const_logic_1)))) then 
                    ctrl_in_V_0_state <= ap_const_lv2_2;
                elsif ((((ctrl_in_V_0_state = ap_const_lv2_1) and (ctrl_in_V_0_ack_out = ap_const_logic_0)) or ((ctrl_in_V_0_state = ap_const_lv2_3) and (ctrl_in_V_0_ack_out = ap_const_logic_0) and (ctrl_in_V_0_vld_in = ap_const_logic_1)))) then 
                    ctrl_in_V_0_state <= ap_const_lv2_1;
                elsif (((not(((ctrl_in_V_0_vld_in = ap_const_logic_0) and (ctrl_in_V_0_ack_out = ap_const_logic_1))) and not(((ctrl_in_V_0_ack_out = ap_const_logic_0) and (ctrl_in_V_0_vld_in = ap_const_logic_1))) and (ctrl_in_V_0_state = ap_const_lv2_3)) or ((ctrl_in_V_0_state = ap_const_lv2_1) and (ctrl_in_V_0_ack_out = ap_const_logic_1)) or ((ctrl_in_V_0_state = ap_const_lv2_2) and (ctrl_in_V_0_vld_in = ap_const_logic_1)))) then 
                    ctrl_in_V_0_state <= ap_const_lv2_3;
                else 
                    ctrl_in_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ctrl_out_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_out_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((ctrl_out_V_1_ack_out = ap_const_logic_1) and (ctrl_out_V_1_vld_out = ap_const_logic_1))) then 
                                        ctrl_out_V_1_sel_rd <= not(ctrl_out_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    ctrl_out_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_out_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((ctrl_out_V_1_ack_in = ap_const_logic_1) and (ctrl_out_V_1_vld_in = ap_const_logic_1))) then 
                                        ctrl_out_V_1_sel_wr <= not(ctrl_out_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    ctrl_out_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ctrl_out_V_1_state <= ap_const_lv2_0;
            else
                if ((((ctrl_out_V_1_state = ap_const_lv2_2) and (ctrl_out_V_1_vld_in = ap_const_logic_0)) or ((ctrl_out_V_1_state = ap_const_lv2_3) and (ctrl_out_V_1_vld_in = ap_const_logic_0) and (ctrl_out_V_1_ack_out = ap_const_logic_1)))) then 
                    ctrl_out_V_1_state <= ap_const_lv2_2;
                elsif ((((ctrl_out_V_1_state = ap_const_lv2_1) and (ctrl_out_V_1_ack_out = ap_const_logic_0)) or ((ctrl_out_V_1_state = ap_const_lv2_3) and (ctrl_out_V_1_ack_out = ap_const_logic_0) and (ctrl_out_V_1_vld_in = ap_const_logic_1)))) then 
                    ctrl_out_V_1_state <= ap_const_lv2_1;
                elsif (((not(((ctrl_out_V_1_vld_in = ap_const_logic_0) and (ctrl_out_V_1_ack_out = ap_const_logic_1))) and not(((ctrl_out_V_1_ack_out = ap_const_logic_0) and (ctrl_out_V_1_vld_in = ap_const_logic_1))) and (ctrl_out_V_1_state = ap_const_lv2_3)) or ((ctrl_out_V_1_state = ap_const_lv2_1) and (ctrl_out_V_1_ack_out = ap_const_logic_1)) or ((ctrl_out_V_1_state = ap_const_lv2_2) and (ctrl_out_V_1_vld_in = ap_const_logic_1)))) then 
                    ctrl_out_V_1_state <= ap_const_lv2_3;
                else 
                    ctrl_out_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_imag1_fu_325_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_imag1_fu_325_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_imag1_fu_325_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_imag1_fu_325_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_imag1_fu_325_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_imag2_fu_351_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_imag2_fu_351_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_imag2_fu_351_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_imag2_fu_351_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_imag2_fu_351_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_imag3_fu_377_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_imag3_fu_377_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_imag3_fu_377_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_imag3_fu_377_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_imag3_fu_377_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_imag4_fu_403_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_imag4_fu_403_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_imag4_fu_403_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_imag4_fu_403_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_imag4_fu_403_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_real1_fu_312_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_real1_fu_312_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_real1_fu_312_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_real1_fu_312_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_real1_fu_312_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_real2_fu_338_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_real2_fu_338_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_real2_fu_338_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_real2_fu_338_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_real2_fu_338_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_real3_fu_364_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_real3_fu_364_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_real3_fu_364_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_real3_fu_364_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_real3_fu_364_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_awgn_real4_fu_390_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_awgn_real4_fu_390_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_awgn_real4_fu_390_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_awgn_real4_fu_390_ap_ready = ap_const_logic_1)) then 
                    grp_awgn_real4_fu_390_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_modulate_bits_fu_416_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_modulate_bits_fu_416_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    grp_modulate_bits_fu_416_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_modulate_bits_fu_416_ap_ready = ap_const_logic_1)) then 
                    grp_modulate_bits_fu_416_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_modulate_bits_fu_430_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_modulate_bits_fu_430_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    grp_modulate_bits_fu_430_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_modulate_bits_fu_430_ap_ready = ap_const_logic_1)) then 
                    grp_modulate_bits_fu_430_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_modulate_bits_fu_444_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_modulate_bits_fu_444_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    grp_modulate_bits_fu_444_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_modulate_bits_fu_444_ap_ready = ap_const_logic_1)) then 
                    grp_modulate_bits_fu_444_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_modulate_bits_fu_458_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_modulate_bits_fu_458_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    grp_modulate_bits_fu_458_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_modulate_bits_fu_458_ap_ready = ap_const_logic_1)) then 
                    grp_modulate_bits_fu_458_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    hard_data_V_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_V_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((hard_data_V_V_0_ack_out = ap_const_logic_1) and (hard_data_V_V_0_vld_out = ap_const_logic_1))) then 
                                        hard_data_V_V_0_sel_rd <= not(hard_data_V_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    hard_data_V_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_V_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((hard_data_V_V_0_ack_in = ap_const_logic_1) and (hard_data_V_V_0_vld_in = ap_const_logic_1))) then 
                                        hard_data_V_V_0_sel_wr <= not(hard_data_V_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    hard_data_V_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                hard_data_V_V_0_state <= ap_const_lv2_0;
            else
                if ((((hard_data_V_V_0_state = ap_const_lv2_2) and (hard_data_V_V_0_vld_in = ap_const_logic_0)) or ((hard_data_V_V_0_state = ap_const_lv2_3) and (hard_data_V_V_0_vld_in = ap_const_logic_0) and (hard_data_V_V_0_ack_out = ap_const_logic_1)))) then 
                    hard_data_V_V_0_state <= ap_const_lv2_2;
                elsif ((((hard_data_V_V_0_state = ap_const_lv2_1) and (hard_data_V_V_0_ack_out = ap_const_logic_0)) or ((hard_data_V_V_0_state = ap_const_lv2_3) and (hard_data_V_V_0_ack_out = ap_const_logic_0) and (hard_data_V_V_0_vld_in = ap_const_logic_1)))) then 
                    hard_data_V_V_0_state <= ap_const_lv2_1;
                elsif (((not(((hard_data_V_V_0_vld_in = ap_const_logic_0) and (hard_data_V_V_0_ack_out = ap_const_logic_1))) and not(((hard_data_V_V_0_ack_out = ap_const_logic_0) and (hard_data_V_V_0_vld_in = ap_const_logic_1))) and (hard_data_V_V_0_state = ap_const_lv2_3)) or ((hard_data_V_V_0_state = ap_const_lv2_1) and (hard_data_V_V_0_ack_out = ap_const_logic_1)) or ((hard_data_V_V_0_state = ap_const_lv2_2) and (hard_data_V_V_0_vld_in = ap_const_logic_1)))) then 
                    hard_data_V_V_0_state <= ap_const_lv2_3;
                else 
                    hard_data_V_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter2_p_Val2_5_reg_302_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_902)) then
                if (((tmp_4_reg_1557 = ap_const_lv1_1) and (tmp_5_reg_1553 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter2_p_Val2_5_reg_302 <= hard_data_V_V_0_data_out;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter2_p_Val2_5_reg_302 <= ap_phi_reg_pp0_iter1_p_Val2_5_reg_302;
                end if;
            end if; 
        end if;
    end process;

    remaining_bits_fu_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_4_fu_833_p2 = ap_const_lv1_1) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                remaining_bits_fu_230 <= remaining_bits_1_fu_848_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_4_fu_833_p2 = ap_const_lv1_0) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                remaining_bits_fu_230 <= remaining_bits_2_fu_838_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                remaining_bits_fu_230 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    symbols_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                symbols_reg_293 <= symbols_V_1_fu_858_p2;
            elsif (((ctrl_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                symbols_reg_293 <= ctrl_block_symbls_V_reg_1438;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter1_p_Val2_5_reg_302 <= ap_phi_reg_pp0_iter0_p_Val2_5_reg_302;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ctrl_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                awgn_snr_V_reg_1493 <= awgn_snr_V_fu_774_p3;
                sel_tmp3_reg_1529 <= sel_tmp3_fu_809_p2;
                sel_tmp5_reg_1537 <= sel_tmp5_fu_814_p2;
                sel_tmp7_reg_1545 <= sel_tmp7_fu_819_p2;
                sel_tmp_reg_1521 <= sel_tmp_fu_804_p2;
                    sh_assign_cast_reg_1481(1 downto 0) <= sh_assign_cast_fu_651_p1(1 downto 0);
                    tmp_10_cast_reg_1505(5 downto 0) <= tmp_10_cast_fu_782_p1(5 downto 0);
                    tmp_17_cast_reg_1516(6 downto 0) <= tmp_17_cast_fu_800_p1(6 downto 0);
                    tmp_6_reg_1511(5 downto 0) <= tmp_6_fu_790_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_1_V_1_load_A = ap_const_logic_1)) then
                chan_data_1_V_1_payload_A <= cast1_fu_1337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_1_V_1_load_B = ap_const_logic_1)) then
                chan_data_1_V_1_payload_B <= cast1_fu_1337_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_2_V_1_load_A = ap_const_logic_1)) then
                chan_data_2_V_1_payload_A <= cast2_fu_1350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_2_V_1_load_B = ap_const_logic_1)) then
                chan_data_2_V_1_payload_B <= cast2_fu_1350_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_3_V_1_load_A = ap_const_logic_1)) then
                chan_data_3_V_1_payload_A <= cast3_fu_1363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_3_V_1_load_B = ap_const_logic_1)) then
                chan_data_3_V_1_payload_B <= cast3_fu_1363_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_4_V_1_load_A = ap_const_logic_1)) then
                chan_data_4_V_1_payload_A <= cast4_fu_1376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((chan_data_4_V_1_load_B = ap_const_logic_1)) then
                chan_data_4_V_1_payload_B <= cast4_fu_1376_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ctrl_out_V_1_ack_in = ap_const_logic_0) or (ctrl_in_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ctrl_block_symbls_V_reg_1438 <= ctrl_in_V_0_data_out(52 downto 39);
                ctrl_mod_type_V_reg_1413 <= ctrl_in_V_0_data_out(3 downto 1);
                ctrl_skip_chan_V_reg_1426 <= ctrl_in_V_0_data_out(4 downto 4);
                p_Result_s_reg_1475 <= snr_mod_V_fu_588_p2(16 downto 15);
                p_Val2_3_reg_1465 <= snr_mod_V_fu_588_p2(14 downto 7);
                sh_assign_reg_1448 <= sh_assign_fu_580_p3;
                signbit_reg_1458 <= snr_mod_V_fu_588_p2(16 downto 16);
                snr_mod_V_reg_1453 <= snr_mod_V_fu_588_p2;
                tmp_23_reg_1470 <= snr_mod_V_fu_588_p2(6 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_in_V_0_load_A = ap_const_logic_1)) then
                ctrl_in_V_0_payload_A <= ctrl_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_in_V_0_load_B = ap_const_logic_1)) then
                ctrl_in_V_0_payload_B <= ctrl_in_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_out_V_1_load_A = ap_const_logic_1)) then
                ctrl_out_V_1_payload_A <= tmp_162_cast_fu_519_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ctrl_out_V_1_load_B = ap_const_logic_1)) then
                ctrl_out_V_1_payload_B <= tmp_162_cast_fu_519_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_V_V_0_load_A = ap_const_logic_1)) then
                hard_data_V_V_0_payload_A <= hard_data_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((hard_data_V_V_0_load_B = ap_const_logic_1)) then
                hard_data_V_V_0_payload_B <= hard_data_V_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                p_3_reg_281 <= r_V_reg_1591;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                p_6_fu_214 <= p_7_fu_1065_p3;
                r_V_reg_1591 <= r_V_fu_1072_p2;
                symbol_1_V_fu_226 <= symbol_1_V_4_fu_981_p3;
                symbol_2_V_1_fu_222 <= symbol_2_V_7_fu_1009_p3;
                symbol_3_V_6_fu_218 <= symbol_3_V_5_fu_1037_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0))) then
                p_7_reg_1586 <= p_7_fu_1065_p3;
                symbol_1_V_4_reg_1571 <= symbol_1_V_4_fu_981_p3;
                symbol_2_V_7_reg_1576 <= symbol_2_V_7_fu_1009_p3;
                symbol_3_V_5_reg_1581 <= symbol_3_V_5_fu_1037_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                p_7_reg_1586_pp0_iter10_reg <= p_7_reg_1586_pp0_iter9_reg;
                p_7_reg_1586_pp0_iter11_reg <= p_7_reg_1586_pp0_iter10_reg;
                p_7_reg_1586_pp0_iter12_reg <= p_7_reg_1586_pp0_iter11_reg;
                p_7_reg_1586_pp0_iter13_reg <= p_7_reg_1586_pp0_iter12_reg;
                p_7_reg_1586_pp0_iter3_reg <= p_7_reg_1586;
                p_7_reg_1586_pp0_iter4_reg <= p_7_reg_1586_pp0_iter3_reg;
                p_7_reg_1586_pp0_iter5_reg <= p_7_reg_1586_pp0_iter4_reg;
                p_7_reg_1586_pp0_iter6_reg <= p_7_reg_1586_pp0_iter5_reg;
                p_7_reg_1586_pp0_iter7_reg <= p_7_reg_1586_pp0_iter6_reg;
                p_7_reg_1586_pp0_iter8_reg <= p_7_reg_1586_pp0_iter7_reg;
                p_7_reg_1586_pp0_iter9_reg <= p_7_reg_1586_pp0_iter8_reg;
                symbol_1_V_4_reg_1571_pp0_iter10_reg <= symbol_1_V_4_reg_1571_pp0_iter9_reg;
                symbol_1_V_4_reg_1571_pp0_iter11_reg <= symbol_1_V_4_reg_1571_pp0_iter10_reg;
                symbol_1_V_4_reg_1571_pp0_iter12_reg <= symbol_1_V_4_reg_1571_pp0_iter11_reg;
                symbol_1_V_4_reg_1571_pp0_iter13_reg <= symbol_1_V_4_reg_1571_pp0_iter12_reg;
                symbol_1_V_4_reg_1571_pp0_iter3_reg <= symbol_1_V_4_reg_1571;
                symbol_1_V_4_reg_1571_pp0_iter4_reg <= symbol_1_V_4_reg_1571_pp0_iter3_reg;
                symbol_1_V_4_reg_1571_pp0_iter5_reg <= symbol_1_V_4_reg_1571_pp0_iter4_reg;
                symbol_1_V_4_reg_1571_pp0_iter6_reg <= symbol_1_V_4_reg_1571_pp0_iter5_reg;
                symbol_1_V_4_reg_1571_pp0_iter7_reg <= symbol_1_V_4_reg_1571_pp0_iter6_reg;
                symbol_1_V_4_reg_1571_pp0_iter8_reg <= symbol_1_V_4_reg_1571_pp0_iter7_reg;
                symbol_1_V_4_reg_1571_pp0_iter9_reg <= symbol_1_V_4_reg_1571_pp0_iter8_reg;
                symbol_2_V_7_reg_1576_pp0_iter10_reg <= symbol_2_V_7_reg_1576_pp0_iter9_reg;
                symbol_2_V_7_reg_1576_pp0_iter11_reg <= symbol_2_V_7_reg_1576_pp0_iter10_reg;
                symbol_2_V_7_reg_1576_pp0_iter12_reg <= symbol_2_V_7_reg_1576_pp0_iter11_reg;
                symbol_2_V_7_reg_1576_pp0_iter13_reg <= symbol_2_V_7_reg_1576_pp0_iter12_reg;
                symbol_2_V_7_reg_1576_pp0_iter3_reg <= symbol_2_V_7_reg_1576;
                symbol_2_V_7_reg_1576_pp0_iter4_reg <= symbol_2_V_7_reg_1576_pp0_iter3_reg;
                symbol_2_V_7_reg_1576_pp0_iter5_reg <= symbol_2_V_7_reg_1576_pp0_iter4_reg;
                symbol_2_V_7_reg_1576_pp0_iter6_reg <= symbol_2_V_7_reg_1576_pp0_iter5_reg;
                symbol_2_V_7_reg_1576_pp0_iter7_reg <= symbol_2_V_7_reg_1576_pp0_iter6_reg;
                symbol_2_V_7_reg_1576_pp0_iter8_reg <= symbol_2_V_7_reg_1576_pp0_iter7_reg;
                symbol_2_V_7_reg_1576_pp0_iter9_reg <= symbol_2_V_7_reg_1576_pp0_iter8_reg;
                symbol_3_V_5_reg_1581_pp0_iter10_reg <= symbol_3_V_5_reg_1581_pp0_iter9_reg;
                symbol_3_V_5_reg_1581_pp0_iter11_reg <= symbol_3_V_5_reg_1581_pp0_iter10_reg;
                symbol_3_V_5_reg_1581_pp0_iter12_reg <= symbol_3_V_5_reg_1581_pp0_iter11_reg;
                symbol_3_V_5_reg_1581_pp0_iter13_reg <= symbol_3_V_5_reg_1581_pp0_iter12_reg;
                symbol_3_V_5_reg_1581_pp0_iter3_reg <= symbol_3_V_5_reg_1581;
                symbol_3_V_5_reg_1581_pp0_iter4_reg <= symbol_3_V_5_reg_1581_pp0_iter3_reg;
                symbol_3_V_5_reg_1581_pp0_iter5_reg <= symbol_3_V_5_reg_1581_pp0_iter4_reg;
                symbol_3_V_5_reg_1581_pp0_iter6_reg <= symbol_3_V_5_reg_1581_pp0_iter5_reg;
                symbol_3_V_5_reg_1581_pp0_iter7_reg <= symbol_3_V_5_reg_1581_pp0_iter6_reg;
                symbol_3_V_5_reg_1581_pp0_iter8_reg <= symbol_3_V_5_reg_1581_pp0_iter7_reg;
                symbol_3_V_5_reg_1581_pp0_iter9_reg <= symbol_3_V_5_reg_1581_pp0_iter8_reg;
                tmp_5_reg_1553_pp0_iter10_reg <= tmp_5_reg_1553_pp0_iter9_reg;
                tmp_5_reg_1553_pp0_iter11_reg <= tmp_5_reg_1553_pp0_iter10_reg;
                tmp_5_reg_1553_pp0_iter12_reg <= tmp_5_reg_1553_pp0_iter11_reg;
                tmp_5_reg_1553_pp0_iter13_reg <= tmp_5_reg_1553_pp0_iter12_reg;
                tmp_5_reg_1553_pp0_iter14_reg <= tmp_5_reg_1553_pp0_iter13_reg;
                tmp_5_reg_1553_pp0_iter15_reg <= tmp_5_reg_1553_pp0_iter14_reg;
                tmp_5_reg_1553_pp0_iter16_reg <= tmp_5_reg_1553_pp0_iter15_reg;
                tmp_5_reg_1553_pp0_iter2_reg <= tmp_5_reg_1553_pp0_iter1_reg;
                tmp_5_reg_1553_pp0_iter3_reg <= tmp_5_reg_1553_pp0_iter2_reg;
                tmp_5_reg_1553_pp0_iter4_reg <= tmp_5_reg_1553_pp0_iter3_reg;
                tmp_5_reg_1553_pp0_iter5_reg <= tmp_5_reg_1553_pp0_iter4_reg;
                tmp_5_reg_1553_pp0_iter6_reg <= tmp_5_reg_1553_pp0_iter5_reg;
                tmp_5_reg_1553_pp0_iter7_reg <= tmp_5_reg_1553_pp0_iter6_reg;
                tmp_5_reg_1553_pp0_iter8_reg <= tmp_5_reg_1553_pp0_iter7_reg;
                tmp_5_reg_1553_pp0_iter9_reg <= tmp_5_reg_1553_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0))) then
                p_Val2_10_reg_1621 <= grp_modulate_bits_fu_444_ap_return_1;
                p_Val2_11_reg_1626 <= grp_modulate_bits_fu_458_ap_return_0;
                p_Val2_12_reg_1631 <= grp_modulate_bits_fu_458_ap_return_1;
                p_Val2_29_reg_1596 <= grp_modulate_bits_fu_416_ap_return_0;
                p_Val2_6_reg_1611 <= grp_modulate_bits_fu_430_ap_return_1;
                p_Val2_7_reg_1616 <= grp_modulate_bits_fu_444_ap_return_0;
                p_Val2_8_reg_1601 <= grp_modulate_bits_fu_416_ap_return_1;
                p_Val2_9_reg_1606 <= grp_modulate_bits_fu_430_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_fu_824_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_4_reg_1557 <= tmp_4_fu_833_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_4_reg_1557_pp0_iter1_reg <= tmp_4_reg_1557;
                tmp_5_reg_1553 <= tmp_5_fu_824_p2;
                tmp_5_reg_1553_pp0_iter1_reg <= tmp_5_reg_1553;
            end if;
        end if;
    end process;
    sh_assign_cast_reg_1481(17 downto 2) <= "0000000000000000";
    tmp_10_cast_reg_1505(7 downto 6) <= "00";
    tmp_6_reg_1511(95 downto 6) <= "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    tmp_17_cast_reg_1516(7) <= '0';

    ap_NS_fsm_assign_proc : process (ctrl_in_V_0_vld_out, ctrl_out_V_1_ack_in, chan_data_1_V_1_ack_in, chan_data_2_V_1_ack_in, chan_data_3_V_1_ack_in, chan_data_4_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, tmp_5_fu_824_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((ctrl_out_V_1_ack_in = ap_const_logic_0) or (ctrl_in_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ctrl_out_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_5_fu_824_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (tmp_5_fu_824_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                if ((not(((ctrl_out_V_1_ack_in = ap_const_logic_0) or (chan_data_4_V_1_ack_in = ap_const_logic_0) or (chan_data_3_V_1_ack_in = ap_const_logic_0) or (chan_data_2_V_1_ack_in = ap_const_logic_0) or (chan_data_1_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    Range1_all_ones_fu_689_p2 <= "1" when (p_Result_s_reg_1475 = ap_const_lv2_3) else "0";
    Range1_all_zeros_fu_694_p2 <= "1" when (p_Result_s_reg_1475 = ap_const_lv2_0) else "0";
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(4);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(hard_data_V_V_0_vld_out, ap_enable_reg_pp0_iter1, ap_predicate_op126_read_state5)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_predicate_op126_read_state5 = ap_const_boolean_1) and (hard_data_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(hard_data_V_V_0_vld_out, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_predicate_op126_read_state5, ap_block_state20_io, ap_block_state21_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((ap_predicate_op126_read_state5 = ap_const_boolean_1) and (hard_data_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(hard_data_V_V_0_vld_out, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_predicate_op126_read_state5, ap_block_state20_io, ap_block_state21_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state21_io) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state20_io) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)) or ((ap_predicate_op126_read_state5 = ap_const_boolean_1) and (hard_data_V_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_state10_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_io_assign_proc : process(chan_data_1_V_1_ack_in, chan_data_2_V_1_ack_in, chan_data_3_V_1_ack_in, chan_data_4_V_1_ack_in, tmp_5_reg_1553_pp0_iter15_reg)
    begin
                ap_block_state20_io <= (((tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (chan_data_4_V_1_ack_in = ap_const_logic_0)) or ((tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (chan_data_3_V_1_ack_in = ap_const_logic_0)) or ((tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (chan_data_2_V_1_ack_in = ap_const_logic_0)) or ((tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (chan_data_1_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state20_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state21_io_assign_proc : process(chan_data_1_V_1_ack_in, chan_data_2_V_1_ack_in, chan_data_3_V_1_ack_in, chan_data_4_V_1_ack_in, tmp_5_reg_1553_pp0_iter16_reg)
    begin
                ap_block_state21_io <= (((tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (chan_data_4_V_1_ack_in = ap_const_logic_0)) or ((tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (chan_data_3_V_1_ack_in = ap_const_logic_0)) or ((tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (chan_data_2_V_1_ack_in = ap_const_logic_0)) or ((tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (chan_data_1_V_1_ack_in = ap_const_logic_0)));
    end process;

        ap_block_state21_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_assign_proc : process(ctrl_out_V_1_ack_in, chan_data_1_V_1_ack_in, chan_data_2_V_1_ack_in, chan_data_3_V_1_ack_in, chan_data_4_V_1_ack_in)
    begin
                ap_block_state22 <= ((ctrl_out_V_1_ack_in = ap_const_logic_0) or (chan_data_4_V_1_ack_in = ap_const_logic_0) or (chan_data_3_V_1_ack_in = ap_const_logic_0) or (chan_data_2_V_1_ack_in = ap_const_logic_0) or (chan_data_1_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(hard_data_V_V_0_vld_out, ap_predicate_op126_read_state5)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((ap_predicate_op126_read_state5 = ap_const_boolean_1) and (hard_data_V_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state6_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_902_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
                ap_condition_902 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(tmp_5_fu_824_p2)
    begin
        if ((tmp_5_fu_824_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_3_phi_fu_285_p4_assign_proc : process(ap_block_pp0_stage0, p_3_reg_281, tmp_5_reg_1553_pp0_iter2_reg, r_V_reg_1591, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_phi_mux_p_3_phi_fu_285_p4 <= r_V_reg_1591;
        else 
            ap_phi_mux_p_3_phi_fu_285_p4 <= p_3_reg_281;
        end if; 
    end process;


    ap_phi_mux_p_Val2_5_phi_fu_305_p4_assign_proc : process(ap_block_pp0_stage0, tmp_5_reg_1553_pp0_iter1_reg, tmp_4_reg_1557_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_phi_mux_p_3_phi_fu_285_p4, ap_phi_reg_pp0_iter2_p_Val2_5_reg_302)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_4_reg_1557_pp0_iter1_reg = ap_const_lv1_0) and (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_p_Val2_5_phi_fu_305_p4 <= ap_phi_mux_p_3_phi_fu_285_p4;
        else 
            ap_phi_mux_p_Val2_5_phi_fu_305_p4 <= ap_phi_reg_pp0_iter2_p_Val2_5_reg_302;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_p_Val2_5_reg_302 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op126_read_state5_assign_proc : process(tmp_5_reg_1553, tmp_4_reg_1557)
    begin
                ap_predicate_op126_read_state5 <= ((tmp_4_reg_1557 = ap_const_lv1_1) and (tmp_5_reg_1553 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    awgn_snr_V_fu_774_p3 <= 
        p_mux_fu_758_p3 when (brmerge_fu_752_p2(0) = '1') else 
        p_s_fu_766_p3;
    brmerge_fu_752_p2 <= (p_39_demorgan_i_not_fu_746_p2 or neg_src_not_fu_734_p2);
    brmerge_i_i_not_fu_740_p2 <= (p_39_demorgan_i_fu_724_p2 and neg_src_not_fu_734_p2);
    carry_fu_683_p2 <= (tmp_s_fu_677_p2 and tmp_24_fu_657_p3);
        cast1_fu_1337_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_276_fu_1329_p3),40));

        cast2_fu_1350_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_381_fu_1342_p3),40));

        cast3_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_486_fu_1355_p3),40));

        cast4_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_591_fu_1368_p3),40));

    chan_data_1_V_1_ack_in <= chan_data_1_V_1_state(1);
    chan_data_1_V_1_ack_out <= chan_data_1_V_TREADY;

    chan_data_1_V_1_data_out_assign_proc : process(chan_data_1_V_1_payload_A, chan_data_1_V_1_payload_B, chan_data_1_V_1_sel)
    begin
        if ((chan_data_1_V_1_sel = ap_const_logic_1)) then 
            chan_data_1_V_1_data_out <= chan_data_1_V_1_payload_B;
        else 
            chan_data_1_V_1_data_out <= chan_data_1_V_1_payload_A;
        end if; 
    end process;

    chan_data_1_V_1_load_A <= (not(chan_data_1_V_1_sel_wr) and chan_data_1_V_1_state_cmp_full);
    chan_data_1_V_1_load_B <= (chan_data_1_V_1_state_cmp_full and chan_data_1_V_1_sel_wr);
    chan_data_1_V_1_sel <= chan_data_1_V_1_sel_rd;
    chan_data_1_V_1_state_cmp_full <= '0' when (chan_data_1_V_1_state = ap_const_lv2_1) else '1';

    chan_data_1_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            chan_data_1_V_1_vld_in <= ap_const_logic_1;
        else 
            chan_data_1_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    chan_data_1_V_1_vld_out <= chan_data_1_V_1_state(0);
    chan_data_1_V_TDATA <= chan_data_1_V_1_data_out;

    chan_data_1_V_TDATA_blk_n_assign_proc : process(chan_data_1_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_enable_reg_pp0_iter17, tmp_5_reg_1553_pp0_iter16_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)))) then 
            chan_data_1_V_TDATA_blk_n <= chan_data_1_V_1_state(1);
        else 
            chan_data_1_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_1_V_TVALID <= chan_data_1_V_1_state(0);
    chan_data_2_V_1_ack_in <= chan_data_2_V_1_state(1);
    chan_data_2_V_1_ack_out <= chan_data_2_V_TREADY;

    chan_data_2_V_1_data_out_assign_proc : process(chan_data_2_V_1_payload_A, chan_data_2_V_1_payload_B, chan_data_2_V_1_sel)
    begin
        if ((chan_data_2_V_1_sel = ap_const_logic_1)) then 
            chan_data_2_V_1_data_out <= chan_data_2_V_1_payload_B;
        else 
            chan_data_2_V_1_data_out <= chan_data_2_V_1_payload_A;
        end if; 
    end process;

    chan_data_2_V_1_load_A <= (not(chan_data_2_V_1_sel_wr) and chan_data_2_V_1_state_cmp_full);
    chan_data_2_V_1_load_B <= (chan_data_2_V_1_state_cmp_full and chan_data_2_V_1_sel_wr);
    chan_data_2_V_1_sel <= chan_data_2_V_1_sel_rd;
    chan_data_2_V_1_state_cmp_full <= '0' when (chan_data_2_V_1_state = ap_const_lv2_1) else '1';

    chan_data_2_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            chan_data_2_V_1_vld_in <= ap_const_logic_1;
        else 
            chan_data_2_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    chan_data_2_V_1_vld_out <= chan_data_2_V_1_state(0);
    chan_data_2_V_TDATA <= chan_data_2_V_1_data_out;

    chan_data_2_V_TDATA_blk_n_assign_proc : process(chan_data_2_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_enable_reg_pp0_iter17, tmp_5_reg_1553_pp0_iter16_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)))) then 
            chan_data_2_V_TDATA_blk_n <= chan_data_2_V_1_state(1);
        else 
            chan_data_2_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_2_V_TVALID <= chan_data_2_V_1_state(0);
    chan_data_3_V_1_ack_in <= chan_data_3_V_1_state(1);
    chan_data_3_V_1_ack_out <= chan_data_3_V_TREADY;

    chan_data_3_V_1_data_out_assign_proc : process(chan_data_3_V_1_payload_A, chan_data_3_V_1_payload_B, chan_data_3_V_1_sel)
    begin
        if ((chan_data_3_V_1_sel = ap_const_logic_1)) then 
            chan_data_3_V_1_data_out <= chan_data_3_V_1_payload_B;
        else 
            chan_data_3_V_1_data_out <= chan_data_3_V_1_payload_A;
        end if; 
    end process;

    chan_data_3_V_1_load_A <= (not(chan_data_3_V_1_sel_wr) and chan_data_3_V_1_state_cmp_full);
    chan_data_3_V_1_load_B <= (chan_data_3_V_1_state_cmp_full and chan_data_3_V_1_sel_wr);
    chan_data_3_V_1_sel <= chan_data_3_V_1_sel_rd;
    chan_data_3_V_1_state_cmp_full <= '0' when (chan_data_3_V_1_state = ap_const_lv2_1) else '1';

    chan_data_3_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            chan_data_3_V_1_vld_in <= ap_const_logic_1;
        else 
            chan_data_3_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    chan_data_3_V_1_vld_out <= chan_data_3_V_1_state(0);
    chan_data_3_V_TDATA <= chan_data_3_V_1_data_out;

    chan_data_3_V_TDATA_blk_n_assign_proc : process(chan_data_3_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_enable_reg_pp0_iter17, tmp_5_reg_1553_pp0_iter16_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)))) then 
            chan_data_3_V_TDATA_blk_n <= chan_data_3_V_1_state(1);
        else 
            chan_data_3_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_3_V_TVALID <= chan_data_3_V_1_state(0);
    chan_data_4_V_1_ack_in <= chan_data_4_V_1_state(1);
    chan_data_4_V_1_ack_out <= chan_data_4_V_TREADY;

    chan_data_4_V_1_data_out_assign_proc : process(chan_data_4_V_1_payload_A, chan_data_4_V_1_payload_B, chan_data_4_V_1_sel)
    begin
        if ((chan_data_4_V_1_sel = ap_const_logic_1)) then 
            chan_data_4_V_1_data_out <= chan_data_4_V_1_payload_B;
        else 
            chan_data_4_V_1_data_out <= chan_data_4_V_1_payload_A;
        end if; 
    end process;

    chan_data_4_V_1_load_A <= (not(chan_data_4_V_1_sel_wr) and chan_data_4_V_1_state_cmp_full);
    chan_data_4_V_1_load_B <= (chan_data_4_V_1_state_cmp_full and chan_data_4_V_1_sel_wr);
    chan_data_4_V_1_sel <= chan_data_4_V_1_sel_rd;
    chan_data_4_V_1_state_cmp_full <= '0' when (chan_data_4_V_1_state = ap_const_lv2_1) else '1';

    chan_data_4_V_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            chan_data_4_V_1_vld_in <= ap_const_logic_1;
        else 
            chan_data_4_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    chan_data_4_V_1_vld_out <= chan_data_4_V_1_state(0);
    chan_data_4_V_TDATA <= chan_data_4_V_1_data_out;

    chan_data_4_V_TDATA_blk_n_assign_proc : process(chan_data_4_V_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter16, tmp_5_reg_1553_pp0_iter15_reg, ap_enable_reg_pp0_iter17, tmp_5_reg_1553_pp0_iter16_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter16_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1)))) then 
            chan_data_4_V_TDATA_blk_n <= chan_data_4_V_1_state(1);
        else 
            chan_data_4_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    chan_data_4_V_TVALID <= chan_data_4_V_1_state(0);
    ctrl_in_V_0_ack_in <= ctrl_in_V_0_state(1);

    ctrl_in_V_0_ack_out_assign_proc : process(ctrl_in_V_0_vld_out, ctrl_out_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ctrl_out_V_1_ack_in = ap_const_logic_0) or (ctrl_in_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctrl_in_V_0_ack_out <= ap_const_logic_1;
        else 
            ctrl_in_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    ctrl_in_V_0_data_out_assign_proc : process(ctrl_in_V_0_payload_A, ctrl_in_V_0_payload_B, ctrl_in_V_0_sel)
    begin
        if ((ctrl_in_V_0_sel = ap_const_logic_1)) then 
            ctrl_in_V_0_data_out <= ctrl_in_V_0_payload_B;
        else 
            ctrl_in_V_0_data_out <= ctrl_in_V_0_payload_A;
        end if; 
    end process;

    ctrl_in_V_0_load_A <= (not(ctrl_in_V_0_sel_wr) and ctrl_in_V_0_state_cmp_full);
    ctrl_in_V_0_load_B <= (ctrl_in_V_0_state_cmp_full and ctrl_in_V_0_sel_wr);
    ctrl_in_V_0_sel <= ctrl_in_V_0_sel_rd;
    ctrl_in_V_0_state_cmp_full <= '0' when (ctrl_in_V_0_state = ap_const_lv2_1) else '1';
    ctrl_in_V_0_vld_in <= ctrl_in_V_TVALID;
    ctrl_in_V_0_vld_out <= ctrl_in_V_0_state(0);

    ctrl_in_V_TDATA_blk_n_assign_proc : process(ctrl_in_V_0_state, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ctrl_in_V_TDATA_blk_n <= ctrl_in_V_0_state(0);
        else 
            ctrl_in_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl_in_V_TREADY <= ctrl_in_V_0_state(1);
    ctrl_out_V_1_ack_in <= ctrl_out_V_1_state(1);
    ctrl_out_V_1_ack_out <= ctrl_out_V_TREADY;

    ctrl_out_V_1_data_out_assign_proc : process(ctrl_out_V_1_payload_A, ctrl_out_V_1_payload_B, ctrl_out_V_1_sel)
    begin
        if ((ctrl_out_V_1_sel = ap_const_logic_1)) then 
            ctrl_out_V_1_data_out <= ctrl_out_V_1_payload_B;
        else 
            ctrl_out_V_1_data_out <= ctrl_out_V_1_payload_A;
        end if; 
    end process;

    ctrl_out_V_1_load_A <= (not(ctrl_out_V_1_sel_wr) and ctrl_out_V_1_state_cmp_full);
    ctrl_out_V_1_load_B <= (ctrl_out_V_1_state_cmp_full and ctrl_out_V_1_sel_wr);
    ctrl_out_V_1_sel <= ctrl_out_V_1_sel_rd;
    ctrl_out_V_1_state_cmp_full <= '0' when (ctrl_out_V_1_state = ap_const_lv2_1) else '1';

    ctrl_out_V_1_vld_in_assign_proc : process(ctrl_in_V_0_vld_out, ctrl_out_V_1_ack_in, ap_CS_fsm_state2)
    begin
        if ((not(((ctrl_out_V_1_ack_in = ap_const_logic_0) or (ctrl_in_V_0_vld_out = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctrl_out_V_1_vld_in <= ap_const_logic_1;
        else 
            ctrl_out_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    ctrl_out_V_1_vld_out <= ctrl_out_V_1_state(0);
    ctrl_out_V_TDATA <= ctrl_out_V_1_data_out;

    ctrl_out_V_TDATA_blk_n_assign_proc : process(ctrl_out_V_1_state, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ctrl_out_V_TDATA_blk_n <= ctrl_out_V_1_state(1);
        else 
            ctrl_out_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ctrl_out_V_TVALID <= ctrl_out_V_1_state(0);
    ctrl_snr_V_fu_499_p4 <= ctrl_in_V_0_data_out(21 downto 5);
    deleted_zeros_fu_699_p3 <= 
        Range1_all_ones_fu_689_p2 when (carry_fu_683_p2(0) = '1') else 
        Range1_all_zeros_fu_694_p2;
    err_sample_imag_1_V_1_fu_1207_p2 <= std_logic_vector(signed(err_sample_imag_1_V_fu_1172_p1) + signed(tmp_10_fu_1203_p1));
    err_sample_imag_1_V_3_fu_1280_p3 <= 
        err_sample_imag_1_V_fu_1172_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_imag_1_V_1_fu_1207_p2;
        err_sample_imag_1_V_fu_1172_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_8_reg_1601),19));

    err_sample_imag_2_V_1_fu_1227_p2 <= std_logic_vector(signed(err_sample_imag_2_V_fu_1178_p1) + signed(tmp_12_fu_1223_p1));
    err_sample_imag_2_V_3_fu_1294_p3 <= 
        err_sample_imag_2_V_fu_1178_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_imag_2_V_1_fu_1227_p2;
        err_sample_imag_2_V_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_6_reg_1611),19));

    err_sample_imag_3_V_1_fu_1247_p2 <= std_logic_vector(signed(err_sample_imag_3_V_fu_1184_p1) + signed(tmp_14_fu_1243_p1));
    err_sample_imag_3_V_3_fu_1308_p3 <= 
        err_sample_imag_3_V_fu_1184_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_imag_3_V_1_fu_1247_p2;
        err_sample_imag_3_V_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_10_reg_1621),19));

    err_sample_imag_4_V_1_fu_1267_p2 <= std_logic_vector(signed(err_sample_imag_4_V_fu_1190_p1) + signed(tmp_16_fu_1263_p1));
    err_sample_imag_4_V_3_fu_1322_p3 <= 
        err_sample_imag_4_V_fu_1190_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_imag_4_V_1_fu_1267_p2;
        err_sample_imag_4_V_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_12_reg_1631),19));

    err_sample_real_1_V_1_fu_1197_p2 <= std_logic_vector(signed(err_sample_real_1_V_fu_1169_p1) + signed(tmp_8_fu_1193_p1));
    err_sample_real_1_V_3_fu_1273_p3 <= 
        err_sample_real_1_V_fu_1169_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_real_1_V_1_fu_1197_p2;
        err_sample_real_1_V_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_29_reg_1596),19));

    err_sample_real_2_V_1_fu_1217_p2 <= std_logic_vector(signed(err_sample_real_2_V_fu_1175_p1) + signed(tmp_11_fu_1213_p1));
    err_sample_real_2_V_3_fu_1287_p3 <= 
        err_sample_real_2_V_fu_1175_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_real_2_V_1_fu_1217_p2;
        err_sample_real_2_V_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_9_reg_1606),19));

    err_sample_real_3_V_1_fu_1237_p2 <= std_logic_vector(signed(err_sample_real_3_V_fu_1181_p1) + signed(tmp_13_fu_1233_p1));
    err_sample_real_3_V_3_fu_1301_p3 <= 
        err_sample_real_3_V_fu_1181_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_real_3_V_1_fu_1237_p2;
        err_sample_real_3_V_fu_1181_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_7_reg_1616),19));

    err_sample_real_4_V_1_fu_1257_p2 <= std_logic_vector(signed(err_sample_real_4_V_fu_1187_p1) + signed(tmp_15_fu_1253_p1));
    err_sample_real_4_V_3_fu_1315_p3 <= 
        err_sample_real_4_V_fu_1187_p1 when (ctrl_skip_chan_V_reg_1426(0) = '1') else 
        err_sample_real_4_V_1_fu_1257_p2;
        err_sample_real_4_V_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_11_reg_1626),19));


    grp_awgn_imag1_fu_325_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_imag1_fu_325_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_imag1_fu_325_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_imag1_fu_325_ap_start <= grp_awgn_imag1_fu_325_ap_start_reg;

    grp_awgn_imag2_fu_351_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_imag2_fu_351_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_imag2_fu_351_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_imag2_fu_351_ap_start <= grp_awgn_imag2_fu_351_ap_start_reg;

    grp_awgn_imag3_fu_377_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_imag3_fu_377_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_imag3_fu_377_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_imag3_fu_377_ap_start <= grp_awgn_imag3_fu_377_ap_start_reg;

    grp_awgn_imag4_fu_403_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_imag4_fu_403_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_imag4_fu_403_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_imag4_fu_403_ap_start <= grp_awgn_imag4_fu_403_ap_start_reg;

    grp_awgn_real1_fu_312_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_real1_fu_312_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_real1_fu_312_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_real1_fu_312_ap_start <= grp_awgn_real1_fu_312_ap_start_reg;

    grp_awgn_real2_fu_338_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_real2_fu_338_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_real2_fu_338_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_real2_fu_338_ap_start <= grp_awgn_real2_fu_338_ap_start_reg;

    grp_awgn_real3_fu_364_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_real3_fu_364_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_real3_fu_364_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_real3_fu_364_ap_start <= grp_awgn_real3_fu_364_ap_start_reg;

    grp_awgn_real4_fu_390_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_5_reg_1553, tmp_5_reg_1553_pp0_iter15_reg, ap_block_pp0_stage0_11001, tmp_5_reg_1553_pp0_iter1_reg, tmp_5_reg_1553_pp0_iter2_reg, tmp_5_reg_1553_pp0_iter3_reg, tmp_5_reg_1553_pp0_iter4_reg, tmp_5_reg_1553_pp0_iter5_reg, tmp_5_reg_1553_pp0_iter6_reg, tmp_5_reg_1553_pp0_iter7_reg, tmp_5_reg_1553_pp0_iter8_reg, tmp_5_reg_1553_pp0_iter9_reg, tmp_5_reg_1553_pp0_iter10_reg, tmp_5_reg_1553_pp0_iter11_reg, tmp_5_reg_1553_pp0_iter12_reg, tmp_5_reg_1553_pp0_iter13_reg, tmp_5_reg_1553_pp0_iter14_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((tmp_5_reg_1553_pp0_iter14_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter13_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter12_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter11_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter10_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter9_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter8_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter7_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter6_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter5_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter4_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter3_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter2_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter1_reg = ap_const_lv1_0) or (tmp_5_reg_1553_pp0_iter15_reg = ap_const_lv1_0) or (tmp_5_reg_1553 = ap_const_lv1_0)))) then 
            grp_awgn_real4_fu_390_ap_ce <= ap_const_logic_1;
        else 
            grp_awgn_real4_fu_390_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_awgn_real4_fu_390_ap_start <= grp_awgn_real4_fu_390_ap_start_reg;

    grp_modulate_bits_fu_416_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_modulate_bits_fu_416_ap_ce <= ap_const_logic_1;
        else 
            grp_modulate_bits_fu_416_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_modulate_bits_fu_416_ap_start <= grp_modulate_bits_fu_416_ap_start_reg;

    grp_modulate_bits_fu_430_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_modulate_bits_fu_430_ap_ce <= ap_const_logic_1;
        else 
            grp_modulate_bits_fu_430_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_modulate_bits_fu_430_ap_start <= grp_modulate_bits_fu_430_ap_start_reg;

    grp_modulate_bits_fu_444_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_modulate_bits_fu_444_ap_ce <= ap_const_logic_1;
        else 
            grp_modulate_bits_fu_444_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_modulate_bits_fu_444_ap_start <= grp_modulate_bits_fu_444_ap_start_reg;

    grp_modulate_bits_fu_458_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_modulate_bits_fu_458_ap_ce <= ap_const_logic_1;
        else 
            grp_modulate_bits_fu_458_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_modulate_bits_fu_458_ap_start <= grp_modulate_bits_fu_458_ap_start_reg;
    hard_data_V_V_0_ack_in <= hard_data_V_V_0_state(1);

    hard_data_V_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op126_read_state5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op126_read_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hard_data_V_V_0_ack_out <= ap_const_logic_1;
        else 
            hard_data_V_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    hard_data_V_V_0_data_out_assign_proc : process(hard_data_V_V_0_payload_A, hard_data_V_V_0_payload_B, hard_data_V_V_0_sel)
    begin
        if ((hard_data_V_V_0_sel = ap_const_logic_1)) then 
            hard_data_V_V_0_data_out <= hard_data_V_V_0_payload_B;
        else 
            hard_data_V_V_0_data_out <= hard_data_V_V_0_payload_A;
        end if; 
    end process;

    hard_data_V_V_0_load_A <= (hard_data_V_V_0_state_cmp_full and not(hard_data_V_V_0_sel_wr));
    hard_data_V_V_0_load_B <= (hard_data_V_V_0_state_cmp_full and hard_data_V_V_0_sel_wr);
    hard_data_V_V_0_sel <= hard_data_V_V_0_sel_rd;
    hard_data_V_V_0_state_cmp_full <= '0' when (hard_data_V_V_0_state = ap_const_lv2_1) else '1';
    hard_data_V_V_0_vld_in <= hard_data_V_V_TVALID;
    hard_data_V_V_0_vld_out <= hard_data_V_V_0_state(0);

    hard_data_V_V_TDATA_blk_n_assign_proc : process(hard_data_V_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, tmp_5_reg_1553, tmp_4_reg_1557)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_4_reg_1557 = ap_const_lv1_1) and (tmp_5_reg_1553 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            hard_data_V_V_TDATA_blk_n <= hard_data_V_V_0_state(0);
        else 
            hard_data_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    hard_data_V_V_TREADY <= hard_data_V_V_0_state(1);
    neg_src_fu_719_p2 <= (tmp_9_fu_713_p2 and signbit_reg_1458);
    neg_src_not_fu_734_p2 <= (signbit_not_fu_729_p2 or p_38_i_fu_707_p2);
    p_1_cast_fu_572_p3 <= 
        ap_const_lv2_0 when (tmp_7_fu_524_p2(0) = '1') else 
        ap_const_lv2_1;
    p_38_i_fu_707_p2 <= (carry_fu_683_p2 and Range1_all_ones_fu_689_p2);
    p_39_demorgan_i_fu_724_p2 <= (signbit_reg_1458 or deleted_zeros_fu_699_p3);
    p_39_demorgan_i_not_fu_746_p2 <= (p_39_demorgan_i_fu_724_p2 xor ap_const_lv1_1);
    p_7_fu_1065_p3 <= 
        symbol_4_V_fu_900_p4 when (sel_tmp7_reg_1545(0) = '1') else 
        sel_tmp4_fu_1058_p3;
    p_Val2_13_fu_1129_p2 <= std_logic_vector(shift_right(signed(grp_awgn_real1_fu_312_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
    p_Val2_14_fu_1134_p2 <= std_logic_vector(shift_right(signed(grp_awgn_imag1_fu_325_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
    p_Val2_15_fu_1139_p2 <= std_logic_vector(shift_right(signed(grp_awgn_real2_fu_338_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
    p_Val2_16_fu_1144_p2 <= std_logic_vector(shift_right(signed(grp_awgn_imag2_fu_351_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
    p_Val2_17_fu_1149_p2 <= std_logic_vector(shift_right(signed(grp_awgn_real3_fu_364_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
    p_Val2_18_fu_1154_p2 <= std_logic_vector(shift_right(signed(grp_awgn_imag3_fu_377_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
    p_Val2_19_fu_1159_p2 <= std_logic_vector(shift_right(signed(grp_awgn_real4_fu_390_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
    p_Val2_1_fu_560_p3 <= 
        tmp_5_cast_fu_546_p3 when (tmp_fu_554_p2(0) = '1') else 
        ap_const_lv16_0;
    p_Val2_20_fu_1164_p2 <= std_logic_vector(shift_right(signed(grp_awgn_imag4_fu_403_ap_return),to_integer(unsigned('0' & sh_assign_cast_reg_1481(18-1 downto 0)))));
        p_Val2_2_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_fu_560_p3),17));

    p_Val2_4_fu_664_p2 <= std_logic_vector(unsigned(p_Val2_3_reg_1465) + unsigned(tmp_3_fu_654_p1));
    p_mux_fu_758_p3 <= 
        p_Val2_4_fu_664_p2 when (brmerge_i_i_not_fu_740_p2(0) = '1') else 
        ap_const_lv8_FF;
    p_s_fu_766_p3 <= 
        ap_const_lv8_0 when (neg_src_fu_719_p2(0) = '1') else 
        p_Val2_4_fu_664_p2;
    r_V_fu_1072_p2 <= std_logic_vector(shift_right(unsigned(ap_phi_mux_p_Val2_5_phi_fu_305_p4),to_integer(unsigned('0' & tmp_6_reg_1511(31-1 downto 0)))));
    remaining_bits_1_fu_848_p2 <= std_logic_vector(unsigned(tmp_17_cast_reg_1516) + unsigned(remaining_bits_fu_230));
    remaining_bits_2_fu_838_p2 <= std_logic_vector(unsigned(remaining_bits_fu_230) - unsigned(tmp_10_cast_reg_1505));
    sel_tmp1_fu_1044_p3 <= 
        symbol_4_V_2_fu_950_p4 when (sel_tmp_reg_1521(0) = '1') else 
        p_6_fu_214;
    sel_tmp2_fu_1051_p3 <= 
        ap_const_lv6_0 when (sel_tmp3_reg_1529(0) = '1') else 
        sel_tmp1_fu_1044_p3;
    sel_tmp3_fu_809_p2 <= "1" when (ctrl_mod_type_V_reg_1413 = ap_const_lv3_2) else "0";
    sel_tmp4_fu_1058_p3 <= 
        symbol_4_V_3_fu_920_p4 when (sel_tmp5_reg_1537(0) = '1') else 
        sel_tmp2_fu_1051_p3;
    sel_tmp5_fu_814_p2 <= "1" when (ctrl_mod_type_V_reg_1413 = ap_const_lv3_1) else "0";
    sel_tmp7_fu_819_p2 <= "1" when (ctrl_mod_type_V_reg_1413 = ap_const_lv3_0) else "0";
    sel_tmp_fu_804_p2 <= "1" when (ctrl_mod_type_V_reg_1413 = ap_const_lv3_3) else "0";
    sh_assign_cast_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_reg_1448),18));
    sh_assign_fu_580_p3 <= 
        p_1_cast_fu_572_p3 when (tmp_20_fu_530_p3(0) = '1') else 
        ap_const_lv2_2;
    signbit_not_fu_729_p2 <= (signbit_reg_1458 xor ap_const_lv1_1);
    snr_mod_V_fu_588_p2 <= std_logic_vector(unsigned(ctrl_snr_V_fu_499_p4) - unsigned(p_Val2_2_cast_fu_568_p1));
    symbol_1_V_1_fu_960_p3 <= 
        symbol_1_V_5_fu_876_p1 when (sel_tmp_reg_1521(0) = '1') else 
        symbol_1_V_fu_226;
    symbol_1_V_2_fu_967_p3 <= 
        symbol_1_V_5_fu_876_p1 when (sel_tmp3_reg_1529(0) = '1') else 
        symbol_1_V_1_fu_960_p3;
    symbol_1_V_3_fu_974_p3 <= 
        symbol_1_V_5_fu_876_p1 when (sel_tmp5_reg_1537(0) = '1') else 
        symbol_1_V_2_fu_967_p3;
    symbol_1_V_4_fu_981_p3 <= 
        symbol_1_V_5_fu_876_p1 when (sel_tmp7_reg_1545(0) = '1') else 
        symbol_1_V_3_fu_974_p3;
    symbol_1_V_5_fu_876_p1 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(6 - 1 downto 0);
    symbol_2_V_4_fu_988_p3 <= 
        symbol_4_V_3_fu_920_p4 when (sel_tmp_reg_1521(0) = '1') else 
        symbol_2_V_1_fu_222;
    symbol_2_V_5_fu_995_p3 <= 
        symbol_3_V_10_fu_910_p4 when (sel_tmp3_reg_1529(0) = '1') else 
        symbol_2_V_4_fu_988_p3;
    symbol_2_V_6_fu_1002_p3 <= 
        symbol_3_V_9_fu_890_p4 when (sel_tmp5_reg_1537(0) = '1') else 
        symbol_2_V_5_fu_995_p3;
    symbol_2_V_7_fu_1009_p3 <= 
        symbol_2_V_fu_880_p4 when (sel_tmp7_reg_1545(0) = '1') else 
        symbol_2_V_6_fu_1002_p3;
    symbol_2_V_fu_880_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(6 downto 1);
    symbol_3_V_10_fu_910_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(9 downto 4);
    symbol_3_V_1_fu_940_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(17 downto 12);
    symbol_3_V_2_fu_1016_p3 <= 
        symbol_3_V_1_fu_940_p4 when (sel_tmp_reg_1521(0) = '1') else 
        symbol_3_V_6_fu_218;
    symbol_3_V_3_fu_1023_p3 <= 
        symbol_3_V_fu_930_p4 when (sel_tmp3_reg_1529(0) = '1') else 
        symbol_3_V_2_fu_1016_p3;
    symbol_3_V_4_fu_1030_p3 <= 
        symbol_3_V_10_fu_910_p4 when (sel_tmp5_reg_1537(0) = '1') else 
        symbol_3_V_3_fu_1023_p3;
    symbol_3_V_5_fu_1037_p3 <= 
        symbol_3_V_9_fu_890_p4 when (sel_tmp7_reg_1545(0) = '1') else 
        symbol_3_V_4_fu_1030_p3;
    symbol_3_V_9_fu_890_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(7 downto 2);
    symbol_3_V_fu_930_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(13 downto 8);
    symbol_4_V_2_fu_950_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(29 downto 24);
    symbol_4_V_3_fu_920_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(11 downto 6);
    symbol_4_V_fu_900_p4 <= ap_phi_mux_p_Val2_5_phi_fu_305_p4(8 downto 3);
    symbols_V_1_fu_858_p2 <= std_logic_vector(signed(ap_const_lv14_3FFF) + signed(symbols_reg_293));
    tmp_10_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_fu_630_p10),8));
        tmp_10_fu_1203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_14_fu_1134_p2),19));

    tmp_11_cast_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_fu_630_p10),7));
        tmp_11_fu_1213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_15_fu_1139_p2),19));

        tmp_12_fu_1223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_16_fu_1144_p2),19));

        tmp_13_fu_1233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_17_fu_1149_p2),19));

        tmp_14_fu_1243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_18_fu_1154_p2),19));

        tmp_15_fu_1253_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_19_fu_1159_p2),19));

        tmp_162_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_27_fu_477_p1),64));

        tmp_16_fu_1263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_20_fu_1164_p2),19));

    tmp_17_cast_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_794_p2),8));
    tmp_20_fu_530_p3 <= ctrl_in_V_0_data_out(21 downto 21);
    tmp_21_fu_538_p3 <= ctrl_in_V_0_data_out(21 downto 21);
    tmp_24_fu_657_p3 <= snr_mod_V_reg_1453(14 downto 14);
    tmp_25_fu_669_p3 <= p_Val2_4_fu_664_p2(7 downto 7);
    tmp_276_fu_1329_p3 <= (err_sample_imag_1_V_3_fu_1280_p3 & err_sample_real_1_V_3_fu_1273_p3);
    tmp_27_fu_477_p1 <= ctrl_in_V_0_data_out(58 - 1 downto 0);
    tmp_2_fu_794_p2 <= std_logic_vector(signed(ap_const_lv7_60) - signed(tmp_11_cast_fu_786_p1));
    tmp_381_fu_1342_p3 <= (err_sample_imag_2_V_3_fu_1294_p3 & err_sample_real_2_V_3_fu_1287_p3);
    tmp_3_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_reg_1470),8));
    tmp_486_fu_1355_p3 <= (err_sample_imag_3_V_3_fu_1308_p3 & err_sample_real_3_V_3_fu_1301_p3);
    tmp_4_fu_833_p2 <= "1" when (signed(remaining_bits_fu_230) < signed(tmp_10_cast_reg_1505)) else "0";
    tmp_591_fu_1368_p3 <= (err_sample_imag_4_V_3_fu_1322_p3 & err_sample_real_4_V_3_fu_1315_p3);
    tmp_5_cast_fu_546_p3 <= 
        ap_const_lv16_9FAB when (tmp_7_fu_524_p2(0) = '1') else 
        ap_const_lv16_CFD5;
    tmp_5_fu_824_p2 <= "1" when (symbols_reg_293 = ap_const_lv14_0) else "0";
    tmp_6_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_fu_630_p10),96));
    tmp_7_fu_524_p2 <= "1" when (signed(ctrl_snr_V_fu_499_p4) < signed(ap_const_lv17_1CFD5)) else "0";
        tmp_8_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_fu_1129_p2),19));

    tmp_9_fu_713_p2 <= (p_38_i_fu_707_p2 xor ap_const_lv1_1);
    tmp_fu_554_p2 <= (tmp_7_fu_524_p2 or tmp_21_fu_538_p3);
    tmp_s_fu_677_p2 <= (tmp_25_fu_669_p3 xor ap_const_lv1_1);
end behav;
