// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1.0
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module stats_top_CNTRL_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 7,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    input  wire                          clk,
    input  wire                          rst,
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    output wire [31:0]                   k_V,
    output wire [31:0]                   n_V,
    output wire [127:0]                  mask_V,
    output wire [31:0]                   num_blocks_V,
    output wire [31:0]                   src_inc_parity_V,
    input  wire [31:0]                   raw_berr_V,
    input  wire [31:0]                   raw_blerr_V,
    input  wire [31:0]                   cor_berr_V,
    input  wire [31:0]                   cor_blerr_V,
    input  wire [31:0]                   iter_cnt_V,
    input  wire [31:0]                   block_cnt_V
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of k_V
//        bit 31~0 - k_V[31:0] (Read/Write)
// 0x14 : reserved
// 0x18 : Data signal of n_V
//        bit 31~0 - n_V[31:0] (Read/Write)
// 0x1c : reserved
// 0x20 : Data signal of mask_V
//        bit 31~0 - mask_V[31:0] (Read/Write)
// 0x24 : Data signal of mask_V
//        bit 31~0 - mask_V[63:32] (Read/Write)
// 0x28 : Data signal of mask_V
//        bit 31~0 - mask_V[95:64] (Read/Write)
// 0x2c : Data signal of mask_V
//        bit 31~0 - mask_V[127:96] (Read/Write)
// 0x30 : reserved
// 0x34 : Data signal of num_blocks_V
//        bit 31~0 - num_blocks_V[31:0] (Read/Write)
// 0x38 : reserved
// 0x3c : Data signal of src_inc_parity_V
//        bit 31~0 - src_inc_parity_V[31:0] (Read/Write)
// 0x40 : reserved
// 0x44 : Data signal of raw_berr_V
//        bit 31~0 - raw_berr_V[31:0] (Read)
// 0x48 : reserved
// 0x4c : Data signal of raw_blerr_V
//        bit 31~0 - raw_blerr_V[31:0] (Read)
// 0x50 : reserved
// 0x54 : Data signal of cor_berr_V
//        bit 31~0 - cor_berr_V[31:0] (Read)
// 0x58 : reserved
// 0x5c : Data signal of cor_blerr_V
//        bit 31~0 - cor_blerr_V[31:0] (Read)
// 0x60 : reserved
// 0x64 : Data signal of iter_cnt_V
//        bit 31~0 - iter_cnt_V[31:0] (Read)
// 0x68 : reserved
// 0x6c : Data signal of block_cnt_V
//        bit 31~0 - block_cnt_V[31:0] (Read)
// 0x70 : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                 = 7'h00,
    ADDR_GIE                     = 7'h04,
    ADDR_IER                     = 7'h08,
    ADDR_ISR                     = 7'h0c,
    ADDR_K_V_DATA_0              = 7'h10,
    ADDR_K_V_CTRL                = 7'h14,
    ADDR_N_V_DATA_0              = 7'h18,
    ADDR_N_V_CTRL                = 7'h1c,
    ADDR_MASK_V_DATA_0           = 7'h20,
    ADDR_MASK_V_DATA_1           = 7'h24,
    ADDR_MASK_V_DATA_2           = 7'h28,
    ADDR_MASK_V_DATA_3           = 7'h2c,
    ADDR_MASK_V_CTRL             = 7'h30,
    ADDR_NUM_BLOCKS_V_DATA_0     = 7'h34,
    ADDR_NUM_BLOCKS_V_CTRL       = 7'h38,
    ADDR_SRC_INC_PARITY_V_DATA_0 = 7'h3c,
    ADDR_SRC_INC_PARITY_V_CTRL   = 7'h40,
    ADDR_RAW_BERR_V_DATA_0       = 7'h44,
    ADDR_RAW_BERR_V_CTRL         = 7'h48,
    ADDR_RAW_BLERR_V_DATA_0      = 7'h4c,
    ADDR_RAW_BLERR_V_CTRL        = 7'h50,
    ADDR_COR_BERR_V_DATA_0       = 7'h54,
    ADDR_COR_BERR_V_CTRL         = 7'h58,
    ADDR_COR_BLERR_V_DATA_0      = 7'h5c,
    ADDR_COR_BLERR_V_CTRL        = 7'h60,
    ADDR_ITER_CNT_V_DATA_0       = 7'h64,
    ADDR_ITER_CNT_V_CTRL         = 7'h68,
    ADDR_BLOCK_CNT_V_DATA_0      = 7'h6c,
    ADDR_BLOCK_CNT_V_CTRL        = 7'h70,
    WRIDLE                       = 2'd0,
    WRDATA                       = 2'd1,
    WRRESP                       = 2'd2,
    WRRESET                      = 2'd3,
    RDIDLE                       = 2'd0,
    RDDATA                       = 2'd1,
    RDRESET                      = 2'd2,
    ADDR_BITS         = 7;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    wire                          ap_done_get;
    reg                           ap_done_ext;
    reg                           int_ap_start = 1'b0;
    wire                          ap_start_set;
    reg                           ap_start_mask;
    reg                           int_auto_restart = 1'b0;
    wire                          auto_restart_set;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    wire                          ier_toggle;
    reg                           ier_mask;
    reg  [1:0]                    int_isr = 2'b0;
    wire                          isr_toggle;
    reg                           isr_mask;
    reg  [31:0]                   int_k_V = 'b0;
    reg  [31:0]                   int_n_V = 'b0;
    reg  [127:0]                  int_mask_V = 'b0;
    reg  [31:0]                   int_num_blocks_V = 'b0;
    reg  [31:0]                   int_src_inc_parity_V = 'b0;
    reg  [31:0]                   int_raw_berr_V = 'b0;
    reg  [31:0]                   int_raw_blerr_V = 'b0;
    reg  [31:0]                   int_cor_berr_V = 'b0;
    reg  [31:0]                   int_cor_blerr_V = 'b0;
    reg  [31:0]                   int_iter_cnt_V = 'b0;
    reg  [31:0]                   int_block_cnt_V = 'b0;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_K_V_DATA_0: begin
                    rdata <= int_k_V[31:0];
                end
                ADDR_N_V_DATA_0: begin
                    rdata <= int_n_V[31:0];
                end
                ADDR_MASK_V_DATA_0: begin
                    rdata <= int_mask_V[31:0];
                end
                ADDR_MASK_V_DATA_1: begin
                    rdata <= int_mask_V[63:32];
                end
                ADDR_MASK_V_DATA_2: begin
                    rdata <= int_mask_V[95:64];
                end
                ADDR_MASK_V_DATA_3: begin
                    rdata <= int_mask_V[127:96];
                end
                ADDR_NUM_BLOCKS_V_DATA_0: begin
                    rdata <= int_num_blocks_V[31:0];
                end
                ADDR_SRC_INC_PARITY_V_DATA_0: begin
                    rdata <= int_src_inc_parity_V[31:0];
                end
                ADDR_RAW_BERR_V_DATA_0: begin
                    rdata <= int_raw_berr_V[31:0];
                end
                ADDR_RAW_BLERR_V_DATA_0: begin
                    rdata <= int_raw_blerr_V[31:0];
                end
                ADDR_COR_BERR_V_DATA_0: begin
                    rdata <= int_cor_berr_V[31:0];
                end
                ADDR_COR_BLERR_V_DATA_0: begin
                    rdata <= int_cor_blerr_V[31:0];
                end
                ADDR_ITER_CNT_V_DATA_0: begin
                    rdata <= int_iter_cnt_V[31:0];
                end
                ADDR_BLOCK_CNT_V_DATA_0: begin
                    rdata <= int_block_cnt_V[31:0];
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign interrupt        = int_gie & (|int_isr);
assign ap_start         = int_ap_start;
assign ap_start_set     = w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0];
assign ap_done_get      = ar_hs && raddr == ADDR_AP_CTRL;
assign auto_restart_set = w_hs && waddr == ADDR_AP_CTRL && WSTRB[0];
assign isr_toggle       = w_hs && waddr == ADDR_ISR && WSTRB[0];
assign k_V              = int_k_V;
assign n_V              = int_n_V;
assign mask_V           = int_mask_V;
assign num_blocks_V     = int_num_blocks_V;
assign src_inc_parity_V = int_src_inc_parity_V;
// ap_start_mask
always @(posedge clk) begin
    if (rst)
        ap_start_mask <= 1'b0;
    else
        ap_start_mask <= ap_start_set;
end
// int_ap_start
always @(posedge clk) begin
    if (rst)
        int_ap_start <= 1'b0;
    else if (ap_start_set == 1'b1 && ap_start_mask == 1'b0)
        int_ap_start <= 1'b1;
    else if (ap_ready)
        int_ap_start <= int_auto_restart; // clear on handshake/auto restart
end
// ap_done_ext
always @(posedge clk) begin
    if (rst)
        ap_done_ext <= 1'b0;
    else
        ap_done_ext <= ap_done_get;
end
// int_ap_done
always @(posedge clk) begin
    if (rst)
        int_ap_done <= 1'b0;
    else if (ap_done)
        int_ap_done <= 1'b1;
    else if (ap_done_get == 1'b0 && ap_done_ext == 1'b1)
        int_ap_done <= 1'b0; // clear on read
end
// int_ap_idle
always @(posedge clk) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else
        int_ap_idle <= ap_idle;
end
// int_ap_ready
always @(posedge clk) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else
        int_ap_ready <= ap_ready;
end
// int_auto_restart
always @(posedge clk) begin
    if (rst)
        int_auto_restart <= 1'b0;
    else if (auto_restart_set == 1'b1)
        int_auto_restart <=  WDATA[7];
end
// int_gie
always @(posedge clk) begin
    if (rst)
        int_gie <= 1'b0;
    else if (w_hs && waddr == ADDR_GIE && WSTRB[0])
        int_gie <= WDATA[0];
end
// int_ier
always @(posedge clk) begin
    if (rst)
        int_ier <= 1'b0;
    else if (w_hs && waddr == ADDR_IER && WSTRB[0])
        int_ier <= WDATA[1:0];
end
// isr_mask
always @(posedge clk) begin
    if (rst)
        isr_mask <= 1'b0;
    else
        isr_mask <= isr_toggle;
end
// int_isr[0]
always @(posedge clk) begin
    if (rst)
        int_isr[0] <= 1'b0;
    else if (int_ier[0] & ap_done)
        int_isr[0] <= 1'b1;
    else if (isr_toggle == 1'b1 && isr_mask == 1'b0)
        int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
end
// int_isr[1]
always @(posedge clk) begin
    if (rst)
        int_isr[1] <= 1'b0;
    else if (int_ier[1] & ap_ready)
        int_isr[1] <= 1'b1;
    else if (isr_toggle == 1'b1 && isr_mask == 1'b0)
        int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
end
// int_k_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_k_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_K_V_DATA_0)
        int_k_V[31:0] <= (WDATA[31:0] & wmask) | (int_k_V[31:0] & ~wmask);
end
// int_n_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_n_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_N_V_DATA_0)
        int_n_V[31:0] <= (WDATA[31:0] & wmask) | (int_n_V[31:0] & ~wmask);
end
// int_mask_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_mask_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_MASK_V_DATA_0)
        int_mask_V[31:0] <= (WDATA[31:0] & wmask) | (int_mask_V[31:0] & ~wmask);
end
// int_mask_V[63:32]
always @(posedge clk) begin
    if (rst)
        int_mask_V[63:32] <= 0;
    else if (w_hs && waddr == ADDR_MASK_V_DATA_1)
        int_mask_V[63:32] <= (WDATA[31:0] & wmask) | (int_mask_V[63:32] & ~wmask);
end
// int_mask_V[95:64]
always @(posedge clk) begin
    if (rst)
        int_mask_V[95:64] <= 0;
    else if (w_hs && waddr == ADDR_MASK_V_DATA_2)
        int_mask_V[95:64] <= (WDATA[31:0] & wmask) | (int_mask_V[95:64] & ~wmask);
end
// int_mask_V[127:96]
always @(posedge clk) begin
    if (rst)
        int_mask_V[127:96] <= 0;
    else if (w_hs && waddr == ADDR_MASK_V_DATA_3)
        int_mask_V[127:96] <= (WDATA[31:0] & wmask) | (int_mask_V[127:96] & ~wmask);
end
// int_num_blocks_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_num_blocks_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_NUM_BLOCKS_V_DATA_0)
        int_num_blocks_V[31:0] <= (WDATA[31:0] & wmask) | (int_num_blocks_V[31:0] & ~wmask);
end
// int_src_inc_parity_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_src_inc_parity_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_SRC_INC_PARITY_V_DATA_0)
        int_src_inc_parity_V[31:0] <= (WDATA[31:0] & wmask) | (int_src_inc_parity_V[31:0] & ~wmask);
end
// int_raw_berr_V
always @(posedge clk) begin
    if (rst)
        int_raw_berr_V <= 0;
    else
        int_raw_berr_V <= raw_berr_V;
end
// int_raw_blerr_V
always @(posedge clk) begin
    if (rst)
        int_raw_blerr_V <= 0;
    else
        int_raw_blerr_V <= raw_blerr_V;
end
// int_cor_berr_V
always @(posedge clk) begin
    if (rst)
        int_cor_berr_V <= 0;
    else
        int_cor_berr_V <= cor_berr_V;
end
// int_cor_blerr_V
always @(posedge clk) begin
    if (rst)
        int_cor_blerr_V <= 0;
    else
        int_cor_blerr_V <= cor_blerr_V;
end
// int_iter_cnt_V
always @(posedge clk) begin
    if (rst)
        int_iter_cnt_V <= 0;
    else
        int_iter_cnt_V <= iter_cnt_V;
end
// int_block_cnt_V
always @(posedge clk) begin
    if (rst)
        int_block_cnt_V <= 0;
    else
        int_block_cnt_V <= block_cnt_V;
end

//------------------------Memory logic-------------------

endmodule
