// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1.0
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="data_source_top,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.440500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=8,HLS_SYN_FF=3373,HLS_SYN_LUT=3432}" *)

module data_source_top (
        ap_clk,
        ap_rst_n,
        chan_ctrl_out_V_TDATA,
        chan_ctrl_out_V_TVALID,
        chan_ctrl_out_V_TREADY,
        enc_ctrl_out_TDATA,
        enc_ctrl_out_TVALID,
        enc_ctrl_out_TREADY,
        enc_ctrl_out_TLAST,
        enc_keep_ctrl_V_V_TDATA,
        enc_keep_ctrl_V_V_TVALID,
        enc_keep_ctrl_V_V_TREADY,
        dec_keep_ctrl_V_V_TDATA,
        dec_keep_ctrl_V_V_TVALID,
        dec_keep_ctrl_V_V_TREADY,
        dec_ctrl_out_TDATA,
        dec_ctrl_out_TVALID,
        dec_ctrl_out_TREADY,
        dec_ctrl_out_TLAST,
        hard_data_out_TDATA,
        hard_data_out_TVALID,
        hard_data_out_TREADY,
        hard_data_out_TKEEP,
        hard_data_out_TLAST,
        s_axi_CNTRL_AWVALID,
        s_axi_CNTRL_AWREADY,
        s_axi_CNTRL_AWADDR,
        s_axi_CNTRL_WVALID,
        s_axi_CNTRL_WREADY,
        s_axi_CNTRL_WDATA,
        s_axi_CNTRL_WSTRB,
        s_axi_CNTRL_ARVALID,
        s_axi_CNTRL_ARREADY,
        s_axi_CNTRL_ARADDR,
        s_axi_CNTRL_RVALID,
        s_axi_CNTRL_RREADY,
        s_axi_CNTRL_RDATA,
        s_axi_CNTRL_RRESP,
        s_axi_CNTRL_BVALID,
        s_axi_CNTRL_BREADY,
        s_axi_CNTRL_BRESP,
        interrupt,
        cntrl_aclk,
        ap_rst_n_cntrl_aclk
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state17 = 3'd4;
parameter    C_S_AXI_CNTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CNTRL_ADDR_WIDTH = 8;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CNTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [63:0] chan_ctrl_out_V_TDATA;
output   chan_ctrl_out_V_TVALID;
input   chan_ctrl_out_V_TREADY;
output  [39:0] enc_ctrl_out_TDATA;
output   enc_ctrl_out_TVALID;
input   enc_ctrl_out_TREADY;
output  [0:0] enc_ctrl_out_TLAST;
output  [63:0] enc_keep_ctrl_V_V_TDATA;
output   enc_keep_ctrl_V_V_TVALID;
input   enc_keep_ctrl_V_V_TREADY;
output  [63:0] dec_keep_ctrl_V_V_TDATA;
output   dec_keep_ctrl_V_V_TVALID;
input   dec_keep_ctrl_V_V_TREADY;
output  [39:0] dec_ctrl_out_TDATA;
output   dec_ctrl_out_TVALID;
input   dec_ctrl_out_TREADY;
output  [0:0] dec_ctrl_out_TLAST;
output  [127:0] hard_data_out_TDATA;
output   hard_data_out_TVALID;
input   hard_data_out_TREADY;
output  [15:0] hard_data_out_TKEEP;
output  [0:0] hard_data_out_TLAST;
input   s_axi_CNTRL_AWVALID;
output   s_axi_CNTRL_AWREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_AWADDR;
input   s_axi_CNTRL_WVALID;
output   s_axi_CNTRL_WREADY;
input  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_WDATA;
input  [C_S_AXI_CNTRL_WSTRB_WIDTH - 1:0] s_axi_CNTRL_WSTRB;
input   s_axi_CNTRL_ARVALID;
output   s_axi_CNTRL_ARREADY;
input  [C_S_AXI_CNTRL_ADDR_WIDTH - 1:0] s_axi_CNTRL_ARADDR;
output   s_axi_CNTRL_RVALID;
input   s_axi_CNTRL_RREADY;
output  [C_S_AXI_CNTRL_DATA_WIDTH - 1:0] s_axi_CNTRL_RDATA;
output  [1:0] s_axi_CNTRL_RRESP;
output   s_axi_CNTRL_BVALID;
input   s_axi_CNTRL_BREADY;
output  [1:0] s_axi_CNTRL_BRESP;
output   interrupt;
input   cntrl_aclk;
input   ap_rst_n_cntrl_aclk;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [0:0] fec_type_V;
wire   [2:0] mod_type_V;
wire   [0:0] skip_chan_V;
wire   [16:0] snr_V;
wire   [16:0] inv_sigma_sq_V;
wire   [39:0] enc_ctrl_word_V;
wire   [39:0] dec_ctrl_word_V;
wire   [31:0] num_blocks_V;
wire   [13:0] source_words_V;
wire   [13:0] chan_symbls_V;
wire   [4:0] chan_rem_V;
wire   [0:0] zero_data_V;
wire   [15:0] source_keep_V;
wire   [63:0] enc_keep_V;
wire   [63:0] dec_keep_V;
reg   [63:0] chan_ctrl_out_V_1_data_out;
reg    chan_ctrl_out_V_1_vld_in;
wire    chan_ctrl_out_V_1_vld_out;
wire    chan_ctrl_out_V_1_ack_in;
wire    chan_ctrl_out_V_1_ack_out;
reg   [63:0] chan_ctrl_out_V_1_payload_A;
reg   [63:0] chan_ctrl_out_V_1_payload_B;
reg    chan_ctrl_out_V_1_sel_rd;
reg    chan_ctrl_out_V_1_sel_wr;
wire    chan_ctrl_out_V_1_sel;
wire    chan_ctrl_out_V_1_load_A;
wire    chan_ctrl_out_V_1_load_B;
reg   [1:0] chan_ctrl_out_V_1_state;
wire    chan_ctrl_out_V_1_state_cmp_full;
reg   [39:0] enc_ctrl_out_V_data_V_1_data_out;
reg    enc_ctrl_out_V_data_V_1_vld_in;
wire    enc_ctrl_out_V_data_V_1_vld_out;
wire    enc_ctrl_out_V_data_V_1_ack_in;
wire    enc_ctrl_out_V_data_V_1_ack_out;
reg   [39:0] enc_ctrl_out_V_data_V_1_payload_A;
reg   [39:0] enc_ctrl_out_V_data_V_1_payload_B;
reg    enc_ctrl_out_V_data_V_1_sel_rd;
reg    enc_ctrl_out_V_data_V_1_sel_wr;
wire    enc_ctrl_out_V_data_V_1_sel;
wire    enc_ctrl_out_V_data_V_1_load_A;
wire    enc_ctrl_out_V_data_V_1_load_B;
reg   [1:0] enc_ctrl_out_V_data_V_1_state;
wire    enc_ctrl_out_V_data_V_1_state_cmp_full;
wire   [0:0] enc_ctrl_out_V_last_V_1_data_out;
reg    enc_ctrl_out_V_last_V_1_vld_in;
wire    enc_ctrl_out_V_last_V_1_vld_out;
wire    enc_ctrl_out_V_last_V_1_ack_in;
wire    enc_ctrl_out_V_last_V_1_ack_out;
reg    enc_ctrl_out_V_last_V_1_sel_rd;
wire    enc_ctrl_out_V_last_V_1_sel;
reg   [1:0] enc_ctrl_out_V_last_V_1_state;
reg   [63:0] enc_keep_ctrl_V_V_1_data_out;
reg    enc_keep_ctrl_V_V_1_vld_in;
wire    enc_keep_ctrl_V_V_1_vld_out;
wire    enc_keep_ctrl_V_V_1_ack_in;
wire    enc_keep_ctrl_V_V_1_ack_out;
reg   [63:0] enc_keep_ctrl_V_V_1_payload_A;
reg   [63:0] enc_keep_ctrl_V_V_1_payload_B;
reg    enc_keep_ctrl_V_V_1_sel_rd;
reg    enc_keep_ctrl_V_V_1_sel_wr;
wire    enc_keep_ctrl_V_V_1_sel;
wire    enc_keep_ctrl_V_V_1_load_A;
wire    enc_keep_ctrl_V_V_1_load_B;
reg   [1:0] enc_keep_ctrl_V_V_1_state;
wire    enc_keep_ctrl_V_V_1_state_cmp_full;
reg   [63:0] dec_keep_ctrl_V_V_1_data_out;
reg    dec_keep_ctrl_V_V_1_vld_in;
wire    dec_keep_ctrl_V_V_1_vld_out;
wire    dec_keep_ctrl_V_V_1_ack_in;
wire    dec_keep_ctrl_V_V_1_ack_out;
reg   [63:0] dec_keep_ctrl_V_V_1_payload_A;
reg   [63:0] dec_keep_ctrl_V_V_1_payload_B;
reg    dec_keep_ctrl_V_V_1_sel_rd;
reg    dec_keep_ctrl_V_V_1_sel_wr;
wire    dec_keep_ctrl_V_V_1_sel;
wire    dec_keep_ctrl_V_V_1_load_A;
wire    dec_keep_ctrl_V_V_1_load_B;
reg   [1:0] dec_keep_ctrl_V_V_1_state;
wire    dec_keep_ctrl_V_V_1_state_cmp_full;
reg   [39:0] dec_ctrl_out_V_data_V_1_data_out;
reg    dec_ctrl_out_V_data_V_1_vld_in;
wire    dec_ctrl_out_V_data_V_1_vld_out;
wire    dec_ctrl_out_V_data_V_1_ack_in;
wire    dec_ctrl_out_V_data_V_1_ack_out;
reg   [39:0] dec_ctrl_out_V_data_V_1_payload_A;
reg   [39:0] dec_ctrl_out_V_data_V_1_payload_B;
reg    dec_ctrl_out_V_data_V_1_sel_rd;
reg    dec_ctrl_out_V_data_V_1_sel_wr;
wire    dec_ctrl_out_V_data_V_1_sel;
wire    dec_ctrl_out_V_data_V_1_load_A;
wire    dec_ctrl_out_V_data_V_1_load_B;
reg   [1:0] dec_ctrl_out_V_data_V_1_state;
wire    dec_ctrl_out_V_data_V_1_state_cmp_full;
wire   [0:0] dec_ctrl_out_V_last_V_1_data_out;
reg    dec_ctrl_out_V_last_V_1_vld_in;
wire    dec_ctrl_out_V_last_V_1_vld_out;
wire    dec_ctrl_out_V_last_V_1_ack_in;
wire    dec_ctrl_out_V_last_V_1_ack_out;
reg    dec_ctrl_out_V_last_V_1_sel_rd;
wire    dec_ctrl_out_V_last_V_1_sel;
reg   [1:0] dec_ctrl_out_V_last_V_1_state;
reg   [127:0] hard_data_out_V_data_V_1_data_out;
reg    hard_data_out_V_data_V_1_vld_in;
wire    hard_data_out_V_data_V_1_vld_out;
wire    hard_data_out_V_data_V_1_ack_in;
wire    hard_data_out_V_data_V_1_ack_out;
reg   [127:0] hard_data_out_V_data_V_1_payload_A;
reg   [127:0] hard_data_out_V_data_V_1_payload_B;
reg    hard_data_out_V_data_V_1_sel_rd;
reg    hard_data_out_V_data_V_1_sel_wr;
wire    hard_data_out_V_data_V_1_sel;
wire    hard_data_out_V_data_V_1_load_A;
wire    hard_data_out_V_data_V_1_load_B;
reg   [1:0] hard_data_out_V_data_V_1_state;
wire    hard_data_out_V_data_V_1_state_cmp_full;
reg   [15:0] hard_data_out_V_keep_V_1_data_out;
reg    hard_data_out_V_keep_V_1_vld_in;
wire    hard_data_out_V_keep_V_1_vld_out;
wire    hard_data_out_V_keep_V_1_ack_in;
wire    hard_data_out_V_keep_V_1_ack_out;
reg   [15:0] hard_data_out_V_keep_V_1_payload_A;
reg   [15:0] hard_data_out_V_keep_V_1_payload_B;
reg    hard_data_out_V_keep_V_1_sel_rd;
reg    hard_data_out_V_keep_V_1_sel_wr;
wire    hard_data_out_V_keep_V_1_sel;
wire    hard_data_out_V_keep_V_1_load_A;
wire    hard_data_out_V_keep_V_1_load_B;
reg   [1:0] hard_data_out_V_keep_V_1_state;
wire    hard_data_out_V_keep_V_1_state_cmp_full;
reg   [0:0] hard_data_out_V_last_V_1_data_out;
reg    hard_data_out_V_last_V_1_vld_in;
wire    hard_data_out_V_last_V_1_vld_out;
wire    hard_data_out_V_last_V_1_ack_in;
wire    hard_data_out_V_last_V_1_ack_out;
reg   [0:0] hard_data_out_V_last_V_1_payload_A;
reg   [0:0] hard_data_out_V_last_V_1_payload_B;
reg    hard_data_out_V_last_V_1_sel_rd;
reg    hard_data_out_V_last_V_1_sel_wr;
wire    hard_data_out_V_last_V_1_sel;
wire    hard_data_out_V_last_V_1_load_A;
wire    hard_data_out_V_last_V_1_load_B;
reg   [1:0] hard_data_out_V_last_V_1_state;
wire    hard_data_out_V_last_V_1_state_cmp_full;
reg    chan_ctrl_out_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_2_reg_637;
reg   [0:0] tmp_3_reg_641;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] tmp_2_reg_637_pp0_iter1_reg;
reg   [0:0] tmp_3_reg_641_pp0_iter1_reg;
reg    enc_ctrl_out_TDATA_blk_n;
reg    enc_keep_ctrl_V_V_TDATA_blk_n;
reg    dec_keep_ctrl_V_V_TDATA_blk_n;
reg    dec_ctrl_out_TDATA_blk_n;
reg    hard_data_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter13;
reg   [0:0] tmp_2_reg_637_pp0_iter12_reg;
reg    ap_enable_reg_pp0_iter14;
reg   [0:0] tmp_2_reg_637_pp0_iter13_reg;
reg    ap_rst_n_cntrl_aclk_inv;
reg   [11:0] p_s_reg_316;
reg   [63:0] dec_keep_V_read_reg_562;
reg   [63:0] enc_keep_V_read_reg_567;
reg   [15:0] source_keep_V_read_reg_572;
reg   [0:0] zero_data_V_read_reg_577;
reg   [4:0] chan_rem_V_read_reg_582;
reg   [13:0] chan_symbls_V_read_reg_587;
reg   [31:0] num_blocks_V_read_reg_592;
reg   [39:0] dec_ctrl_word_V_read_reg_597;
reg   [39:0] enc_ctrl_word_V_read_reg_602;
reg   [16:0] inv_sigma_sq_V_read_reg_607;
reg   [16:0] snr_V_read_reg_612;
reg   [0:0] skip_chan_V_read_reg_617;
reg   [2:0] mod_type_V_read_reg_622;
reg   [0:0] fec_type_V_read_reg_627;
wire   [11:0] tmp_4_fu_347_p1;
reg   [11:0] tmp_4_reg_632;
wire   [0:0] tmp_2_fu_370_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_predicate_op101_write_state3;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_predicate_op108_write_state4;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
reg    ap_block_state15_io;
wire    ap_block_state16_pp0_stage0_iter14;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_2_reg_637_pp0_iter2_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter3_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter4_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter5_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter6_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter7_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter8_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter9_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter10_reg;
reg   [0:0] tmp_2_reg_637_pp0_iter11_reg;
wire   [0:0] tmp_3_fu_376_p2;
wire   [11:0] word_cnt_V_fu_393_p2;
reg   [11:0] word_cnt_V_reg_645;
reg    ap_enable_reg_pp0_iter0;
wire  signed [63:0] cast_fu_410_p1;
wire   [0:0] tmp_last_V_fu_415_p2;
reg   [0:0] tmp_last_V_reg_656;
reg   [0:0] tmp_last_V_reg_656_pp0_iter2_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter3_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter4_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter5_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter6_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter7_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter8_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter9_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter10_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter11_reg;
reg   [0:0] tmp_last_V_reg_656_pp0_iter12_reg;
wire   [127:0] tmp_data_V_fu_540_p3;
wire   [15:0] tmp_keep_V_fu_548_p3;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
wire    grp_operator_s_fu_337_ap_start;
wire    grp_operator_s_fu_337_ap_done;
wire    grp_operator_s_fu_337_ap_idle;
wire    grp_operator_s_fu_337_ap_ready;
reg    grp_operator_s_fu_337_ap_ce;
wire   [34:0] grp_operator_s_fu_337_ap_return;
reg   [11:0] ap_phi_mux_p_s_phi_fu_320_p4;
reg   [11:0] ap_phi_mux_p_0459_1_in_phi_fu_330_p4;
wire   [11:0] ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327;
reg    grp_operator_s_fu_337_ap_start_reg;
reg   [31:0] t_V_fu_166;
wire   [31:0] block_cnt_V_fu_382_p2;
wire    ap_block_pp0_stage0_01001;
wire   [0:0] tmp_fu_359_p2;
wire   [0:0] tmp_1_fu_364_p2;
wire   [57:0] tmp4_fu_399_p8;
reg   [31:0] p_Result_s_17_fu_498_p4;
wire   [31:0] tmp_s_fu_508_p2;
wire   [3:0] tmp_7_fu_494_p1;
wire   [3:0] p_Result_3_fu_484_p4;
wire   [3:0] p_Result_1_fu_474_p4;
wire   [3:0] p_Result_s_fu_464_p4;
wire   [3:0] p_Result_8_fu_454_p4;
wire   [3:0] p_Result_6_fu_444_p4;
wire   [3:0] p_Result_4_fu_434_p4;
wire   [3:0] p_Result_2_fu_424_p4;
wire   [31:0] rnd_data_V_1_fu_420_p1;
wire   [127:0] p_Result_5_fu_514_p12;
wire    ap_CS_fsm_state17;
reg    ap_block_state17;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1310;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 chan_ctrl_out_V_1_sel_rd = 1'b0;
#0 chan_ctrl_out_V_1_sel_wr = 1'b0;
#0 chan_ctrl_out_V_1_state = 2'd0;
#0 enc_ctrl_out_V_data_V_1_sel_rd = 1'b0;
#0 enc_ctrl_out_V_data_V_1_sel_wr = 1'b0;
#0 enc_ctrl_out_V_data_V_1_state = 2'd0;
#0 enc_ctrl_out_V_last_V_1_sel_rd = 1'b0;
#0 enc_ctrl_out_V_last_V_1_state = 2'd0;
#0 enc_keep_ctrl_V_V_1_sel_rd = 1'b0;
#0 enc_keep_ctrl_V_V_1_sel_wr = 1'b0;
#0 enc_keep_ctrl_V_V_1_state = 2'd0;
#0 dec_keep_ctrl_V_V_1_sel_rd = 1'b0;
#0 dec_keep_ctrl_V_V_1_sel_wr = 1'b0;
#0 dec_keep_ctrl_V_V_1_state = 2'd0;
#0 dec_ctrl_out_V_data_V_1_sel_rd = 1'b0;
#0 dec_ctrl_out_V_data_V_1_sel_wr = 1'b0;
#0 dec_ctrl_out_V_data_V_1_state = 2'd0;
#0 dec_ctrl_out_V_last_V_1_sel_rd = 1'b0;
#0 dec_ctrl_out_V_last_V_1_state = 2'd0;
#0 hard_data_out_V_data_V_1_sel_rd = 1'b0;
#0 hard_data_out_V_data_V_1_sel_wr = 1'b0;
#0 hard_data_out_V_data_V_1_state = 2'd0;
#0 hard_data_out_V_keep_V_1_sel_rd = 1'b0;
#0 hard_data_out_V_keep_V_1_sel_wr = 1'b0;
#0 hard_data_out_V_keep_V_1_state = 2'd0;
#0 hard_data_out_V_last_V_1_sel_rd = 1'b0;
#0 hard_data_out_V_last_V_1_sel_wr = 1'b0;
#0 hard_data_out_V_last_V_1_state = 2'd0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 grp_operator_s_fu_337_ap_start_reg = 1'b0;
end

data_source_top_CNTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CNTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CNTRL_DATA_WIDTH ))
top_CNTRL_s_axi_U(
    .AWVALID(s_axi_CNTRL_AWVALID),
    .AWREADY(s_axi_CNTRL_AWREADY),
    .AWADDR(s_axi_CNTRL_AWADDR),
    .WVALID(s_axi_CNTRL_WVALID),
    .WREADY(s_axi_CNTRL_WREADY),
    .WDATA(s_axi_CNTRL_WDATA),
    .WSTRB(s_axi_CNTRL_WSTRB),
    .ARVALID(s_axi_CNTRL_ARVALID),
    .ARREADY(s_axi_CNTRL_ARREADY),
    .ARADDR(s_axi_CNTRL_ARADDR),
    .RVALID(s_axi_CNTRL_RVALID),
    .RREADY(s_axi_CNTRL_RREADY),
    .RDATA(s_axi_CNTRL_RDATA),
    .RRESP(s_axi_CNTRL_RRESP),
    .BVALID(s_axi_CNTRL_BVALID),
    .BREADY(s_axi_CNTRL_BREADY),
    .BRESP(s_axi_CNTRL_BRESP),
    .ACLK(cntrl_aclk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .fec_type_V(fec_type_V),
    .mod_type_V(mod_type_V),
    .skip_chan_V(skip_chan_V),
    .snr_V(snr_V),
    .inv_sigma_sq_V(inv_sigma_sq_V),
    .enc_ctrl_word_V(enc_ctrl_word_V),
    .dec_ctrl_word_V(dec_ctrl_word_V),
    .num_blocks_V(num_blocks_V),
    .source_words_V(source_words_V),
    .chan_symbls_V(chan_symbls_V),
    .chan_rem_V(chan_rem_V),
    .zero_data_V(zero_data_V),
    .source_keep_V(source_keep_V),
    .enc_keep_V(enc_keep_V),
    .dec_keep_V(dec_keep_V),
    .clk(ap_clk),
    .rst(ap_rst_n_cntrl_aclk_inv)
);

data_source_operator_s grp_operator_s_fu_337(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_operator_s_fu_337_ap_start),
    .ap_done(grp_operator_s_fu_337_ap_done),
    .ap_idle(grp_operator_s_fu_337_ap_idle),
    .ap_ready(grp_operator_s_fu_337_ap_ready),
    .ap_ce(grp_operator_s_fu_337_ap_ce),
    .ap_return(grp_operator_s_fu_337_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_ctrl_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_ctrl_out_V_1_ack_out == 1'b1) & (chan_ctrl_out_V_1_vld_out == 1'b1))) begin
            chan_ctrl_out_V_1_sel_rd <= ~chan_ctrl_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_ctrl_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_ctrl_out_V_1_ack_in == 1'b1) & (chan_ctrl_out_V_1_vld_in == 1'b1))) begin
            chan_ctrl_out_V_1_sel_wr <= ~chan_ctrl_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_ctrl_out_V_1_state <= 2'd0;
    end else begin
        if ((((chan_ctrl_out_V_1_state == 2'd2) & (chan_ctrl_out_V_1_vld_in == 1'b0)) | ((chan_ctrl_out_V_1_state == 2'd3) & (chan_ctrl_out_V_1_vld_in == 1'b0) & (chan_ctrl_out_V_1_ack_out == 1'b1)))) begin
            chan_ctrl_out_V_1_state <= 2'd2;
        end else if ((((chan_ctrl_out_V_1_state == 2'd1) & (chan_ctrl_out_V_1_ack_out == 1'b0)) | ((chan_ctrl_out_V_1_state == 2'd3) & (chan_ctrl_out_V_1_ack_out == 1'b0) & (chan_ctrl_out_V_1_vld_in == 1'b1)))) begin
            chan_ctrl_out_V_1_state <= 2'd1;
        end else if (((~((chan_ctrl_out_V_1_vld_in == 1'b0) & (chan_ctrl_out_V_1_ack_out == 1'b1)) & ~((chan_ctrl_out_V_1_ack_out == 1'b0) & (chan_ctrl_out_V_1_vld_in == 1'b1)) & (chan_ctrl_out_V_1_state == 2'd3)) | ((chan_ctrl_out_V_1_state == 2'd1) & (chan_ctrl_out_V_1_ack_out == 1'b1)) | ((chan_ctrl_out_V_1_state == 2'd2) & (chan_ctrl_out_V_1_vld_in == 1'b1)))) begin
            chan_ctrl_out_V_1_state <= 2'd3;
        end else begin
            chan_ctrl_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_ctrl_out_V_data_V_1_ack_out == 1'b1) & (dec_ctrl_out_V_data_V_1_vld_out == 1'b1))) begin
            dec_ctrl_out_V_data_V_1_sel_rd <= ~dec_ctrl_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dec_ctrl_out_V_data_V_1_ack_in == 1'b1) & (dec_ctrl_out_V_data_V_1_vld_in == 1'b1))) begin
            dec_ctrl_out_V_data_V_1_sel_wr <= ~dec_ctrl_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dec_ctrl_out_V_data_V_1_state == 2'd2) & (dec_ctrl_out_V_data_V_1_vld_in == 1'b0)) | ((dec_ctrl_out_V_data_V_1_state == 2'd3) & (dec_ctrl_out_V_data_V_1_vld_in == 1'b0) & (dec_ctrl_out_V_data_V_1_ack_out == 1'b1)))) begin
            dec_ctrl_out_V_data_V_1_state <= 2'd2;
        end else if ((((dec_ctrl_out_V_data_V_1_state == 2'd1) & (dec_ctrl_out_V_data_V_1_ack_out == 1'b0)) | ((dec_ctrl_out_V_data_V_1_state == 2'd3) & (dec_ctrl_out_V_data_V_1_ack_out == 1'b0) & (dec_ctrl_out_V_data_V_1_vld_in == 1'b1)))) begin
            dec_ctrl_out_V_data_V_1_state <= 2'd1;
        end else if (((~((dec_ctrl_out_V_data_V_1_vld_in == 1'b0) & (dec_ctrl_out_V_data_V_1_ack_out == 1'b1)) & ~((dec_ctrl_out_V_data_V_1_ack_out == 1'b0) & (dec_ctrl_out_V_data_V_1_vld_in == 1'b1)) & (dec_ctrl_out_V_data_V_1_state == 2'd3)) | ((dec_ctrl_out_V_data_V_1_state == 2'd1) & (dec_ctrl_out_V_data_V_1_ack_out == 1'b1)) | ((dec_ctrl_out_V_data_V_1_state == 2'd2) & (dec_ctrl_out_V_data_V_1_vld_in == 1'b1)))) begin
            dec_ctrl_out_V_data_V_1_state <= 2'd3;
        end else begin
            dec_ctrl_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_ctrl_out_V_last_V_1_ack_out == 1'b1) & (dec_ctrl_out_V_last_V_1_vld_out == 1'b1))) begin
            dec_ctrl_out_V_last_V_1_sel_rd <= ~dec_ctrl_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_ctrl_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dec_ctrl_out_V_last_V_1_state == 2'd2) & (dec_ctrl_out_V_last_V_1_vld_in == 1'b0)) | ((dec_ctrl_out_V_last_V_1_state == 2'd3) & (dec_ctrl_out_V_last_V_1_vld_in == 1'b0) & (dec_ctrl_out_V_last_V_1_ack_out == 1'b1)))) begin
            dec_ctrl_out_V_last_V_1_state <= 2'd2;
        end else if ((((dec_ctrl_out_V_last_V_1_state == 2'd1) & (dec_ctrl_out_V_last_V_1_ack_out == 1'b0)) | ((dec_ctrl_out_V_last_V_1_state == 2'd3) & (dec_ctrl_out_V_last_V_1_ack_out == 1'b0) & (dec_ctrl_out_V_last_V_1_vld_in == 1'b1)))) begin
            dec_ctrl_out_V_last_V_1_state <= 2'd1;
        end else if (((~((dec_ctrl_out_V_last_V_1_vld_in == 1'b0) & (dec_ctrl_out_V_last_V_1_ack_out == 1'b1)) & ~((dec_ctrl_out_V_last_V_1_ack_out == 1'b0) & (dec_ctrl_out_V_last_V_1_vld_in == 1'b1)) & (dec_ctrl_out_V_last_V_1_state == 2'd3)) | ((dec_ctrl_out_V_last_V_1_state == 2'd1) & (dec_ctrl_out_V_last_V_1_ack_out == 1'b1)) | ((dec_ctrl_out_V_last_V_1_state == 2'd2) & (dec_ctrl_out_V_last_V_1_vld_in == 1'b1)))) begin
            dec_ctrl_out_V_last_V_1_state <= 2'd3;
        end else begin
            dec_ctrl_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_keep_ctrl_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dec_keep_ctrl_V_V_1_ack_out == 1'b1) & (dec_keep_ctrl_V_V_1_vld_out == 1'b1))) begin
            dec_keep_ctrl_V_V_1_sel_rd <= ~dec_keep_ctrl_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_keep_ctrl_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dec_keep_ctrl_V_V_1_ack_in == 1'b1) & (dec_keep_ctrl_V_V_1_vld_in == 1'b1))) begin
            dec_keep_ctrl_V_V_1_sel_wr <= ~dec_keep_ctrl_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dec_keep_ctrl_V_V_1_state <= 2'd0;
    end else begin
        if ((((dec_keep_ctrl_V_V_1_state == 2'd2) & (dec_keep_ctrl_V_V_1_vld_in == 1'b0)) | ((dec_keep_ctrl_V_V_1_state == 2'd3) & (dec_keep_ctrl_V_V_1_vld_in == 1'b0) & (dec_keep_ctrl_V_V_1_ack_out == 1'b1)))) begin
            dec_keep_ctrl_V_V_1_state <= 2'd2;
        end else if ((((dec_keep_ctrl_V_V_1_state == 2'd1) & (dec_keep_ctrl_V_V_1_ack_out == 1'b0)) | ((dec_keep_ctrl_V_V_1_state == 2'd3) & (dec_keep_ctrl_V_V_1_ack_out == 1'b0) & (dec_keep_ctrl_V_V_1_vld_in == 1'b1)))) begin
            dec_keep_ctrl_V_V_1_state <= 2'd1;
        end else if (((~((dec_keep_ctrl_V_V_1_vld_in == 1'b0) & (dec_keep_ctrl_V_V_1_ack_out == 1'b1)) & ~((dec_keep_ctrl_V_V_1_ack_out == 1'b0) & (dec_keep_ctrl_V_V_1_vld_in == 1'b1)) & (dec_keep_ctrl_V_V_1_state == 2'd3)) | ((dec_keep_ctrl_V_V_1_state == 2'd1) & (dec_keep_ctrl_V_V_1_ack_out == 1'b1)) | ((dec_keep_ctrl_V_V_1_state == 2'd2) & (dec_keep_ctrl_V_V_1_vld_in == 1'b1)))) begin
            dec_keep_ctrl_V_V_1_state <= 2'd3;
        end else begin
            dec_keep_ctrl_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_ctrl_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((enc_ctrl_out_V_data_V_1_ack_out == 1'b1) & (enc_ctrl_out_V_data_V_1_vld_out == 1'b1))) begin
            enc_ctrl_out_V_data_V_1_sel_rd <= ~enc_ctrl_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_ctrl_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((enc_ctrl_out_V_data_V_1_ack_in == 1'b1) & (enc_ctrl_out_V_data_V_1_vld_in == 1'b1))) begin
            enc_ctrl_out_V_data_V_1_sel_wr <= ~enc_ctrl_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_ctrl_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((enc_ctrl_out_V_data_V_1_state == 2'd2) & (enc_ctrl_out_V_data_V_1_vld_in == 1'b0)) | ((enc_ctrl_out_V_data_V_1_state == 2'd3) & (enc_ctrl_out_V_data_V_1_vld_in == 1'b0) & (enc_ctrl_out_V_data_V_1_ack_out == 1'b1)))) begin
            enc_ctrl_out_V_data_V_1_state <= 2'd2;
        end else if ((((enc_ctrl_out_V_data_V_1_state == 2'd1) & (enc_ctrl_out_V_data_V_1_ack_out == 1'b0)) | ((enc_ctrl_out_V_data_V_1_state == 2'd3) & (enc_ctrl_out_V_data_V_1_ack_out == 1'b0) & (enc_ctrl_out_V_data_V_1_vld_in == 1'b1)))) begin
            enc_ctrl_out_V_data_V_1_state <= 2'd1;
        end else if (((~((enc_ctrl_out_V_data_V_1_vld_in == 1'b0) & (enc_ctrl_out_V_data_V_1_ack_out == 1'b1)) & ~((enc_ctrl_out_V_data_V_1_ack_out == 1'b0) & (enc_ctrl_out_V_data_V_1_vld_in == 1'b1)) & (enc_ctrl_out_V_data_V_1_state == 2'd3)) | ((enc_ctrl_out_V_data_V_1_state == 2'd1) & (enc_ctrl_out_V_data_V_1_ack_out == 1'b1)) | ((enc_ctrl_out_V_data_V_1_state == 2'd2) & (enc_ctrl_out_V_data_V_1_vld_in == 1'b1)))) begin
            enc_ctrl_out_V_data_V_1_state <= 2'd3;
        end else begin
            enc_ctrl_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_ctrl_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((enc_ctrl_out_V_last_V_1_ack_out == 1'b1) & (enc_ctrl_out_V_last_V_1_vld_out == 1'b1))) begin
            enc_ctrl_out_V_last_V_1_sel_rd <= ~enc_ctrl_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_ctrl_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((enc_ctrl_out_V_last_V_1_state == 2'd2) & (enc_ctrl_out_V_last_V_1_vld_in == 1'b0)) | ((enc_ctrl_out_V_last_V_1_state == 2'd3) & (enc_ctrl_out_V_last_V_1_vld_in == 1'b0) & (enc_ctrl_out_V_last_V_1_ack_out == 1'b1)))) begin
            enc_ctrl_out_V_last_V_1_state <= 2'd2;
        end else if ((((enc_ctrl_out_V_last_V_1_state == 2'd1) & (enc_ctrl_out_V_last_V_1_ack_out == 1'b0)) | ((enc_ctrl_out_V_last_V_1_state == 2'd3) & (enc_ctrl_out_V_last_V_1_ack_out == 1'b0) & (enc_ctrl_out_V_last_V_1_vld_in == 1'b1)))) begin
            enc_ctrl_out_V_last_V_1_state <= 2'd1;
        end else if (((~((enc_ctrl_out_V_last_V_1_vld_in == 1'b0) & (enc_ctrl_out_V_last_V_1_ack_out == 1'b1)) & ~((enc_ctrl_out_V_last_V_1_ack_out == 1'b0) & (enc_ctrl_out_V_last_V_1_vld_in == 1'b1)) & (enc_ctrl_out_V_last_V_1_state == 2'd3)) | ((enc_ctrl_out_V_last_V_1_state == 2'd1) & (enc_ctrl_out_V_last_V_1_ack_out == 1'b1)) | ((enc_ctrl_out_V_last_V_1_state == 2'd2) & (enc_ctrl_out_V_last_V_1_vld_in == 1'b1)))) begin
            enc_ctrl_out_V_last_V_1_state <= 2'd3;
        end else begin
            enc_ctrl_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_keep_ctrl_V_V_1_sel_rd <= 1'b0;
    end else begin
        if (((enc_keep_ctrl_V_V_1_ack_out == 1'b1) & (enc_keep_ctrl_V_V_1_vld_out == 1'b1))) begin
            enc_keep_ctrl_V_V_1_sel_rd <= ~enc_keep_ctrl_V_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_keep_ctrl_V_V_1_sel_wr <= 1'b0;
    end else begin
        if (((enc_keep_ctrl_V_V_1_ack_in == 1'b1) & (enc_keep_ctrl_V_V_1_vld_in == 1'b1))) begin
            enc_keep_ctrl_V_V_1_sel_wr <= ~enc_keep_ctrl_V_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        enc_keep_ctrl_V_V_1_state <= 2'd0;
    end else begin
        if ((((enc_keep_ctrl_V_V_1_state == 2'd2) & (enc_keep_ctrl_V_V_1_vld_in == 1'b0)) | ((enc_keep_ctrl_V_V_1_state == 2'd3) & (enc_keep_ctrl_V_V_1_vld_in == 1'b0) & (enc_keep_ctrl_V_V_1_ack_out == 1'b1)))) begin
            enc_keep_ctrl_V_V_1_state <= 2'd2;
        end else if ((((enc_keep_ctrl_V_V_1_state == 2'd1) & (enc_keep_ctrl_V_V_1_ack_out == 1'b0)) | ((enc_keep_ctrl_V_V_1_state == 2'd3) & (enc_keep_ctrl_V_V_1_ack_out == 1'b0) & (enc_keep_ctrl_V_V_1_vld_in == 1'b1)))) begin
            enc_keep_ctrl_V_V_1_state <= 2'd1;
        end else if (((~((enc_keep_ctrl_V_V_1_vld_in == 1'b0) & (enc_keep_ctrl_V_V_1_ack_out == 1'b1)) & ~((enc_keep_ctrl_V_V_1_ack_out == 1'b0) & (enc_keep_ctrl_V_V_1_vld_in == 1'b1)) & (enc_keep_ctrl_V_V_1_state == 2'd3)) | ((enc_keep_ctrl_V_V_1_state == 2'd1) & (enc_keep_ctrl_V_V_1_ack_out == 1'b1)) | ((enc_keep_ctrl_V_V_1_state == 2'd2) & (enc_keep_ctrl_V_V_1_vld_in == 1'b1)))) begin
            enc_keep_ctrl_V_V_1_state <= 2'd3;
        end else begin
            enc_keep_ctrl_V_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_operator_s_fu_337_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_operator_s_fu_337_ap_start_reg <= 1'b1;
        end else if ((grp_operator_s_fu_337_ap_ready == 1'b1)) begin
            grp_operator_s_fu_337_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((hard_data_out_V_data_V_1_ack_out == 1'b1) & (hard_data_out_V_data_V_1_vld_out == 1'b1))) begin
            hard_data_out_V_data_V_1_sel_rd <= ~hard_data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((hard_data_out_V_data_V_1_ack_in == 1'b1) & (hard_data_out_V_data_V_1_vld_in == 1'b1))) begin
            hard_data_out_V_data_V_1_sel_wr <= ~hard_data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((hard_data_out_V_data_V_1_state == 2'd2) & (hard_data_out_V_data_V_1_vld_in == 1'b0)) | ((hard_data_out_V_data_V_1_state == 2'd3) & (hard_data_out_V_data_V_1_vld_in == 1'b0) & (hard_data_out_V_data_V_1_ack_out == 1'b1)))) begin
            hard_data_out_V_data_V_1_state <= 2'd2;
        end else if ((((hard_data_out_V_data_V_1_state == 2'd1) & (hard_data_out_V_data_V_1_ack_out == 1'b0)) | ((hard_data_out_V_data_V_1_state == 2'd3) & (hard_data_out_V_data_V_1_ack_out == 1'b0) & (hard_data_out_V_data_V_1_vld_in == 1'b1)))) begin
            hard_data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((hard_data_out_V_data_V_1_vld_in == 1'b0) & (hard_data_out_V_data_V_1_ack_out == 1'b1)) & ~((hard_data_out_V_data_V_1_ack_out == 1'b0) & (hard_data_out_V_data_V_1_vld_in == 1'b1)) & (hard_data_out_V_data_V_1_state == 2'd3)) | ((hard_data_out_V_data_V_1_state == 2'd1) & (hard_data_out_V_data_V_1_ack_out == 1'b1)) | ((hard_data_out_V_data_V_1_state == 2'd2) & (hard_data_out_V_data_V_1_vld_in == 1'b1)))) begin
            hard_data_out_V_data_V_1_state <= 2'd3;
        end else begin
            hard_data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((hard_data_out_V_keep_V_1_ack_out == 1'b1) & (hard_data_out_V_keep_V_1_vld_out == 1'b1))) begin
            hard_data_out_V_keep_V_1_sel_rd <= ~hard_data_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((hard_data_out_V_keep_V_1_ack_in == 1'b1) & (hard_data_out_V_keep_V_1_vld_in == 1'b1))) begin
            hard_data_out_V_keep_V_1_sel_wr <= ~hard_data_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((hard_data_out_V_keep_V_1_state == 2'd2) & (hard_data_out_V_keep_V_1_vld_in == 1'b0)) | ((hard_data_out_V_keep_V_1_state == 2'd3) & (hard_data_out_V_keep_V_1_vld_in == 1'b0) & (hard_data_out_V_keep_V_1_ack_out == 1'b1)))) begin
            hard_data_out_V_keep_V_1_state <= 2'd2;
        end else if ((((hard_data_out_V_keep_V_1_state == 2'd1) & (hard_data_out_V_keep_V_1_ack_out == 1'b0)) | ((hard_data_out_V_keep_V_1_state == 2'd3) & (hard_data_out_V_keep_V_1_ack_out == 1'b0) & (hard_data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            hard_data_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((hard_data_out_V_keep_V_1_vld_in == 1'b0) & (hard_data_out_V_keep_V_1_ack_out == 1'b1)) & ~((hard_data_out_V_keep_V_1_ack_out == 1'b0) & (hard_data_out_V_keep_V_1_vld_in == 1'b1)) & (hard_data_out_V_keep_V_1_state == 2'd3)) | ((hard_data_out_V_keep_V_1_state == 2'd1) & (hard_data_out_V_keep_V_1_ack_out == 1'b1)) | ((hard_data_out_V_keep_V_1_state == 2'd2) & (hard_data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            hard_data_out_V_keep_V_1_state <= 2'd3;
        end else begin
            hard_data_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((hard_data_out_V_last_V_1_ack_out == 1'b1) & (hard_data_out_V_last_V_1_vld_out == 1'b1))) begin
            hard_data_out_V_last_V_1_sel_rd <= ~hard_data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((hard_data_out_V_last_V_1_ack_in == 1'b1) & (hard_data_out_V_last_V_1_vld_in == 1'b1))) begin
            hard_data_out_V_last_V_1_sel_wr <= ~hard_data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((hard_data_out_V_last_V_1_state == 2'd2) & (hard_data_out_V_last_V_1_vld_in == 1'b0)) | ((hard_data_out_V_last_V_1_state == 2'd3) & (hard_data_out_V_last_V_1_vld_in == 1'b0) & (hard_data_out_V_last_V_1_ack_out == 1'b1)))) begin
            hard_data_out_V_last_V_1_state <= 2'd2;
        end else if ((((hard_data_out_V_last_V_1_state == 2'd1) & (hard_data_out_V_last_V_1_ack_out == 1'b0)) | ((hard_data_out_V_last_V_1_state == 2'd3) & (hard_data_out_V_last_V_1_ack_out == 1'b0) & (hard_data_out_V_last_V_1_vld_in == 1'b1)))) begin
            hard_data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((hard_data_out_V_last_V_1_vld_in == 1'b0) & (hard_data_out_V_last_V_1_ack_out == 1'b1)) & ~((hard_data_out_V_last_V_1_ack_out == 1'b0) & (hard_data_out_V_last_V_1_vld_in == 1'b1)) & (hard_data_out_V_last_V_1_state == 2'd3)) | ((hard_data_out_V_last_V_1_state == 2'd1) & (hard_data_out_V_last_V_1_ack_out == 1'b1)) | ((hard_data_out_V_last_V_1_state == 2'd2) & (hard_data_out_V_last_V_1_vld_in == 1'b1)))) begin
            hard_data_out_V_last_V_1_state <= 2'd3;
        end else begin
            hard_data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_637 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_s_reg_316 <= word_cnt_V_reg_645;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_s_reg_316 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_3_fu_376_p2 == 1'd1) & (tmp_2_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_fu_166 <= block_cnt_V_fu_382_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        t_V_fu_166 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_ctrl_out_V_1_load_A == 1'b1)) begin
        chan_ctrl_out_V_1_payload_A <= cast_fu_410_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_ctrl_out_V_1_load_B == 1'b1)) begin
        chan_ctrl_out_V_1_payload_B <= cast_fu_410_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        chan_rem_V_read_reg_582 <= chan_rem_V;
        chan_symbls_V_read_reg_587 <= chan_symbls_V;
        dec_ctrl_word_V_read_reg_597 <= dec_ctrl_word_V;
        dec_keep_V_read_reg_562 <= dec_keep_V;
        enc_ctrl_word_V_read_reg_602 <= enc_ctrl_word_V;
        enc_keep_V_read_reg_567 <= enc_keep_V;
        fec_type_V_read_reg_627 <= fec_type_V;
        inv_sigma_sq_V_read_reg_607 <= inv_sigma_sq_V;
        mod_type_V_read_reg_622 <= mod_type_V;
        num_blocks_V_read_reg_592 <= num_blocks_V;
        skip_chan_V_read_reg_617 <= skip_chan_V;
        snr_V_read_reg_612 <= snr_V;
        source_keep_V_read_reg_572 <= source_keep_V;
        tmp_4_reg_632 <= tmp_4_fu_347_p1;
        zero_data_V_read_reg_577 <= zero_data_V;
    end
end

always @ (posedge ap_clk) begin
    if ((dec_ctrl_out_V_data_V_1_load_A == 1'b1)) begin
        dec_ctrl_out_V_data_V_1_payload_A <= dec_ctrl_word_V_read_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if ((dec_ctrl_out_V_data_V_1_load_B == 1'b1)) begin
        dec_ctrl_out_V_data_V_1_payload_B <= dec_ctrl_word_V_read_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if ((dec_keep_ctrl_V_V_1_load_A == 1'b1)) begin
        dec_keep_ctrl_V_V_1_payload_A <= dec_keep_V_read_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if ((dec_keep_ctrl_V_V_1_load_B == 1'b1)) begin
        dec_keep_ctrl_V_V_1_payload_B <= dec_keep_V_read_reg_562;
    end
end

always @ (posedge ap_clk) begin
    if ((enc_ctrl_out_V_data_V_1_load_A == 1'b1)) begin
        enc_ctrl_out_V_data_V_1_payload_A <= enc_ctrl_word_V_read_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if ((enc_ctrl_out_V_data_V_1_load_B == 1'b1)) begin
        enc_ctrl_out_V_data_V_1_payload_B <= enc_ctrl_word_V_read_reg_602;
    end
end

always @ (posedge ap_clk) begin
    if ((enc_keep_ctrl_V_V_1_load_A == 1'b1)) begin
        enc_keep_ctrl_V_V_1_payload_A <= enc_keep_V_read_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if ((enc_keep_ctrl_V_V_1_load_B == 1'b1)) begin
        enc_keep_ctrl_V_V_1_payload_B <= enc_keep_V_read_reg_567;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_out_V_data_V_1_load_A == 1'b1)) begin
        hard_data_out_V_data_V_1_payload_A <= tmp_data_V_fu_540_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_out_V_data_V_1_load_B == 1'b1)) begin
        hard_data_out_V_data_V_1_payload_B <= tmp_data_V_fu_540_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_out_V_keep_V_1_load_A == 1'b1)) begin
        hard_data_out_V_keep_V_1_payload_A <= tmp_keep_V_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_out_V_keep_V_1_load_B == 1'b1)) begin
        hard_data_out_V_keep_V_1_payload_B <= tmp_keep_V_fu_548_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_out_V_last_V_1_load_A == 1'b1)) begin
        hard_data_out_V_last_V_1_payload_A <= tmp_last_V_reg_656_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_out_V_last_V_1_load_B == 1'b1)) begin
        hard_data_out_V_last_V_1_payload_B <= tmp_last_V_reg_656_pp0_iter12_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_2_reg_637 <= tmp_2_fu_370_p2;
        tmp_2_reg_637_pp0_iter1_reg <= tmp_2_reg_637;
        tmp_3_reg_641_pp0_iter1_reg <= tmp_3_reg_641;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_2_reg_637_pp0_iter10_reg <= tmp_2_reg_637_pp0_iter9_reg;
        tmp_2_reg_637_pp0_iter11_reg <= tmp_2_reg_637_pp0_iter10_reg;
        tmp_2_reg_637_pp0_iter12_reg <= tmp_2_reg_637_pp0_iter11_reg;
        tmp_2_reg_637_pp0_iter13_reg <= tmp_2_reg_637_pp0_iter12_reg;
        tmp_2_reg_637_pp0_iter2_reg <= tmp_2_reg_637_pp0_iter1_reg;
        tmp_2_reg_637_pp0_iter3_reg <= tmp_2_reg_637_pp0_iter2_reg;
        tmp_2_reg_637_pp0_iter4_reg <= tmp_2_reg_637_pp0_iter3_reg;
        tmp_2_reg_637_pp0_iter5_reg <= tmp_2_reg_637_pp0_iter4_reg;
        tmp_2_reg_637_pp0_iter6_reg <= tmp_2_reg_637_pp0_iter5_reg;
        tmp_2_reg_637_pp0_iter7_reg <= tmp_2_reg_637_pp0_iter6_reg;
        tmp_2_reg_637_pp0_iter8_reg <= tmp_2_reg_637_pp0_iter7_reg;
        tmp_2_reg_637_pp0_iter9_reg <= tmp_2_reg_637_pp0_iter8_reg;
        tmp_last_V_reg_656_pp0_iter10_reg <= tmp_last_V_reg_656_pp0_iter9_reg;
        tmp_last_V_reg_656_pp0_iter11_reg <= tmp_last_V_reg_656_pp0_iter10_reg;
        tmp_last_V_reg_656_pp0_iter12_reg <= tmp_last_V_reg_656_pp0_iter11_reg;
        tmp_last_V_reg_656_pp0_iter2_reg <= tmp_last_V_reg_656;
        tmp_last_V_reg_656_pp0_iter3_reg <= tmp_last_V_reg_656_pp0_iter2_reg;
        tmp_last_V_reg_656_pp0_iter4_reg <= tmp_last_V_reg_656_pp0_iter3_reg;
        tmp_last_V_reg_656_pp0_iter5_reg <= tmp_last_V_reg_656_pp0_iter4_reg;
        tmp_last_V_reg_656_pp0_iter6_reg <= tmp_last_V_reg_656_pp0_iter5_reg;
        tmp_last_V_reg_656_pp0_iter7_reg <= tmp_last_V_reg_656_pp0_iter6_reg;
        tmp_last_V_reg_656_pp0_iter8_reg <= tmp_last_V_reg_656_pp0_iter7_reg;
        tmp_last_V_reg_656_pp0_iter9_reg <= tmp_last_V_reg_656_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_fu_370_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_3_reg_641 <= tmp_3_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_637 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_last_V_reg_656 <= tmp_last_V_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        word_cnt_V_reg_645 <= word_cnt_V_fu_393_p2;
    end
end

always @ (*) begin
    if ((tmp_2_fu_370_p2 == 1'd0)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((~((hard_data_out_V_last_V_1_ack_in == 1'b0) | (hard_data_out_V_keep_V_1_ack_in == 1'b0) | (chan_ctrl_out_V_1_ack_in == 1'b0) | (hard_data_out_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_last_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_data_V_1_ack_in == 1'b0) | (dec_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_last_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_1310)) begin
        if ((tmp_3_fu_376_p2 == 1'd0)) begin
            ap_phi_mux_p_0459_1_in_phi_fu_330_p4 = ap_phi_mux_p_s_phi_fu_320_p4;
        end else if ((tmp_3_fu_376_p2 == 1'd1)) begin
            ap_phi_mux_p_0459_1_in_phi_fu_330_p4 = tmp_4_reg_632;
        end else begin
            ap_phi_mux_p_0459_1_in_phi_fu_330_p4 = ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327;
        end
    end else begin
        ap_phi_mux_p_0459_1_in_phi_fu_330_p4 = ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_2_reg_637 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_p_s_phi_fu_320_p4 = word_cnt_V_reg_645;
    end else begin
        ap_phi_mux_p_s_phi_fu_320_p4 = p_s_reg_316;
    end
end

always @ (*) begin
    if ((~((hard_data_out_V_last_V_1_ack_in == 1'b0) | (hard_data_out_V_keep_V_1_ack_in == 1'b0) | (chan_ctrl_out_V_1_ack_in == 1'b0) | (hard_data_out_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_last_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_data_V_1_ack_in == 1'b0) | (dec_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_last_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((chan_ctrl_out_V_1_sel == 1'b1)) begin
        chan_ctrl_out_V_1_data_out = chan_ctrl_out_V_1_payload_B;
    end else begin
        chan_ctrl_out_V_1_data_out = chan_ctrl_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        chan_ctrl_out_V_1_vld_in = 1'b1;
    end else begin
        chan_ctrl_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641_pp0_iter1_reg == 1'd1) & (tmp_2_reg_637_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641 == 1'd1) & (tmp_2_reg_637 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        chan_ctrl_out_V_TDATA_blk_n = chan_ctrl_out_V_1_state[1'd1];
    end else begin
        chan_ctrl_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641_pp0_iter1_reg == 1'd1) & (tmp_2_reg_637_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641 == 1'd1) & (tmp_2_reg_637 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dec_ctrl_out_TDATA_blk_n = dec_ctrl_out_V_data_V_1_state[1'd1];
    end else begin
        dec_ctrl_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dec_ctrl_out_V_data_V_1_sel == 1'b1)) begin
        dec_ctrl_out_V_data_V_1_data_out = dec_ctrl_out_V_data_V_1_payload_B;
    end else begin
        dec_ctrl_out_V_data_V_1_data_out = dec_ctrl_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dec_ctrl_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        dec_ctrl_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dec_ctrl_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        dec_ctrl_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dec_keep_ctrl_V_V_1_sel == 1'b1)) begin
        dec_keep_ctrl_V_V_1_data_out = dec_keep_ctrl_V_V_1_payload_B;
    end else begin
        dec_keep_ctrl_V_V_1_data_out = dec_keep_ctrl_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dec_keep_ctrl_V_V_1_vld_in = 1'b1;
    end else begin
        dec_keep_ctrl_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641_pp0_iter1_reg == 1'd1) & (tmp_2_reg_637_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641 == 1'd1) & (tmp_2_reg_637 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        dec_keep_ctrl_V_V_TDATA_blk_n = dec_keep_ctrl_V_V_1_state[1'd1];
    end else begin
        dec_keep_ctrl_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641_pp0_iter1_reg == 1'd1) & (tmp_2_reg_637_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641 == 1'd1) & (tmp_2_reg_637 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        enc_ctrl_out_TDATA_blk_n = enc_ctrl_out_V_data_V_1_state[1'd1];
    end else begin
        enc_ctrl_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((enc_ctrl_out_V_data_V_1_sel == 1'b1)) begin
        enc_ctrl_out_V_data_V_1_data_out = enc_ctrl_out_V_data_V_1_payload_B;
    end else begin
        enc_ctrl_out_V_data_V_1_data_out = enc_ctrl_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        enc_ctrl_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        enc_ctrl_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        enc_ctrl_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        enc_ctrl_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((enc_keep_ctrl_V_V_1_sel == 1'b1)) begin
        enc_keep_ctrl_V_V_1_data_out = enc_keep_ctrl_V_V_1_payload_B;
    end else begin
        enc_keep_ctrl_V_V_1_data_out = enc_keep_ctrl_V_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op101_write_state3 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        enc_keep_ctrl_V_V_1_vld_in = 1'b1;
    end else begin
        enc_keep_ctrl_V_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641_pp0_iter1_reg == 1'd1) & (tmp_2_reg_637_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_3_reg_641 == 1'd1) & (tmp_2_reg_637 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        enc_keep_ctrl_V_V_TDATA_blk_n = enc_keep_ctrl_V_V_1_state[1'd1];
    end else begin
        enc_keep_ctrl_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_2_reg_637_pp0_iter11_reg == 1'd1) | (tmp_2_reg_637_pp0_iter10_reg == 1'd1) | (tmp_2_reg_637_pp0_iter9_reg == 1'd1) | (tmp_2_reg_637_pp0_iter8_reg == 1'd1) | (tmp_2_reg_637_pp0_iter7_reg == 1'd1) | (tmp_2_reg_637_pp0_iter6_reg == 1'd1) | (tmp_2_reg_637_pp0_iter5_reg == 1'd1) | (tmp_2_reg_637_pp0_iter4_reg == 1'd1) | (tmp_2_reg_637_pp0_iter3_reg == 1'd1) | (tmp_2_reg_637_pp0_iter2_reg == 1'd1) | (tmp_2_reg_637_pp0_iter12_reg == 1'd1) | (tmp_2_reg_637_pp0_iter1_reg == 1'd1) | (tmp_2_reg_637 == 1'd1)))) begin
        grp_operator_s_fu_337_ap_ce = 1'b1;
    end else begin
        grp_operator_s_fu_337_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_2_reg_637_pp0_iter13_reg == 1'd1) & (ap_enable_reg_pp0_iter14 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_2_reg_637_pp0_iter12_reg == 1'd1) & (ap_enable_reg_pp0_iter13 == 1'b1)))) begin
        hard_data_out_TDATA_blk_n = hard_data_out_V_data_V_1_state[1'd1];
    end else begin
        hard_data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((hard_data_out_V_data_V_1_sel == 1'b1)) begin
        hard_data_out_V_data_V_1_data_out = hard_data_out_V_data_V_1_payload_B;
    end else begin
        hard_data_out_V_data_V_1_data_out = hard_data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_637_pp0_iter12_reg == 1'd1) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        hard_data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        hard_data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((hard_data_out_V_keep_V_1_sel == 1'b1)) begin
        hard_data_out_V_keep_V_1_data_out = hard_data_out_V_keep_V_1_payload_B;
    end else begin
        hard_data_out_V_keep_V_1_data_out = hard_data_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_637_pp0_iter12_reg == 1'd1) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        hard_data_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        hard_data_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((hard_data_out_V_last_V_1_sel == 1'b1)) begin
        hard_data_out_V_last_V_1_data_out = hard_data_out_V_last_V_1_payload_B;
    end else begin
        hard_data_out_V_last_V_1_data_out = hard_data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_2_reg_637_pp0_iter12_reg == 1'd1) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
        hard_data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        hard_data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_2_fu_370_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_2_fu_370_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            if ((~((hard_data_out_V_last_V_1_ack_in == 1'b0) | (hard_data_out_V_keep_V_1_ack_in == 1'b0) | (chan_ctrl_out_V_1_ack_in == 1'b0) | (hard_data_out_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_last_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_data_V_1_ack_in == 1'b0) | (dec_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_last_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter14 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp0_iter14 == 1'b1)) | ((1'b1 == ap_block_state15_io) & (ap_enable_reg_pp0_iter13 == 1'b1)) | ((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((tmp_2_reg_637_pp0_iter12_reg == 1'd1) & (hard_data_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((tmp_2_reg_637_pp0_iter13_reg == 1'd1) & (hard_data_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17 = ((hard_data_out_V_last_V_1_ack_in == 1'b0) | (hard_data_out_V_keep_V_1_ack_in == 1'b0) | (chan_ctrl_out_V_1_ack_in == 1'b0) | (hard_data_out_V_data_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_last_V_1_ack_in == 1'b0) | (dec_ctrl_out_V_data_V_1_ack_in == 1'b0) | (dec_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_keep_ctrl_V_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_last_V_1_ack_in == 1'b0) | (enc_ctrl_out_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((dec_keep_ctrl_V_V_1_ack_in == 1'b0) & (ap_predicate_op101_write_state3 == 1'b1)) | ((enc_keep_ctrl_V_V_1_ack_in == 1'b0) & (ap_predicate_op101_write_state3 == 1'b1)) | ((dec_ctrl_out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op101_write_state3 == 1'b1)) | ((enc_ctrl_out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op101_write_state3 == 1'b1)) | ((chan_ctrl_out_V_1_ack_in == 1'b0) & (ap_predicate_op101_write_state3 == 1'b1)));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((dec_keep_ctrl_V_V_1_ack_in == 1'b0) & (ap_predicate_op108_write_state4 == 1'b1)) | ((enc_keep_ctrl_V_V_1_ack_in == 1'b0) & (ap_predicate_op108_write_state4 == 1'b1)) | ((dec_ctrl_out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op108_write_state4 == 1'b1)) | ((enc_ctrl_out_V_data_V_1_ack_in == 1'b0) & (ap_predicate_op108_write_state4 == 1'b1)) | ((chan_ctrl_out_V_1_ack_in == 1'b0) & (ap_predicate_op108_write_state4 == 1'b1)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1310 = ((1'b0 == ap_block_pp0_stage0) & (tmp_2_fu_370_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_0459_1_in_reg_327 = 'bx;

always @ (*) begin
    ap_predicate_op101_write_state3 = ((tmp_3_reg_641 == 1'd1) & (tmp_2_reg_637 == 1'd1));
end

always @ (*) begin
    ap_predicate_op108_write_state4 = ((tmp_3_reg_641_pp0_iter1_reg == 1'd1) & (tmp_2_reg_637_pp0_iter1_reg == 1'd1));
end

always @ (*) begin
    ap_rst_n_cntrl_aclk_inv = ~ap_rst_n_cntrl_aclk;
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign block_cnt_V_fu_382_p2 = (t_V_fu_166 + 32'd1);

assign cast_fu_410_p1 = $signed(tmp4_fu_399_p8);

assign chan_ctrl_out_V_1_ack_in = chan_ctrl_out_V_1_state[1'd1];

assign chan_ctrl_out_V_1_ack_out = chan_ctrl_out_V_TREADY;

assign chan_ctrl_out_V_1_load_A = (~chan_ctrl_out_V_1_sel_wr & chan_ctrl_out_V_1_state_cmp_full);

assign chan_ctrl_out_V_1_load_B = (chan_ctrl_out_V_1_state_cmp_full & chan_ctrl_out_V_1_sel_wr);

assign chan_ctrl_out_V_1_sel = chan_ctrl_out_V_1_sel_rd;

assign chan_ctrl_out_V_1_state_cmp_full = ((chan_ctrl_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_ctrl_out_V_1_vld_out = chan_ctrl_out_V_1_state[1'd0];

assign chan_ctrl_out_V_TDATA = chan_ctrl_out_V_1_data_out;

assign chan_ctrl_out_V_TVALID = chan_ctrl_out_V_1_state[1'd0];

assign dec_ctrl_out_TDATA = dec_ctrl_out_V_data_V_1_data_out;

assign dec_ctrl_out_TLAST = dec_ctrl_out_V_last_V_1_data_out;

assign dec_ctrl_out_TVALID = dec_ctrl_out_V_last_V_1_state[1'd0];

assign dec_ctrl_out_V_data_V_1_ack_in = dec_ctrl_out_V_data_V_1_state[1'd1];

assign dec_ctrl_out_V_data_V_1_ack_out = dec_ctrl_out_TREADY;

assign dec_ctrl_out_V_data_V_1_load_A = (~dec_ctrl_out_V_data_V_1_sel_wr & dec_ctrl_out_V_data_V_1_state_cmp_full);

assign dec_ctrl_out_V_data_V_1_load_B = (dec_ctrl_out_V_data_V_1_state_cmp_full & dec_ctrl_out_V_data_V_1_sel_wr);

assign dec_ctrl_out_V_data_V_1_sel = dec_ctrl_out_V_data_V_1_sel_rd;

assign dec_ctrl_out_V_data_V_1_state_cmp_full = ((dec_ctrl_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dec_ctrl_out_V_data_V_1_vld_out = dec_ctrl_out_V_data_V_1_state[1'd0];

assign dec_ctrl_out_V_last_V_1_ack_in = dec_ctrl_out_V_last_V_1_state[1'd1];

assign dec_ctrl_out_V_last_V_1_ack_out = dec_ctrl_out_TREADY;

assign dec_ctrl_out_V_last_V_1_data_out = 1'd1;

assign dec_ctrl_out_V_last_V_1_sel = dec_ctrl_out_V_last_V_1_sel_rd;

assign dec_ctrl_out_V_last_V_1_vld_out = dec_ctrl_out_V_last_V_1_state[1'd0];

assign dec_keep_ctrl_V_V_1_ack_in = dec_keep_ctrl_V_V_1_state[1'd1];

assign dec_keep_ctrl_V_V_1_ack_out = dec_keep_ctrl_V_V_TREADY;

assign dec_keep_ctrl_V_V_1_load_A = (~dec_keep_ctrl_V_V_1_sel_wr & dec_keep_ctrl_V_V_1_state_cmp_full);

assign dec_keep_ctrl_V_V_1_load_B = (dec_keep_ctrl_V_V_1_state_cmp_full & dec_keep_ctrl_V_V_1_sel_wr);

assign dec_keep_ctrl_V_V_1_sel = dec_keep_ctrl_V_V_1_sel_rd;

assign dec_keep_ctrl_V_V_1_state_cmp_full = ((dec_keep_ctrl_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dec_keep_ctrl_V_V_1_vld_out = dec_keep_ctrl_V_V_1_state[1'd0];

assign dec_keep_ctrl_V_V_TDATA = dec_keep_ctrl_V_V_1_data_out;

assign dec_keep_ctrl_V_V_TVALID = dec_keep_ctrl_V_V_1_state[1'd0];

assign enc_ctrl_out_TDATA = enc_ctrl_out_V_data_V_1_data_out;

assign enc_ctrl_out_TLAST = enc_ctrl_out_V_last_V_1_data_out;

assign enc_ctrl_out_TVALID = enc_ctrl_out_V_last_V_1_state[1'd0];

assign enc_ctrl_out_V_data_V_1_ack_in = enc_ctrl_out_V_data_V_1_state[1'd1];

assign enc_ctrl_out_V_data_V_1_ack_out = enc_ctrl_out_TREADY;

assign enc_ctrl_out_V_data_V_1_load_A = (~enc_ctrl_out_V_data_V_1_sel_wr & enc_ctrl_out_V_data_V_1_state_cmp_full);

assign enc_ctrl_out_V_data_V_1_load_B = (enc_ctrl_out_V_data_V_1_state_cmp_full & enc_ctrl_out_V_data_V_1_sel_wr);

assign enc_ctrl_out_V_data_V_1_sel = enc_ctrl_out_V_data_V_1_sel_rd;

assign enc_ctrl_out_V_data_V_1_state_cmp_full = ((enc_ctrl_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign enc_ctrl_out_V_data_V_1_vld_out = enc_ctrl_out_V_data_V_1_state[1'd0];

assign enc_ctrl_out_V_last_V_1_ack_in = enc_ctrl_out_V_last_V_1_state[1'd1];

assign enc_ctrl_out_V_last_V_1_ack_out = enc_ctrl_out_TREADY;

assign enc_ctrl_out_V_last_V_1_data_out = 1'd1;

assign enc_ctrl_out_V_last_V_1_sel = enc_ctrl_out_V_last_V_1_sel_rd;

assign enc_ctrl_out_V_last_V_1_vld_out = enc_ctrl_out_V_last_V_1_state[1'd0];

assign enc_keep_ctrl_V_V_1_ack_in = enc_keep_ctrl_V_V_1_state[1'd1];

assign enc_keep_ctrl_V_V_1_ack_out = enc_keep_ctrl_V_V_TREADY;

assign enc_keep_ctrl_V_V_1_load_A = (~enc_keep_ctrl_V_V_1_sel_wr & enc_keep_ctrl_V_V_1_state_cmp_full);

assign enc_keep_ctrl_V_V_1_load_B = (enc_keep_ctrl_V_V_1_state_cmp_full & enc_keep_ctrl_V_V_1_sel_wr);

assign enc_keep_ctrl_V_V_1_sel = enc_keep_ctrl_V_V_1_sel_rd;

assign enc_keep_ctrl_V_V_1_state_cmp_full = ((enc_keep_ctrl_V_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign enc_keep_ctrl_V_V_1_vld_out = enc_keep_ctrl_V_V_1_state[1'd0];

assign enc_keep_ctrl_V_V_TDATA = enc_keep_ctrl_V_V_1_data_out;

assign enc_keep_ctrl_V_V_TVALID = enc_keep_ctrl_V_V_1_state[1'd0];

assign grp_operator_s_fu_337_ap_start = grp_operator_s_fu_337_ap_start_reg;

assign hard_data_out_TDATA = hard_data_out_V_data_V_1_data_out;

assign hard_data_out_TKEEP = hard_data_out_V_keep_V_1_data_out;

assign hard_data_out_TLAST = hard_data_out_V_last_V_1_data_out;

assign hard_data_out_TVALID = hard_data_out_V_last_V_1_state[1'd0];

assign hard_data_out_V_data_V_1_ack_in = hard_data_out_V_data_V_1_state[1'd1];

assign hard_data_out_V_data_V_1_ack_out = hard_data_out_TREADY;

assign hard_data_out_V_data_V_1_load_A = (hard_data_out_V_data_V_1_state_cmp_full & ~hard_data_out_V_data_V_1_sel_wr);

assign hard_data_out_V_data_V_1_load_B = (hard_data_out_V_data_V_1_state_cmp_full & hard_data_out_V_data_V_1_sel_wr);

assign hard_data_out_V_data_V_1_sel = hard_data_out_V_data_V_1_sel_rd;

assign hard_data_out_V_data_V_1_state_cmp_full = ((hard_data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_out_V_data_V_1_vld_out = hard_data_out_V_data_V_1_state[1'd0];

assign hard_data_out_V_keep_V_1_ack_in = hard_data_out_V_keep_V_1_state[1'd1];

assign hard_data_out_V_keep_V_1_ack_out = hard_data_out_TREADY;

assign hard_data_out_V_keep_V_1_load_A = (hard_data_out_V_keep_V_1_state_cmp_full & ~hard_data_out_V_keep_V_1_sel_wr);

assign hard_data_out_V_keep_V_1_load_B = (hard_data_out_V_keep_V_1_state_cmp_full & hard_data_out_V_keep_V_1_sel_wr);

assign hard_data_out_V_keep_V_1_sel = hard_data_out_V_keep_V_1_sel_rd;

assign hard_data_out_V_keep_V_1_state_cmp_full = ((hard_data_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_out_V_keep_V_1_vld_out = hard_data_out_V_keep_V_1_state[1'd0];

assign hard_data_out_V_last_V_1_ack_in = hard_data_out_V_last_V_1_state[1'd1];

assign hard_data_out_V_last_V_1_ack_out = hard_data_out_TREADY;

assign hard_data_out_V_last_V_1_load_A = (hard_data_out_V_last_V_1_state_cmp_full & ~hard_data_out_V_last_V_1_sel_wr);

assign hard_data_out_V_last_V_1_load_B = (hard_data_out_V_last_V_1_state_cmp_full & hard_data_out_V_last_V_1_sel_wr);

assign hard_data_out_V_last_V_1_sel = hard_data_out_V_last_V_1_sel_rd;

assign hard_data_out_V_last_V_1_state_cmp_full = ((hard_data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_out_V_last_V_1_vld_out = hard_data_out_V_last_V_1_state[1'd0];

assign p_Result_1_fu_474_p4 = {{grp_operator_s_fu_337_ap_return[11:8]}};

assign p_Result_2_fu_424_p4 = {{grp_operator_s_fu_337_ap_return[31:28]}};

assign p_Result_3_fu_484_p4 = {{grp_operator_s_fu_337_ap_return[7:4]}};

assign p_Result_4_fu_434_p4 = {{grp_operator_s_fu_337_ap_return[27:24]}};

assign p_Result_5_fu_514_p12 = {{{{{{{{{{{tmp_s_fu_508_p2}, {p_Result_s_17_fu_498_p4}}, {tmp_7_fu_494_p1}}, {p_Result_3_fu_484_p4}}, {p_Result_1_fu_474_p4}}, {p_Result_s_fu_464_p4}}, {p_Result_8_fu_454_p4}}, {p_Result_6_fu_444_p4}}, {p_Result_4_fu_434_p4}}, {p_Result_2_fu_424_p4}}, {rnd_data_V_1_fu_420_p1}};

assign p_Result_6_fu_444_p4 = {{grp_operator_s_fu_337_ap_return[23:20]}};

assign p_Result_8_fu_454_p4 = {{grp_operator_s_fu_337_ap_return[19:16]}};

integer ap_tvar_int_0;

always @ (grp_operator_s_fu_337_ap_return) begin
    for (ap_tvar_int_0 = 32 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 31 - 0) begin
            p_Result_s_17_fu_498_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_17_fu_498_p4[ap_tvar_int_0] = grp_operator_s_fu_337_ap_return[31 - ap_tvar_int_0];
        end
    end
end

assign p_Result_s_fu_464_p4 = {{grp_operator_s_fu_337_ap_return[15:12]}};

assign rnd_data_V_1_fu_420_p1 = grp_operator_s_fu_337_ap_return[31:0];

assign tmp4_fu_399_p8 = {{{{{{{chan_rem_V_read_reg_582}, {chan_symbls_V_read_reg_587}}, {inv_sigma_sq_V_read_reg_607}}, {snr_V_read_reg_612}}, {skip_chan_V_read_reg_617}}, {mod_type_V_read_reg_622}}, {fec_type_V_read_reg_627}};

assign tmp_1_fu_364_p2 = ((ap_phi_mux_p_s_phi_fu_320_p4 != 12'd0) ? 1'b1 : 1'b0);

assign tmp_2_fu_370_p2 = (tmp_fu_359_p2 | tmp_1_fu_364_p2);

assign tmp_3_fu_376_p2 = ((ap_phi_mux_p_s_phi_fu_320_p4 == 12'd0) ? 1'b1 : 1'b0);

assign tmp_4_fu_347_p1 = source_words_V[11:0];

assign tmp_7_fu_494_p1 = grp_operator_s_fu_337_ap_return[3:0];

assign tmp_data_V_fu_540_p3 = ((zero_data_V_read_reg_577[0:0] === 1'b1) ? 128'd0 : p_Result_5_fu_514_p12);

assign tmp_fu_359_p2 = ((t_V_fu_166 < num_blocks_V_read_reg_592) ? 1'b1 : 1'b0);

assign tmp_keep_V_fu_548_p3 = ((tmp_last_V_reg_656_pp0_iter12_reg[0:0] === 1'b1) ? source_keep_V_read_reg_572 : 16'd65535);

assign tmp_last_V_fu_415_p2 = ((word_cnt_V_reg_645 == 12'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_508_p2 = (p_Result_s_17_fu_498_p4 ^ 32'd4294967295);

assign word_cnt_V_fu_393_p2 = ($signed(ap_phi_mux_p_0459_1_in_phi_fu_330_p4) + $signed(12'd4095));

endmodule //data_source_top
