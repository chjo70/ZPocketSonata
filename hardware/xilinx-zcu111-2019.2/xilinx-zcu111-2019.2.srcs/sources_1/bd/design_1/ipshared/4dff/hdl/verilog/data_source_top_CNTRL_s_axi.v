// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1.0
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module data_source_top_CNTRL_s_axi
#(parameter
    C_S_AXI_ADDR_WIDTH = 8,
    C_S_AXI_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                          ACLK,
    input  wire                          ARESET,
    input  wire                          ACLK_EN,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] AWADDR,
    input  wire                          AWVALID,
    output wire                          AWREADY,
    input  wire [C_S_AXI_DATA_WIDTH-1:0] WDATA,
    input  wire [C_S_AXI_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                          WVALID,
    output wire                          WREADY,
    output wire [1:0]                    BRESP,
    output wire                          BVALID,
    input  wire                          BREADY,
    input  wire [C_S_AXI_ADDR_WIDTH-1:0] ARADDR,
    input  wire                          ARVALID,
    output wire                          ARREADY,
    output wire [C_S_AXI_DATA_WIDTH-1:0] RDATA,
    output wire [1:0]                    RRESP,
    output wire                          RVALID,
    input  wire                          RREADY,
    output wire                          interrupt,
    // user signals
    input  wire                          clk,
    input  wire                          rst,
    output wire                          ap_start,
    input  wire                          ap_done,
    input  wire                          ap_ready,
    input  wire                          ap_idle,
    output wire [0:0]                    fec_type_V,
    output wire [2:0]                    mod_type_V,
    output wire [0:0]                    skip_chan_V,
    output wire [16:0]                   snr_V,
    output wire [16:0]                   inv_sigma_sq_V,
    output wire [39:0]                   enc_ctrl_word_V,
    output wire [39:0]                   dec_ctrl_word_V,
    output wire [31:0]                   num_blocks_V,
    output wire [13:0]                   source_words_V,
    output wire [13:0]                   chan_symbls_V,
    output wire [4:0]                    chan_rem_V,
    output wire [0:0]                    zero_data_V,
    output wire [15:0]                   source_keep_V,
    output wire [63:0]                   enc_keep_V,
    output wire [63:0]                   dec_keep_V
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : Data signal of fec_type_V
//        bit 0  - fec_type_V[0] (Read/Write)
//        others - reserved
// 0x14 : reserved
// 0x18 : Data signal of mod_type_V
//        bit 2~0 - mod_type_V[2:0] (Read/Write)
//        others  - reserved
// 0x1c : reserved
// 0x20 : Data signal of skip_chan_V
//        bit 0  - skip_chan_V[0] (Read/Write)
//        others - reserved
// 0x24 : reserved
// 0x28 : Data signal of snr_V
//        bit 16~0 - snr_V[16:0] (Read/Write)
//        others   - reserved
// 0x2c : reserved
// 0x30 : Data signal of inv_sigma_sq_V
//        bit 16~0 - inv_sigma_sq_V[16:0] (Read/Write)
//        others   - reserved
// 0x34 : reserved
// 0x38 : Data signal of enc_ctrl_word_V
//        bit 31~0 - enc_ctrl_word_V[31:0] (Read/Write)
// 0x3c : Data signal of enc_ctrl_word_V
//        bit 7~0 - enc_ctrl_word_V[39:32] (Read/Write)
//        others  - reserved
// 0x40 : reserved
// 0x44 : Data signal of dec_ctrl_word_V
//        bit 31~0 - dec_ctrl_word_V[31:0] (Read/Write)
// 0x48 : Data signal of dec_ctrl_word_V
//        bit 7~0 - dec_ctrl_word_V[39:32] (Read/Write)
//        others  - reserved
// 0x4c : reserved
// 0x50 : Data signal of num_blocks_V
//        bit 31~0 - num_blocks_V[31:0] (Read/Write)
// 0x54 : reserved
// 0x58 : Data signal of source_words_V
//        bit 13~0 - source_words_V[13:0] (Read/Write)
//        others   - reserved
// 0x5c : reserved
// 0x60 : Data signal of chan_symbls_V
//        bit 13~0 - chan_symbls_V[13:0] (Read/Write)
//        others   - reserved
// 0x64 : reserved
// 0x68 : Data signal of chan_rem_V
//        bit 4~0 - chan_rem_V[4:0] (Read/Write)
//        others  - reserved
// 0x6c : reserved
// 0x70 : Data signal of zero_data_V
//        bit 0  - zero_data_V[0] (Read/Write)
//        others - reserved
// 0x74 : reserved
// 0x78 : Data signal of source_keep_V
//        bit 15~0 - source_keep_V[15:0] (Read/Write)
//        others   - reserved
// 0x7c : reserved
// 0x80 : Data signal of enc_keep_V
//        bit 31~0 - enc_keep_V[31:0] (Read/Write)
// 0x84 : Data signal of enc_keep_V
//        bit 31~0 - enc_keep_V[63:32] (Read/Write)
// 0x88 : reserved
// 0x8c : Data signal of dec_keep_V
//        bit 31~0 - dec_keep_V[31:0] (Read/Write)
// 0x90 : Data signal of dec_keep_V
//        bit 31~0 - dec_keep_V[63:32] (Read/Write)
// 0x94 : reserved
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
localparam
    ADDR_AP_CTRL                = 8'h00,
    ADDR_GIE                    = 8'h04,
    ADDR_IER                    = 8'h08,
    ADDR_ISR                    = 8'h0c,
    ADDR_FEC_TYPE_V_DATA_0      = 8'h10,
    ADDR_FEC_TYPE_V_CTRL        = 8'h14,
    ADDR_MOD_TYPE_V_DATA_0      = 8'h18,
    ADDR_MOD_TYPE_V_CTRL        = 8'h1c,
    ADDR_SKIP_CHAN_V_DATA_0     = 8'h20,
    ADDR_SKIP_CHAN_V_CTRL       = 8'h24,
    ADDR_SNR_V_DATA_0           = 8'h28,
    ADDR_SNR_V_CTRL             = 8'h2c,
    ADDR_INV_SIGMA_SQ_V_DATA_0  = 8'h30,
    ADDR_INV_SIGMA_SQ_V_CTRL    = 8'h34,
    ADDR_ENC_CTRL_WORD_V_DATA_0 = 8'h38,
    ADDR_ENC_CTRL_WORD_V_DATA_1 = 8'h3c,
    ADDR_ENC_CTRL_WORD_V_CTRL   = 8'h40,
    ADDR_DEC_CTRL_WORD_V_DATA_0 = 8'h44,
    ADDR_DEC_CTRL_WORD_V_DATA_1 = 8'h48,
    ADDR_DEC_CTRL_WORD_V_CTRL   = 8'h4c,
    ADDR_NUM_BLOCKS_V_DATA_0    = 8'h50,
    ADDR_NUM_BLOCKS_V_CTRL      = 8'h54,
    ADDR_SOURCE_WORDS_V_DATA_0  = 8'h58,
    ADDR_SOURCE_WORDS_V_CTRL    = 8'h5c,
    ADDR_CHAN_SYMBLS_V_DATA_0   = 8'h60,
    ADDR_CHAN_SYMBLS_V_CTRL     = 8'h64,
    ADDR_CHAN_REM_V_DATA_0      = 8'h68,
    ADDR_CHAN_REM_V_CTRL        = 8'h6c,
    ADDR_ZERO_DATA_V_DATA_0     = 8'h70,
    ADDR_ZERO_DATA_V_CTRL       = 8'h74,
    ADDR_SOURCE_KEEP_V_DATA_0   = 8'h78,
    ADDR_SOURCE_KEEP_V_CTRL     = 8'h7c,
    ADDR_ENC_KEEP_V_DATA_0      = 8'h80,
    ADDR_ENC_KEEP_V_DATA_1      = 8'h84,
    ADDR_ENC_KEEP_V_CTRL        = 8'h88,
    ADDR_DEC_KEEP_V_DATA_0      = 8'h8c,
    ADDR_DEC_KEEP_V_DATA_1      = 8'h90,
    ADDR_DEC_KEEP_V_CTRL        = 8'h94,
    WRIDLE                      = 2'd0,
    WRDATA                      = 2'd1,
    WRRESP                      = 2'd2,
    WRRESET                     = 2'd3,
    RDIDLE                      = 2'd0,
    RDDATA                      = 2'd1,
    RDRESET                     = 2'd2,
    ADDR_BITS         = 8;

//------------------------Local signal-------------------
    reg  [1:0]                    wstate = WRRESET;
    reg  [1:0]                    wnext;
    reg  [ADDR_BITS-1:0]          waddr;
    wire [31:0]                   wmask;
    wire                          aw_hs;
    wire                          w_hs;
    reg  [1:0]                    rstate = RDRESET;
    reg  [1:0]                    rnext;
    reg  [31:0]                   rdata;
    wire                          ar_hs;
    wire [ADDR_BITS-1:0]          raddr;
    // internal registers
    reg                           int_ap_idle;
    reg                           int_ap_ready;
    reg                           int_ap_done = 1'b0;
    wire                          ap_done_get;
    reg                           ap_done_ext;
    reg                           int_ap_start = 1'b0;
    wire                          ap_start_set;
    reg                           ap_start_mask;
    reg                           int_auto_restart = 1'b0;
    wire                          auto_restart_set;
    reg                           int_gie = 1'b0;
    reg  [1:0]                    int_ier = 2'b0;
    wire                          ier_toggle;
    reg                           ier_mask;
    reg  [1:0]                    int_isr = 2'b0;
    wire                          isr_toggle;
    reg                           isr_mask;
    reg  [0:0]                    int_fec_type_V = 'b0;
    reg  [2:0]                    int_mod_type_V = 'b0;
    reg  [0:0]                    int_skip_chan_V = 'b0;
    reg  [16:0]                   int_snr_V = 'b0;
    reg  [16:0]                   int_inv_sigma_sq_V = 'b0;
    reg  [39:0]                   int_enc_ctrl_word_V = 'b0;
    reg  [39:0]                   int_dec_ctrl_word_V = 'b0;
    reg  [31:0]                   int_num_blocks_V = 'b0;
    reg  [13:0]                   int_source_words_V = 'b0;
    reg  [13:0]                   int_chan_symbls_V = 'b0;
    reg  [4:0]                    int_chan_rem_V = 'b0;
    reg  [0:0]                    int_zero_data_V = 'b0;
    reg  [15:0]                   int_source_keep_V = 'b0;
    reg  [63:0]                   int_enc_keep_V = 'b0;
    reg  [63:0]                   int_dec_keep_V = 'b0;

//------------------------Instantiation------------------

//------------------------AXI write fsm------------------
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ARESET)
        wstate <= WRRESET;
    else if (ACLK_EN)
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end

//------------------------AXI read fsm-------------------
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ARESET)
        rstate <= RDRESET;
    else if (ACLK_EN)
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_FEC_TYPE_V_DATA_0: begin
                    rdata <= int_fec_type_V[0:0];
                end
                ADDR_MOD_TYPE_V_DATA_0: begin
                    rdata <= int_mod_type_V[2:0];
                end
                ADDR_SKIP_CHAN_V_DATA_0: begin
                    rdata <= int_skip_chan_V[0:0];
                end
                ADDR_SNR_V_DATA_0: begin
                    rdata <= int_snr_V[16:0];
                end
                ADDR_INV_SIGMA_SQ_V_DATA_0: begin
                    rdata <= int_inv_sigma_sq_V[16:0];
                end
                ADDR_ENC_CTRL_WORD_V_DATA_0: begin
                    rdata <= int_enc_ctrl_word_V[31:0];
                end
                ADDR_ENC_CTRL_WORD_V_DATA_1: begin
                    rdata <= int_enc_ctrl_word_V[39:32];
                end
                ADDR_DEC_CTRL_WORD_V_DATA_0: begin
                    rdata <= int_dec_ctrl_word_V[31:0];
                end
                ADDR_DEC_CTRL_WORD_V_DATA_1: begin
                    rdata <= int_dec_ctrl_word_V[39:32];
                end
                ADDR_NUM_BLOCKS_V_DATA_0: begin
                    rdata <= int_num_blocks_V[31:0];
                end
                ADDR_SOURCE_WORDS_V_DATA_0: begin
                    rdata <= int_source_words_V[13:0];
                end
                ADDR_CHAN_SYMBLS_V_DATA_0: begin
                    rdata <= int_chan_symbls_V[13:0];
                end
                ADDR_CHAN_REM_V_DATA_0: begin
                    rdata <= int_chan_rem_V[4:0];
                end
                ADDR_ZERO_DATA_V_DATA_0: begin
                    rdata <= int_zero_data_V[0:0];
                end
                ADDR_SOURCE_KEEP_V_DATA_0: begin
                    rdata <= int_source_keep_V[15:0];
                end
                ADDR_ENC_KEEP_V_DATA_0: begin
                    rdata <= int_enc_keep_V[31:0];
                end
                ADDR_ENC_KEEP_V_DATA_1: begin
                    rdata <= int_enc_keep_V[63:32];
                end
                ADDR_DEC_KEEP_V_DATA_0: begin
                    rdata <= int_dec_keep_V[31:0];
                end
                ADDR_DEC_KEEP_V_DATA_1: begin
                    rdata <= int_dec_keep_V[63:32];
                end
            endcase
        end
    end
end


//------------------------Register logic-----------------
assign interrupt        = int_gie & (|int_isr);
assign ap_start         = int_ap_start;
assign ap_start_set     = w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0];
assign ap_done_get      = ar_hs && raddr == ADDR_AP_CTRL;
assign auto_restart_set = w_hs && waddr == ADDR_AP_CTRL && WSTRB[0];
assign isr_toggle       = w_hs && waddr == ADDR_ISR && WSTRB[0];
assign fec_type_V       = int_fec_type_V;
assign mod_type_V       = int_mod_type_V;
assign skip_chan_V      = int_skip_chan_V;
assign snr_V            = int_snr_V;
assign inv_sigma_sq_V   = int_inv_sigma_sq_V;
assign enc_ctrl_word_V  = int_enc_ctrl_word_V;
assign dec_ctrl_word_V  = int_dec_ctrl_word_V;
assign num_blocks_V     = int_num_blocks_V;
assign source_words_V   = int_source_words_V;
assign chan_symbls_V    = int_chan_symbls_V;
assign chan_rem_V       = int_chan_rem_V;
assign zero_data_V      = int_zero_data_V;
assign source_keep_V    = int_source_keep_V;
assign enc_keep_V       = int_enc_keep_V;
assign dec_keep_V       = int_dec_keep_V;
// ap_start_mask
always @(posedge clk) begin
    if (rst)
        ap_start_mask <= 1'b0;
    else
        ap_start_mask <= ap_start_set;
end
// int_ap_start
always @(posedge clk) begin
    if (rst)
        int_ap_start <= 1'b0;
    else if (ap_start_set == 1'b1 && ap_start_mask == 1'b0)
        int_ap_start <= 1'b1;
    else if (ap_ready)
        int_ap_start <= int_auto_restart; // clear on handshake/auto restart
end
// ap_done_ext
always @(posedge clk) begin
    if (rst)
        ap_done_ext <= 1'b0;
    else
        ap_done_ext <= ap_done_get;
end
// int_ap_done
always @(posedge clk) begin
    if (rst)
        int_ap_done <= 1'b0;
    else if (ap_done)
        int_ap_done <= 1'b1;
    else if (ap_done_get == 1'b0 && ap_done_ext == 1'b1)
        int_ap_done <= 1'b0; // clear on read
end
// int_ap_idle
always @(posedge clk) begin
    if (ARESET)
        int_ap_idle <= 1'b0;
    else
        int_ap_idle <= ap_idle;
end
// int_ap_ready
always @(posedge clk) begin
    if (ARESET)
        int_ap_ready <= 1'b0;
    else
        int_ap_ready <= ap_ready;
end
// int_auto_restart
always @(posedge clk) begin
    if (rst)
        int_auto_restart <= 1'b0;
    else if (auto_restart_set == 1'b1)
        int_auto_restart <=  WDATA[7];
end
// int_gie
always @(posedge clk) begin
    if (rst)
        int_gie <= 1'b0;
    else if (w_hs && waddr == ADDR_GIE && WSTRB[0])
        int_gie <= WDATA[0];
end
// int_ier
always @(posedge clk) begin
    if (rst)
        int_ier <= 1'b0;
    else if (w_hs && waddr == ADDR_IER && WSTRB[0])
        int_ier <= WDATA[1:0];
end
// isr_mask
always @(posedge clk) begin
    if (rst)
        isr_mask <= 1'b0;
    else
        isr_mask <= isr_toggle;
end
// int_isr[0]
always @(posedge clk) begin
    if (rst)
        int_isr[0] <= 1'b0;
    else if (int_ier[0] & ap_done)
        int_isr[0] <= 1'b1;
    else if (isr_toggle == 1'b1 && isr_mask == 1'b0)
        int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
end
// int_isr[1]
always @(posedge clk) begin
    if (rst)
        int_isr[1] <= 1'b0;
    else if (int_ier[1] & ap_ready)
        int_isr[1] <= 1'b1;
    else if (isr_toggle == 1'b1 && isr_mask == 1'b0)
        int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
end
// int_fec_type_V[0:0]
always @(posedge clk) begin
    if (rst)
        int_fec_type_V[0:0] <= 0;
    else if (w_hs && waddr == ADDR_FEC_TYPE_V_DATA_0)
        int_fec_type_V[0:0] <= (WDATA[31:0] & wmask) | (int_fec_type_V[0:0] & ~wmask);
end
// int_mod_type_V[2:0]
always @(posedge clk) begin
    if (rst)
        int_mod_type_V[2:0] <= 0;
    else if (w_hs && waddr == ADDR_MOD_TYPE_V_DATA_0)
        int_mod_type_V[2:0] <= (WDATA[31:0] & wmask) | (int_mod_type_V[2:0] & ~wmask);
end
// int_skip_chan_V[0:0]
always @(posedge clk) begin
    if (rst)
        int_skip_chan_V[0:0] <= 0;
    else if (w_hs && waddr == ADDR_SKIP_CHAN_V_DATA_0)
        int_skip_chan_V[0:0] <= (WDATA[31:0] & wmask) | (int_skip_chan_V[0:0] & ~wmask);
end
// int_snr_V[16:0]
always @(posedge clk) begin
    if (rst)
        int_snr_V[16:0] <= 0;
    else if (w_hs && waddr == ADDR_SNR_V_DATA_0)
        int_snr_V[16:0] <= (WDATA[31:0] & wmask) | (int_snr_V[16:0] & ~wmask);
end
// int_inv_sigma_sq_V[16:0]
always @(posedge clk) begin
    if (rst)
        int_inv_sigma_sq_V[16:0] <= 0;
    else if (w_hs && waddr == ADDR_INV_SIGMA_SQ_V_DATA_0)
        int_inv_sigma_sq_V[16:0] <= (WDATA[31:0] & wmask) | (int_inv_sigma_sq_V[16:0] & ~wmask);
end
// int_enc_ctrl_word_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_enc_ctrl_word_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_ENC_CTRL_WORD_V_DATA_0)
        int_enc_ctrl_word_V[31:0] <= (WDATA[31:0] & wmask) | (int_enc_ctrl_word_V[31:0] & ~wmask);
end
// int_enc_ctrl_word_V[39:32]
always @(posedge clk) begin
    if (rst)
        int_enc_ctrl_word_V[39:32] <= 0;
    else if (w_hs && waddr == ADDR_ENC_CTRL_WORD_V_DATA_1)
        int_enc_ctrl_word_V[39:32] <= (WDATA[31:0] & wmask) | (int_enc_ctrl_word_V[39:32] & ~wmask);
end
// int_dec_ctrl_word_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_dec_ctrl_word_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_DEC_CTRL_WORD_V_DATA_0)
        int_dec_ctrl_word_V[31:0] <= (WDATA[31:0] & wmask) | (int_dec_ctrl_word_V[31:0] & ~wmask);
end
// int_dec_ctrl_word_V[39:32]
always @(posedge clk) begin
    if (rst)
        int_dec_ctrl_word_V[39:32] <= 0;
    else if (w_hs && waddr == ADDR_DEC_CTRL_WORD_V_DATA_1)
        int_dec_ctrl_word_V[39:32] <= (WDATA[31:0] & wmask) | (int_dec_ctrl_word_V[39:32] & ~wmask);
end
// int_num_blocks_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_num_blocks_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_NUM_BLOCKS_V_DATA_0)
        int_num_blocks_V[31:0] <= (WDATA[31:0] & wmask) | (int_num_blocks_V[31:0] & ~wmask);
end
// int_source_words_V[13:0]
always @(posedge clk) begin
    if (rst)
        int_source_words_V[13:0] <= 0;
    else if (w_hs && waddr == ADDR_SOURCE_WORDS_V_DATA_0)
        int_source_words_V[13:0] <= (WDATA[31:0] & wmask) | (int_source_words_V[13:0] & ~wmask);
end
// int_chan_symbls_V[13:0]
always @(posedge clk) begin
    if (rst)
        int_chan_symbls_V[13:0] <= 0;
    else if (w_hs && waddr == ADDR_CHAN_SYMBLS_V_DATA_0)
        int_chan_symbls_V[13:0] <= (WDATA[31:0] & wmask) | (int_chan_symbls_V[13:0] & ~wmask);
end
// int_chan_rem_V[4:0]
always @(posedge clk) begin
    if (rst)
        int_chan_rem_V[4:0] <= 0;
    else if (w_hs && waddr == ADDR_CHAN_REM_V_DATA_0)
        int_chan_rem_V[4:0] <= (WDATA[31:0] & wmask) | (int_chan_rem_V[4:0] & ~wmask);
end
// int_zero_data_V[0:0]
always @(posedge clk) begin
    if (rst)
        int_zero_data_V[0:0] <= 0;
    else if (w_hs && waddr == ADDR_ZERO_DATA_V_DATA_0)
        int_zero_data_V[0:0] <= (WDATA[31:0] & wmask) | (int_zero_data_V[0:0] & ~wmask);
end
// int_source_keep_V[15:0]
always @(posedge clk) begin
    if (rst)
        int_source_keep_V[15:0] <= 0;
    else if (w_hs && waddr == ADDR_SOURCE_KEEP_V_DATA_0)
        int_source_keep_V[15:0] <= (WDATA[31:0] & wmask) | (int_source_keep_V[15:0] & ~wmask);
end
// int_enc_keep_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_enc_keep_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_ENC_KEEP_V_DATA_0)
        int_enc_keep_V[31:0] <= (WDATA[31:0] & wmask) | (int_enc_keep_V[31:0] & ~wmask);
end
// int_enc_keep_V[63:32]
always @(posedge clk) begin
    if (rst)
        int_enc_keep_V[63:32] <= 0;
    else if (w_hs && waddr == ADDR_ENC_KEEP_V_DATA_1)
        int_enc_keep_V[63:32] <= (WDATA[31:0] & wmask) | (int_enc_keep_V[63:32] & ~wmask);
end
// int_dec_keep_V[31:0]
always @(posedge clk) begin
    if (rst)
        int_dec_keep_V[31:0] <= 0;
    else if (w_hs && waddr == ADDR_DEC_KEEP_V_DATA_0)
        int_dec_keep_V[31:0] <= (WDATA[31:0] & wmask) | (int_dec_keep_V[31:0] & ~wmask);
end
// int_dec_keep_V[63:32]
always @(posedge clk) begin
    if (rst)
        int_dec_keep_V[63:32] <= 0;
    else if (w_hs && waddr == ADDR_DEC_KEEP_V_DATA_1)
        int_dec_keep_V[63:32] <= (WDATA[31:0] & wmask) | (int_dec_keep_V[63:32] & ~wmask);
end

//------------------------Memory logic-------------------

endmodule
