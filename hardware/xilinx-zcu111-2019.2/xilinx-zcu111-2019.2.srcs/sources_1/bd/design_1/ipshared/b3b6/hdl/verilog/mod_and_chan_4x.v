// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1.0
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mod_and_chan_4x,hls_ip_2018_1_0,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2L-e,HLS_INPUT_CLOCK=2.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.189000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=80,HLS_SYN_DSP=64,HLS_SYN_FF=14617,HLS_SYN_LUT=17869}" *)

module mod_and_chan_4x (
        ap_clk,
        ap_rst_n,
        ctrl_in_V_TDATA,
        ctrl_in_V_TVALID,
        ctrl_in_V_TREADY,
        ctrl_out_V_TDATA,
        ctrl_out_V_TVALID,
        ctrl_out_V_TREADY,
        hard_data_V_V_TDATA,
        hard_data_V_V_TVALID,
        hard_data_V_V_TREADY,
        chan_data_1_V_TDATA,
        chan_data_1_V_TVALID,
        chan_data_1_V_TREADY,
        chan_data_2_V_TDATA,
        chan_data_2_V_TVALID,
        chan_data_2_V_TREADY,
        chan_data_3_V_TDATA,
        chan_data_3_V_TVALID,
        chan_data_3_V_TREADY,
        chan_data_4_V_TDATA,
        chan_data_4_V_TVALID,
        chan_data_4_V_TREADY
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state22 = 5'd16;

input   ap_clk;
input   ap_rst_n;
input  [63:0] ctrl_in_V_TDATA;
input   ctrl_in_V_TVALID;
output   ctrl_in_V_TREADY;
output  [63:0] ctrl_out_V_TDATA;
output   ctrl_out_V_TVALID;
input   ctrl_out_V_TREADY;
input  [95:0] hard_data_V_V_TDATA;
input   hard_data_V_V_TVALID;
output   hard_data_V_V_TREADY;
output  [39:0] chan_data_1_V_TDATA;
output   chan_data_1_V_TVALID;
input   chan_data_1_V_TREADY;
output  [39:0] chan_data_2_V_TDATA;
output   chan_data_2_V_TVALID;
input   chan_data_2_V_TREADY;
output  [39:0] chan_data_3_V_TDATA;
output   chan_data_3_V_TVALID;
input   chan_data_3_V_TREADY;
output  [39:0] chan_data_4_V_TDATA;
output   chan_data_4_V_TVALID;
input   chan_data_4_V_TREADY;

reg    ap_rst_n_inv;
reg   [63:0] ctrl_in_V_0_data_out;
wire    ctrl_in_V_0_vld_in;
wire    ctrl_in_V_0_vld_out;
wire    ctrl_in_V_0_ack_in;
reg    ctrl_in_V_0_ack_out;
reg   [63:0] ctrl_in_V_0_payload_A;
reg   [63:0] ctrl_in_V_0_payload_B;
reg    ctrl_in_V_0_sel_rd;
reg    ctrl_in_V_0_sel_wr;
wire    ctrl_in_V_0_sel;
wire    ctrl_in_V_0_load_A;
wire    ctrl_in_V_0_load_B;
reg   [1:0] ctrl_in_V_0_state;
wire    ctrl_in_V_0_state_cmp_full;
reg   [63:0] ctrl_out_V_1_data_out;
reg    ctrl_out_V_1_vld_in;
wire    ctrl_out_V_1_vld_out;
wire    ctrl_out_V_1_ack_in;
wire    ctrl_out_V_1_ack_out;
reg   [63:0] ctrl_out_V_1_payload_A;
reg   [63:0] ctrl_out_V_1_payload_B;
reg    ctrl_out_V_1_sel_rd;
reg    ctrl_out_V_1_sel_wr;
wire    ctrl_out_V_1_sel;
wire    ctrl_out_V_1_load_A;
wire    ctrl_out_V_1_load_B;
reg   [1:0] ctrl_out_V_1_state;
wire    ctrl_out_V_1_state_cmp_full;
reg   [95:0] hard_data_V_V_0_data_out;
wire    hard_data_V_V_0_vld_in;
wire    hard_data_V_V_0_vld_out;
wire    hard_data_V_V_0_ack_in;
reg    hard_data_V_V_0_ack_out;
reg   [95:0] hard_data_V_V_0_payload_A;
reg   [95:0] hard_data_V_V_0_payload_B;
reg    hard_data_V_V_0_sel_rd;
reg    hard_data_V_V_0_sel_wr;
wire    hard_data_V_V_0_sel;
wire    hard_data_V_V_0_load_A;
wire    hard_data_V_V_0_load_B;
reg   [1:0] hard_data_V_V_0_state;
wire    hard_data_V_V_0_state_cmp_full;
reg   [39:0] chan_data_1_V_1_data_out;
reg    chan_data_1_V_1_vld_in;
wire    chan_data_1_V_1_vld_out;
wire    chan_data_1_V_1_ack_in;
wire    chan_data_1_V_1_ack_out;
reg   [39:0] chan_data_1_V_1_payload_A;
reg   [39:0] chan_data_1_V_1_payload_B;
reg    chan_data_1_V_1_sel_rd;
reg    chan_data_1_V_1_sel_wr;
wire    chan_data_1_V_1_sel;
wire    chan_data_1_V_1_load_A;
wire    chan_data_1_V_1_load_B;
reg   [1:0] chan_data_1_V_1_state;
wire    chan_data_1_V_1_state_cmp_full;
reg   [39:0] chan_data_2_V_1_data_out;
reg    chan_data_2_V_1_vld_in;
wire    chan_data_2_V_1_vld_out;
wire    chan_data_2_V_1_ack_in;
wire    chan_data_2_V_1_ack_out;
reg   [39:0] chan_data_2_V_1_payload_A;
reg   [39:0] chan_data_2_V_1_payload_B;
reg    chan_data_2_V_1_sel_rd;
reg    chan_data_2_V_1_sel_wr;
wire    chan_data_2_V_1_sel;
wire    chan_data_2_V_1_load_A;
wire    chan_data_2_V_1_load_B;
reg   [1:0] chan_data_2_V_1_state;
wire    chan_data_2_V_1_state_cmp_full;
reg   [39:0] chan_data_3_V_1_data_out;
reg    chan_data_3_V_1_vld_in;
wire    chan_data_3_V_1_vld_out;
wire    chan_data_3_V_1_ack_in;
wire    chan_data_3_V_1_ack_out;
reg   [39:0] chan_data_3_V_1_payload_A;
reg   [39:0] chan_data_3_V_1_payload_B;
reg    chan_data_3_V_1_sel_rd;
reg    chan_data_3_V_1_sel_wr;
wire    chan_data_3_V_1_sel;
wire    chan_data_3_V_1_load_A;
wire    chan_data_3_V_1_load_B;
reg   [1:0] chan_data_3_V_1_state;
wire    chan_data_3_V_1_state_cmp_full;
reg   [39:0] chan_data_4_V_1_data_out;
reg    chan_data_4_V_1_vld_in;
wire    chan_data_4_V_1_vld_out;
wire    chan_data_4_V_1_ack_in;
wire    chan_data_4_V_1_ack_out;
reg   [39:0] chan_data_4_V_1_payload_A;
reg   [39:0] chan_data_4_V_1_payload_B;
reg    chan_data_4_V_1_sel_rd;
reg    chan_data_4_V_1_sel_wr;
wire    chan_data_4_V_1_sel;
wire    chan_data_4_V_1_load_A;
wire    chan_data_4_V_1_load_B;
reg   [1:0] chan_data_4_V_1_state;
wire    chan_data_4_V_1_state_cmp_full;
reg    ctrl_in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    ctrl_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    hard_data_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_5_reg_1553;
reg   [0:0] tmp_4_reg_1557;
reg    chan_data_1_V_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter16;
reg   [0:0] tmp_5_reg_1553_pp0_iter15_reg;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] tmp_5_reg_1553_pp0_iter16_reg;
reg    chan_data_2_V_TDATA_blk_n;
reg    chan_data_3_V_TDATA_blk_n;
reg    chan_data_4_V_TDATA_blk_n;
reg   [95:0] p_3_reg_281;
reg   [13:0] symbols_reg_293;
reg   [2:0] ctrl_mod_type_V_reg_1413;
reg   [0:0] ctrl_skip_chan_V_reg_1426;
reg   [13:0] ctrl_block_symbls_V_reg_1438;
wire  signed [63:0] tmp_162_cast_fu_519_p1;
wire   [1:0] sh_assign_fu_580_p3;
reg   [1:0] sh_assign_reg_1448;
wire   [16:0] snr_mod_V_fu_588_p2;
reg   [16:0] snr_mod_V_reg_1453;
reg   [0:0] signbit_reg_1458;
reg   [7:0] p_Val2_3_reg_1465;
reg   [0:0] tmp_23_reg_1470;
reg   [1:0] p_Result_s_reg_1475;
wire   [17:0] sh_assign_cast_fu_651_p1;
reg   [17:0] sh_assign_cast_reg_1481;
wire   [7:0] awgn_snr_V_fu_774_p3;
reg   [7:0] awgn_snr_V_reg_1493;
wire   [7:0] tmp_10_cast_fu_782_p1;
reg   [7:0] tmp_10_cast_reg_1505;
wire   [95:0] tmp_6_fu_790_p1;
reg   [95:0] tmp_6_reg_1511;
wire   [7:0] tmp_17_cast_fu_800_p1;
reg   [7:0] tmp_17_cast_reg_1516;
wire   [0:0] sel_tmp_fu_804_p2;
reg   [0:0] sel_tmp_reg_1521;
wire   [0:0] sel_tmp3_fu_809_p2;
reg   [0:0] sel_tmp3_reg_1529;
wire   [0:0] sel_tmp5_fu_814_p2;
reg   [0:0] sel_tmp5_reg_1537;
wire   [0:0] sel_tmp7_fu_819_p2;
reg   [0:0] sel_tmp7_reg_1545;
wire   [0:0] tmp_5_fu_824_p2;
wire    ap_block_state4_pp0_stage0_iter0;
reg    ap_predicate_op126_read_state5;
reg    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state8_pp0_stage0_iter4;
wire    ap_block_state9_pp0_stage0_iter5;
wire    ap_block_state10_pp0_stage0_iter6;
wire    ap_block_state11_pp0_stage0_iter7;
wire    ap_block_state12_pp0_stage0_iter8;
wire    ap_block_state13_pp0_stage0_iter9;
wire    ap_block_state14_pp0_stage0_iter10;
wire    ap_block_state15_pp0_stage0_iter11;
wire    ap_block_state16_pp0_stage0_iter12;
wire    ap_block_state17_pp0_stage0_iter13;
wire    ap_block_state18_pp0_stage0_iter14;
wire    ap_block_state19_pp0_stage0_iter15;
wire    ap_block_state20_pp0_stage0_iter16;
reg    ap_block_state20_io;
wire    ap_block_state21_pp0_stage0_iter17;
reg    ap_block_state21_io;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_5_reg_1553_pp0_iter1_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter2_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter3_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter4_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter5_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter6_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter7_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter8_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter9_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter10_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter11_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter12_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter13_reg;
reg   [0:0] tmp_5_reg_1553_pp0_iter14_reg;
wire   [0:0] tmp_4_fu_833_p2;
reg   [0:0] tmp_4_reg_1557_pp0_iter1_reg;
wire   [13:0] symbols_V_1_fu_858_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] symbol_1_V_4_fu_981_p3;
reg   [5:0] symbol_1_V_4_reg_1571;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter3_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter4_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter5_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter6_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter7_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter8_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter9_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter10_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter11_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter12_reg;
reg   [5:0] symbol_1_V_4_reg_1571_pp0_iter13_reg;
wire   [5:0] symbol_2_V_7_fu_1009_p3;
reg   [5:0] symbol_2_V_7_reg_1576;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter3_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter4_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter5_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter6_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter7_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter8_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter9_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter10_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter11_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter12_reg;
reg   [5:0] symbol_2_V_7_reg_1576_pp0_iter13_reg;
wire   [5:0] symbol_3_V_5_fu_1037_p3;
reg   [5:0] symbol_3_V_5_reg_1581;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter3_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter4_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter5_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter6_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter7_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter8_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter9_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter10_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter11_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter12_reg;
reg   [5:0] symbol_3_V_5_reg_1581_pp0_iter13_reg;
wire   [5:0] p_7_fu_1065_p3;
reg   [5:0] p_7_reg_1586;
reg   [5:0] p_7_reg_1586_pp0_iter3_reg;
reg   [5:0] p_7_reg_1586_pp0_iter4_reg;
reg   [5:0] p_7_reg_1586_pp0_iter5_reg;
reg   [5:0] p_7_reg_1586_pp0_iter6_reg;
reg   [5:0] p_7_reg_1586_pp0_iter7_reg;
reg   [5:0] p_7_reg_1586_pp0_iter8_reg;
reg   [5:0] p_7_reg_1586_pp0_iter9_reg;
reg   [5:0] p_7_reg_1586_pp0_iter10_reg;
reg   [5:0] p_7_reg_1586_pp0_iter11_reg;
reg   [5:0] p_7_reg_1586_pp0_iter12_reg;
reg   [5:0] p_7_reg_1586_pp0_iter13_reg;
wire   [95:0] r_V_fu_1072_p2;
reg   [95:0] r_V_reg_1591;
reg    ap_enable_reg_pp0_iter2;
reg   [15:0] p_Val2_29_reg_1596;
reg   [15:0] p_Val2_8_reg_1601;
reg   [15:0] p_Val2_9_reg_1606;
reg   [15:0] p_Val2_6_reg_1611;
reg   [15:0] p_Val2_7_reg_1616;
reg   [15:0] p_Val2_10_reg_1621;
reg   [15:0] p_Val2_11_reg_1626;
reg   [15:0] p_Val2_12_reg_1631;
wire  signed [39:0] cast1_fu_1337_p1;
wire  signed [39:0] cast2_fu_1350_p1;
wire  signed [39:0] cast3_fu_1363_p1;
wire  signed [39:0] cast4_fu_1376_p1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
wire    grp_awgn_real1_fu_312_ap_start;
wire    grp_awgn_real1_fu_312_ap_done;
wire    grp_awgn_real1_fu_312_ap_idle;
wire    grp_awgn_real1_fu_312_ap_ready;
reg    grp_awgn_real1_fu_312_ap_ce;
wire   [17:0] grp_awgn_real1_fu_312_ap_return;
wire    grp_awgn_imag1_fu_325_ap_start;
wire    grp_awgn_imag1_fu_325_ap_done;
wire    grp_awgn_imag1_fu_325_ap_idle;
wire    grp_awgn_imag1_fu_325_ap_ready;
reg    grp_awgn_imag1_fu_325_ap_ce;
wire   [17:0] grp_awgn_imag1_fu_325_ap_return;
wire    grp_awgn_real2_fu_338_ap_start;
wire    grp_awgn_real2_fu_338_ap_done;
wire    grp_awgn_real2_fu_338_ap_idle;
wire    grp_awgn_real2_fu_338_ap_ready;
reg    grp_awgn_real2_fu_338_ap_ce;
wire   [17:0] grp_awgn_real2_fu_338_ap_return;
wire    grp_awgn_imag2_fu_351_ap_start;
wire    grp_awgn_imag2_fu_351_ap_done;
wire    grp_awgn_imag2_fu_351_ap_idle;
wire    grp_awgn_imag2_fu_351_ap_ready;
reg    grp_awgn_imag2_fu_351_ap_ce;
wire   [17:0] grp_awgn_imag2_fu_351_ap_return;
wire    grp_awgn_real3_fu_364_ap_start;
wire    grp_awgn_real3_fu_364_ap_done;
wire    grp_awgn_real3_fu_364_ap_idle;
wire    grp_awgn_real3_fu_364_ap_ready;
reg    grp_awgn_real3_fu_364_ap_ce;
wire   [17:0] grp_awgn_real3_fu_364_ap_return;
wire    grp_awgn_imag3_fu_377_ap_start;
wire    grp_awgn_imag3_fu_377_ap_done;
wire    grp_awgn_imag3_fu_377_ap_idle;
wire    grp_awgn_imag3_fu_377_ap_ready;
reg    grp_awgn_imag3_fu_377_ap_ce;
wire   [17:0] grp_awgn_imag3_fu_377_ap_return;
wire    grp_awgn_real4_fu_390_ap_start;
wire    grp_awgn_real4_fu_390_ap_done;
wire    grp_awgn_real4_fu_390_ap_idle;
wire    grp_awgn_real4_fu_390_ap_ready;
reg    grp_awgn_real4_fu_390_ap_ce;
wire   [17:0] grp_awgn_real4_fu_390_ap_return;
wire    grp_awgn_imag4_fu_403_ap_start;
wire    grp_awgn_imag4_fu_403_ap_done;
wire    grp_awgn_imag4_fu_403_ap_idle;
wire    grp_awgn_imag4_fu_403_ap_ready;
reg    grp_awgn_imag4_fu_403_ap_ce;
wire   [17:0] grp_awgn_imag4_fu_403_ap_return;
wire    grp_modulate_bits_fu_416_ap_start;
wire    grp_modulate_bits_fu_416_ap_done;
wire    grp_modulate_bits_fu_416_ap_idle;
wire    grp_modulate_bits_fu_416_ap_ready;
reg    grp_modulate_bits_fu_416_ap_ce;
wire   [15:0] grp_modulate_bits_fu_416_ap_return_0;
wire   [15:0] grp_modulate_bits_fu_416_ap_return_1;
wire    grp_modulate_bits_fu_430_ap_start;
wire    grp_modulate_bits_fu_430_ap_done;
wire    grp_modulate_bits_fu_430_ap_idle;
wire    grp_modulate_bits_fu_430_ap_ready;
reg    grp_modulate_bits_fu_430_ap_ce;
wire   [15:0] grp_modulate_bits_fu_430_ap_return_0;
wire   [15:0] grp_modulate_bits_fu_430_ap_return_1;
wire    grp_modulate_bits_fu_444_ap_start;
wire    grp_modulate_bits_fu_444_ap_done;
wire    grp_modulate_bits_fu_444_ap_idle;
wire    grp_modulate_bits_fu_444_ap_ready;
reg    grp_modulate_bits_fu_444_ap_ce;
wire   [15:0] grp_modulate_bits_fu_444_ap_return_0;
wire   [15:0] grp_modulate_bits_fu_444_ap_return_1;
wire    grp_modulate_bits_fu_458_ap_start;
wire    grp_modulate_bits_fu_458_ap_done;
wire    grp_modulate_bits_fu_458_ap_idle;
wire    grp_modulate_bits_fu_458_ap_ready;
reg    grp_modulate_bits_fu_458_ap_ce;
wire   [15:0] grp_modulate_bits_fu_458_ap_return_0;
wire   [15:0] grp_modulate_bits_fu_458_ap_return_1;
reg   [95:0] ap_phi_mux_p_3_phi_fu_285_p4;
reg   [95:0] ap_phi_mux_p_Val2_5_phi_fu_305_p4;
wire   [95:0] ap_phi_reg_pp0_iter0_p_Val2_5_reg_302;
reg   [95:0] ap_phi_reg_pp0_iter1_p_Val2_5_reg_302;
reg   [95:0] ap_phi_reg_pp0_iter2_p_Val2_5_reg_302;
reg    grp_awgn_real1_fu_312_ap_start_reg;
reg    grp_awgn_imag1_fu_325_ap_start_reg;
reg    grp_awgn_real2_fu_338_ap_start_reg;
reg    grp_awgn_imag2_fu_351_ap_start_reg;
reg    grp_awgn_real3_fu_364_ap_start_reg;
reg    grp_awgn_imag3_fu_377_ap_start_reg;
reg    grp_awgn_real4_fu_390_ap_start_reg;
reg    grp_awgn_imag4_fu_403_ap_start_reg;
reg    grp_modulate_bits_fu_416_ap_start_reg;
reg    grp_modulate_bits_fu_430_ap_start_reg;
reg    grp_modulate_bits_fu_444_ap_start_reg;
reg    grp_modulate_bits_fu_458_ap_start_reg;
reg   [5:0] p_6_fu_214;
reg   [5:0] symbol_3_V_6_fu_218;
reg   [5:0] symbol_2_V_1_fu_222;
reg   [5:0] symbol_1_V_fu_226;
reg   [7:0] remaining_bits_fu_230;
wire    ap_CS_fsm_state1;
wire   [7:0] remaining_bits_2_fu_838_p2;
wire   [7:0] remaining_bits_1_fu_848_p2;
reg    ap_block_pp0_stage0_01001;
wire   [57:0] tmp_27_fu_477_p1;
wire   [16:0] ctrl_snr_V_fu_499_p4;
wire   [0:0] tmp_7_fu_524_p2;
wire   [0:0] tmp_21_fu_538_p3;
wire   [0:0] tmp_fu_554_p2;
wire   [15:0] tmp_5_cast_fu_546_p3;
wire   [15:0] p_Val2_1_fu_560_p3;
wire   [0:0] tmp_20_fu_530_p3;
wire   [1:0] p_1_cast_fu_572_p3;
wire  signed [16:0] p_Val2_2_cast_fu_568_p1;
wire   [7:0] tmp_3_fu_654_p1;
wire   [7:0] p_Val2_4_fu_664_p2;
wire   [0:0] tmp_25_fu_669_p3;
wire   [0:0] tmp_24_fu_657_p3;
wire   [0:0] tmp_s_fu_677_p2;
wire   [0:0] carry_fu_683_p2;
wire   [0:0] Range1_all_ones_fu_689_p2;
wire   [0:0] Range1_all_zeros_fu_694_p2;
wire   [0:0] p_38_i_fu_707_p2;
wire   [0:0] tmp_9_fu_713_p2;
wire   [0:0] deleted_zeros_fu_699_p3;
wire   [0:0] signbit_not_fu_729_p2;
wire   [0:0] p_39_demorgan_i_fu_724_p2;
wire   [0:0] neg_src_not_fu_734_p2;
wire   [0:0] p_39_demorgan_i_not_fu_746_p2;
wire   [0:0] brmerge_i_i_not_fu_740_p2;
wire   [0:0] neg_src_fu_719_p2;
wire   [0:0] brmerge_fu_752_p2;
wire   [7:0] p_mux_fu_758_p3;
wire   [7:0] p_s_fu_766_p3;
wire   [5:0] p_2_fu_630_p10;
wire   [6:0] tmp_11_cast_fu_786_p1;
wire   [6:0] tmp_2_fu_794_p2;
wire   [5:0] symbol_1_V_5_fu_876_p1;
wire   [5:0] symbol_1_V_1_fu_960_p3;
wire   [5:0] symbol_1_V_2_fu_967_p3;
wire   [5:0] symbol_1_V_3_fu_974_p3;
wire   [5:0] symbol_4_V_3_fu_920_p4;
wire   [5:0] symbol_3_V_10_fu_910_p4;
wire   [5:0] symbol_2_V_4_fu_988_p3;
wire   [5:0] symbol_3_V_9_fu_890_p4;
wire   [5:0] symbol_2_V_5_fu_995_p3;
wire   [5:0] symbol_2_V_fu_880_p4;
wire   [5:0] symbol_2_V_6_fu_1002_p3;
wire   [5:0] symbol_3_V_1_fu_940_p4;
wire   [5:0] symbol_3_V_fu_930_p4;
wire   [5:0] symbol_3_V_2_fu_1016_p3;
wire   [5:0] symbol_3_V_3_fu_1023_p3;
wire   [5:0] symbol_3_V_4_fu_1030_p3;
wire   [5:0] symbol_4_V_2_fu_950_p4;
wire   [5:0] sel_tmp1_fu_1044_p3;
wire   [5:0] sel_tmp2_fu_1051_p3;
wire   [5:0] symbol_4_V_fu_900_p4;
wire   [5:0] sel_tmp4_fu_1058_p3;
wire   [17:0] p_Val2_13_fu_1129_p2;
wire  signed [18:0] err_sample_real_1_V_fu_1169_p1;
wire  signed [18:0] tmp_8_fu_1193_p1;
wire   [17:0] p_Val2_14_fu_1134_p2;
wire  signed [18:0] err_sample_imag_1_V_fu_1172_p1;
wire  signed [18:0] tmp_10_fu_1203_p1;
wire   [17:0] p_Val2_15_fu_1139_p2;
wire  signed [18:0] err_sample_real_2_V_fu_1175_p1;
wire  signed [18:0] tmp_11_fu_1213_p1;
wire   [17:0] p_Val2_16_fu_1144_p2;
wire  signed [18:0] err_sample_imag_2_V_fu_1178_p1;
wire  signed [18:0] tmp_12_fu_1223_p1;
wire   [17:0] p_Val2_17_fu_1149_p2;
wire  signed [18:0] err_sample_real_3_V_fu_1181_p1;
wire  signed [18:0] tmp_13_fu_1233_p1;
wire   [17:0] p_Val2_18_fu_1154_p2;
wire  signed [18:0] err_sample_imag_3_V_fu_1184_p1;
wire  signed [18:0] tmp_14_fu_1243_p1;
wire   [17:0] p_Val2_19_fu_1159_p2;
wire  signed [18:0] err_sample_real_4_V_fu_1187_p1;
wire  signed [18:0] tmp_15_fu_1253_p1;
wire   [17:0] p_Val2_20_fu_1164_p2;
wire  signed [18:0] err_sample_imag_4_V_fu_1190_p1;
wire  signed [18:0] tmp_16_fu_1263_p1;
wire   [18:0] err_sample_real_1_V_1_fu_1197_p2;
wire   [18:0] err_sample_imag_1_V_1_fu_1207_p2;
wire   [18:0] err_sample_real_2_V_1_fu_1217_p2;
wire   [18:0] err_sample_imag_2_V_1_fu_1227_p2;
wire   [18:0] err_sample_real_3_V_1_fu_1237_p2;
wire   [18:0] err_sample_imag_3_V_1_fu_1247_p2;
wire   [18:0] err_sample_real_4_V_1_fu_1257_p2;
wire   [18:0] err_sample_imag_4_V_1_fu_1267_p2;
wire   [18:0] err_sample_imag_1_V_3_fu_1280_p3;
wire   [18:0] err_sample_real_1_V_3_fu_1273_p3;
wire   [37:0] tmp_276_fu_1329_p3;
wire   [18:0] err_sample_imag_2_V_3_fu_1294_p3;
wire   [18:0] err_sample_real_2_V_3_fu_1287_p3;
wire   [37:0] tmp_381_fu_1342_p3;
wire   [18:0] err_sample_imag_3_V_3_fu_1308_p3;
wire   [18:0] err_sample_real_3_V_3_fu_1301_p3;
wire   [37:0] tmp_486_fu_1355_p3;
wire   [18:0] err_sample_imag_4_V_3_fu_1322_p3;
wire   [18:0] err_sample_real_4_V_3_fu_1315_p3;
wire   [37:0] tmp_591_fu_1368_p3;
reg   [4:0] ap_NS_fsm;
wire    ap_CS_fsm_state22;
reg    ap_block_state22;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_902;

// power-on initialization
initial begin
#0 ctrl_in_V_0_sel_rd = 1'b0;
#0 ctrl_in_V_0_sel_wr = 1'b0;
#0 ctrl_in_V_0_state = 2'd0;
#0 ctrl_out_V_1_sel_rd = 1'b0;
#0 ctrl_out_V_1_sel_wr = 1'b0;
#0 ctrl_out_V_1_state = 2'd0;
#0 hard_data_V_V_0_sel_rd = 1'b0;
#0 hard_data_V_V_0_sel_wr = 1'b0;
#0 hard_data_V_V_0_state = 2'd0;
#0 chan_data_1_V_1_sel_rd = 1'b0;
#0 chan_data_1_V_1_sel_wr = 1'b0;
#0 chan_data_1_V_1_state = 2'd0;
#0 chan_data_2_V_1_sel_rd = 1'b0;
#0 chan_data_2_V_1_sel_wr = 1'b0;
#0 chan_data_2_V_1_state = 2'd0;
#0 chan_data_3_V_1_sel_rd = 1'b0;
#0 chan_data_3_V_1_sel_wr = 1'b0;
#0 chan_data_3_V_1_state = 2'd0;
#0 chan_data_4_V_1_sel_rd = 1'b0;
#0 chan_data_4_V_1_sel_wr = 1'b0;
#0 chan_data_4_V_1_state = 2'd0;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 grp_awgn_real1_fu_312_ap_start_reg = 1'b0;
#0 grp_awgn_imag1_fu_325_ap_start_reg = 1'b0;
#0 grp_awgn_real2_fu_338_ap_start_reg = 1'b0;
#0 grp_awgn_imag2_fu_351_ap_start_reg = 1'b0;
#0 grp_awgn_real3_fu_364_ap_start_reg = 1'b0;
#0 grp_awgn_imag3_fu_377_ap_start_reg = 1'b0;
#0 grp_awgn_real4_fu_390_ap_start_reg = 1'b0;
#0 grp_awgn_imag4_fu_403_ap_start_reg = 1'b0;
#0 grp_modulate_bits_fu_416_ap_start_reg = 1'b0;
#0 grp_modulate_bits_fu_430_ap_start_reg = 1'b0;
#0 grp_modulate_bits_fu_444_ap_start_reg = 1'b0;
#0 grp_modulate_bits_fu_458_ap_start_reg = 1'b0;
end

awgn_real1 grp_awgn_real1_fu_312(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real1_fu_312_ap_start),
    .ap_done(grp_awgn_real1_fu_312_ap_done),
    .ap_idle(grp_awgn_real1_fu_312_ap_idle),
    .ap_ready(grp_awgn_real1_fu_312_ap_ready),
    .ap_ce(grp_awgn_real1_fu_312_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_real1_fu_312_ap_return)
);

awgn_imag1 grp_awgn_imag1_fu_325(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag1_fu_325_ap_start),
    .ap_done(grp_awgn_imag1_fu_325_ap_done),
    .ap_idle(grp_awgn_imag1_fu_325_ap_idle),
    .ap_ready(grp_awgn_imag1_fu_325_ap_ready),
    .ap_ce(grp_awgn_imag1_fu_325_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_imag1_fu_325_ap_return)
);

awgn_real2 grp_awgn_real2_fu_338(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real2_fu_338_ap_start),
    .ap_done(grp_awgn_real2_fu_338_ap_done),
    .ap_idle(grp_awgn_real2_fu_338_ap_idle),
    .ap_ready(grp_awgn_real2_fu_338_ap_ready),
    .ap_ce(grp_awgn_real2_fu_338_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_real2_fu_338_ap_return)
);

awgn_imag2 grp_awgn_imag2_fu_351(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag2_fu_351_ap_start),
    .ap_done(grp_awgn_imag2_fu_351_ap_done),
    .ap_idle(grp_awgn_imag2_fu_351_ap_idle),
    .ap_ready(grp_awgn_imag2_fu_351_ap_ready),
    .ap_ce(grp_awgn_imag2_fu_351_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_imag2_fu_351_ap_return)
);

awgn_real3 grp_awgn_real3_fu_364(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real3_fu_364_ap_start),
    .ap_done(grp_awgn_real3_fu_364_ap_done),
    .ap_idle(grp_awgn_real3_fu_364_ap_idle),
    .ap_ready(grp_awgn_real3_fu_364_ap_ready),
    .ap_ce(grp_awgn_real3_fu_364_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_real3_fu_364_ap_return)
);

awgn_imag3 grp_awgn_imag3_fu_377(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag3_fu_377_ap_start),
    .ap_done(grp_awgn_imag3_fu_377_ap_done),
    .ap_idle(grp_awgn_imag3_fu_377_ap_idle),
    .ap_ready(grp_awgn_imag3_fu_377_ap_ready),
    .ap_ce(grp_awgn_imag3_fu_377_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_imag3_fu_377_ap_return)
);

awgn_real4 grp_awgn_real4_fu_390(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_real4_fu_390_ap_start),
    .ap_done(grp_awgn_real4_fu_390_ap_done),
    .ap_idle(grp_awgn_real4_fu_390_ap_idle),
    .ap_ready(grp_awgn_real4_fu_390_ap_ready),
    .ap_ce(grp_awgn_real4_fu_390_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_real4_fu_390_ap_return)
);

awgn_imag4 grp_awgn_imag4_fu_403(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_awgn_imag4_fu_403_ap_start),
    .ap_done(grp_awgn_imag4_fu_403_ap_done),
    .ap_idle(grp_awgn_imag4_fu_403_ap_idle),
    .ap_ready(grp_awgn_imag4_fu_403_ap_ready),
    .ap_ce(grp_awgn_imag4_fu_403_ap_ce),
    .snr_V(awgn_snr_V_reg_1493),
    .ap_return(grp_awgn_imag4_fu_403_ap_return)
);

modulate_bits grp_modulate_bits_fu_416(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_modulate_bits_fu_416_ap_start),
    .ap_done(grp_modulate_bits_fu_416_ap_done),
    .ap_idle(grp_modulate_bits_fu_416_ap_idle),
    .ap_ready(grp_modulate_bits_fu_416_ap_ready),
    .ap_ce(grp_modulate_bits_fu_416_ap_ce),
    .modulation_type(ctrl_mod_type_V_reg_1413),
    .symbol_V(symbol_1_V_4_reg_1571_pp0_iter13_reg),
    .ap_return_0(grp_modulate_bits_fu_416_ap_return_0),
    .ap_return_1(grp_modulate_bits_fu_416_ap_return_1)
);

modulate_bits grp_modulate_bits_fu_430(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_modulate_bits_fu_430_ap_start),
    .ap_done(grp_modulate_bits_fu_430_ap_done),
    .ap_idle(grp_modulate_bits_fu_430_ap_idle),
    .ap_ready(grp_modulate_bits_fu_430_ap_ready),
    .ap_ce(grp_modulate_bits_fu_430_ap_ce),
    .modulation_type(ctrl_mod_type_V_reg_1413),
    .symbol_V(symbol_2_V_7_reg_1576_pp0_iter13_reg),
    .ap_return_0(grp_modulate_bits_fu_430_ap_return_0),
    .ap_return_1(grp_modulate_bits_fu_430_ap_return_1)
);

modulate_bits grp_modulate_bits_fu_444(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_modulate_bits_fu_444_ap_start),
    .ap_done(grp_modulate_bits_fu_444_ap_done),
    .ap_idle(grp_modulate_bits_fu_444_ap_idle),
    .ap_ready(grp_modulate_bits_fu_444_ap_ready),
    .ap_ce(grp_modulate_bits_fu_444_ap_ce),
    .modulation_type(ctrl_mod_type_V_reg_1413),
    .symbol_V(symbol_3_V_5_reg_1581_pp0_iter13_reg),
    .ap_return_0(grp_modulate_bits_fu_444_ap_return_0),
    .ap_return_1(grp_modulate_bits_fu_444_ap_return_1)
);

modulate_bits grp_modulate_bits_fu_458(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_modulate_bits_fu_458_ap_start),
    .ap_done(grp_modulate_bits_fu_458_ap_done),
    .ap_idle(grp_modulate_bits_fu_458_ap_idle),
    .ap_ready(grp_modulate_bits_fu_458_ap_ready),
    .ap_ce(grp_modulate_bits_fu_458_ap_ce),
    .modulation_type(ctrl_mod_type_V_reg_1413),
    .symbol_V(p_7_reg_1586_pp0_iter13_reg),
    .ap_return_0(grp_modulate_bits_fu_458_ap_return_0),
    .ap_return_1(grp_modulate_bits_fu_458_ap_return_1)
);

mod_and_chan_4x_mGfk #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 6 ),
    .din5_WIDTH( 6 ),
    .din6_WIDTH( 6 ),
    .din7_WIDTH( 6 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 6 ))
mod_and_chan_4x_mGfk_U64(
    .din0(6'd4),
    .din1(6'd8),
    .din2(6'd12),
    .din3(6'd24),
    .din4(6'd0),
    .din5(6'd0),
    .din6(6'd0),
    .din7(6'd0),
    .din8(ctrl_mod_type_V_reg_1413),
    .dout(p_2_fu_630_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ctrl_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end else if (((ctrl_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_1_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_1_V_1_ack_out == 1'b1) & (chan_data_1_V_1_vld_out == 1'b1))) begin
            chan_data_1_V_1_sel_rd <= ~chan_data_1_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_1_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_1_V_1_ack_in == 1'b1) & (chan_data_1_V_1_vld_in == 1'b1))) begin
            chan_data_1_V_1_sel_wr <= ~chan_data_1_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_1_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_1_V_1_state == 2'd2) & (chan_data_1_V_1_vld_in == 1'b0)) | ((chan_data_1_V_1_state == 2'd3) & (chan_data_1_V_1_vld_in == 1'b0) & (chan_data_1_V_1_ack_out == 1'b1)))) begin
            chan_data_1_V_1_state <= 2'd2;
        end else if ((((chan_data_1_V_1_state == 2'd1) & (chan_data_1_V_1_ack_out == 1'b0)) | ((chan_data_1_V_1_state == 2'd3) & (chan_data_1_V_1_ack_out == 1'b0) & (chan_data_1_V_1_vld_in == 1'b1)))) begin
            chan_data_1_V_1_state <= 2'd1;
        end else if (((~((chan_data_1_V_1_vld_in == 1'b0) & (chan_data_1_V_1_ack_out == 1'b1)) & ~((chan_data_1_V_1_ack_out == 1'b0) & (chan_data_1_V_1_vld_in == 1'b1)) & (chan_data_1_V_1_state == 2'd3)) | ((chan_data_1_V_1_state == 2'd1) & (chan_data_1_V_1_ack_out == 1'b1)) | ((chan_data_1_V_1_state == 2'd2) & (chan_data_1_V_1_vld_in == 1'b1)))) begin
            chan_data_1_V_1_state <= 2'd3;
        end else begin
            chan_data_1_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_2_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_2_V_1_ack_out == 1'b1) & (chan_data_2_V_1_vld_out == 1'b1))) begin
            chan_data_2_V_1_sel_rd <= ~chan_data_2_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_2_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_2_V_1_ack_in == 1'b1) & (chan_data_2_V_1_vld_in == 1'b1))) begin
            chan_data_2_V_1_sel_wr <= ~chan_data_2_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_2_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_2_V_1_state == 2'd2) & (chan_data_2_V_1_vld_in == 1'b0)) | ((chan_data_2_V_1_state == 2'd3) & (chan_data_2_V_1_vld_in == 1'b0) & (chan_data_2_V_1_ack_out == 1'b1)))) begin
            chan_data_2_V_1_state <= 2'd2;
        end else if ((((chan_data_2_V_1_state == 2'd1) & (chan_data_2_V_1_ack_out == 1'b0)) | ((chan_data_2_V_1_state == 2'd3) & (chan_data_2_V_1_ack_out == 1'b0) & (chan_data_2_V_1_vld_in == 1'b1)))) begin
            chan_data_2_V_1_state <= 2'd1;
        end else if (((~((chan_data_2_V_1_vld_in == 1'b0) & (chan_data_2_V_1_ack_out == 1'b1)) & ~((chan_data_2_V_1_ack_out == 1'b0) & (chan_data_2_V_1_vld_in == 1'b1)) & (chan_data_2_V_1_state == 2'd3)) | ((chan_data_2_V_1_state == 2'd1) & (chan_data_2_V_1_ack_out == 1'b1)) | ((chan_data_2_V_1_state == 2'd2) & (chan_data_2_V_1_vld_in == 1'b1)))) begin
            chan_data_2_V_1_state <= 2'd3;
        end else begin
            chan_data_2_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_3_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_3_V_1_ack_out == 1'b1) & (chan_data_3_V_1_vld_out == 1'b1))) begin
            chan_data_3_V_1_sel_rd <= ~chan_data_3_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_3_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_3_V_1_ack_in == 1'b1) & (chan_data_3_V_1_vld_in == 1'b1))) begin
            chan_data_3_V_1_sel_wr <= ~chan_data_3_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_3_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_3_V_1_state == 2'd2) & (chan_data_3_V_1_vld_in == 1'b0)) | ((chan_data_3_V_1_state == 2'd3) & (chan_data_3_V_1_vld_in == 1'b0) & (chan_data_3_V_1_ack_out == 1'b1)))) begin
            chan_data_3_V_1_state <= 2'd2;
        end else if ((((chan_data_3_V_1_state == 2'd1) & (chan_data_3_V_1_ack_out == 1'b0)) | ((chan_data_3_V_1_state == 2'd3) & (chan_data_3_V_1_ack_out == 1'b0) & (chan_data_3_V_1_vld_in == 1'b1)))) begin
            chan_data_3_V_1_state <= 2'd1;
        end else if (((~((chan_data_3_V_1_vld_in == 1'b0) & (chan_data_3_V_1_ack_out == 1'b1)) & ~((chan_data_3_V_1_ack_out == 1'b0) & (chan_data_3_V_1_vld_in == 1'b1)) & (chan_data_3_V_1_state == 2'd3)) | ((chan_data_3_V_1_state == 2'd1) & (chan_data_3_V_1_ack_out == 1'b1)) | ((chan_data_3_V_1_state == 2'd2) & (chan_data_3_V_1_vld_in == 1'b1)))) begin
            chan_data_3_V_1_state <= 2'd3;
        end else begin
            chan_data_3_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_4_V_1_sel_rd <= 1'b0;
    end else begin
        if (((chan_data_4_V_1_ack_out == 1'b1) & (chan_data_4_V_1_vld_out == 1'b1))) begin
            chan_data_4_V_1_sel_rd <= ~chan_data_4_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_4_V_1_sel_wr <= 1'b0;
    end else begin
        if (((chan_data_4_V_1_ack_in == 1'b1) & (chan_data_4_V_1_vld_in == 1'b1))) begin
            chan_data_4_V_1_sel_wr <= ~chan_data_4_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        chan_data_4_V_1_state <= 2'd0;
    end else begin
        if ((((chan_data_4_V_1_state == 2'd2) & (chan_data_4_V_1_vld_in == 1'b0)) | ((chan_data_4_V_1_state == 2'd3) & (chan_data_4_V_1_vld_in == 1'b0) & (chan_data_4_V_1_ack_out == 1'b1)))) begin
            chan_data_4_V_1_state <= 2'd2;
        end else if ((((chan_data_4_V_1_state == 2'd1) & (chan_data_4_V_1_ack_out == 1'b0)) | ((chan_data_4_V_1_state == 2'd3) & (chan_data_4_V_1_ack_out == 1'b0) & (chan_data_4_V_1_vld_in == 1'b1)))) begin
            chan_data_4_V_1_state <= 2'd1;
        end else if (((~((chan_data_4_V_1_vld_in == 1'b0) & (chan_data_4_V_1_ack_out == 1'b1)) & ~((chan_data_4_V_1_ack_out == 1'b0) & (chan_data_4_V_1_vld_in == 1'b1)) & (chan_data_4_V_1_state == 2'd3)) | ((chan_data_4_V_1_state == 2'd1) & (chan_data_4_V_1_ack_out == 1'b1)) | ((chan_data_4_V_1_state == 2'd2) & (chan_data_4_V_1_vld_in == 1'b1)))) begin
            chan_data_4_V_1_state <= 2'd3;
        end else begin
            chan_data_4_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((ctrl_in_V_0_ack_out == 1'b1) & (ctrl_in_V_0_vld_out == 1'b1))) begin
            ctrl_in_V_0_sel_rd <= ~ctrl_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((ctrl_in_V_0_ack_in == 1'b1) & (ctrl_in_V_0_vld_in == 1'b1))) begin
            ctrl_in_V_0_sel_wr <= ~ctrl_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_in_V_0_state <= 2'd0;
    end else begin
        if ((((ctrl_in_V_0_state == 2'd2) & (ctrl_in_V_0_vld_in == 1'b0)) | ((ctrl_in_V_0_state == 2'd3) & (ctrl_in_V_0_vld_in == 1'b0) & (ctrl_in_V_0_ack_out == 1'b1)))) begin
            ctrl_in_V_0_state <= 2'd2;
        end else if ((((ctrl_in_V_0_state == 2'd1) & (ctrl_in_V_0_ack_out == 1'b0)) | ((ctrl_in_V_0_state == 2'd3) & (ctrl_in_V_0_ack_out == 1'b0) & (ctrl_in_V_0_vld_in == 1'b1)))) begin
            ctrl_in_V_0_state <= 2'd1;
        end else if (((~((ctrl_in_V_0_vld_in == 1'b0) & (ctrl_in_V_0_ack_out == 1'b1)) & ~((ctrl_in_V_0_ack_out == 1'b0) & (ctrl_in_V_0_vld_in == 1'b1)) & (ctrl_in_V_0_state == 2'd3)) | ((ctrl_in_V_0_state == 2'd1) & (ctrl_in_V_0_ack_out == 1'b1)) | ((ctrl_in_V_0_state == 2'd2) & (ctrl_in_V_0_vld_in == 1'b1)))) begin
            ctrl_in_V_0_state <= 2'd3;
        end else begin
            ctrl_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((ctrl_out_V_1_ack_out == 1'b1) & (ctrl_out_V_1_vld_out == 1'b1))) begin
            ctrl_out_V_1_sel_rd <= ~ctrl_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((ctrl_out_V_1_ack_in == 1'b1) & (ctrl_out_V_1_vld_in == 1'b1))) begin
            ctrl_out_V_1_sel_wr <= ~ctrl_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ctrl_out_V_1_state <= 2'd0;
    end else begin
        if ((((ctrl_out_V_1_state == 2'd2) & (ctrl_out_V_1_vld_in == 1'b0)) | ((ctrl_out_V_1_state == 2'd3) & (ctrl_out_V_1_vld_in == 1'b0) & (ctrl_out_V_1_ack_out == 1'b1)))) begin
            ctrl_out_V_1_state <= 2'd2;
        end else if ((((ctrl_out_V_1_state == 2'd1) & (ctrl_out_V_1_ack_out == 1'b0)) | ((ctrl_out_V_1_state == 2'd3) & (ctrl_out_V_1_ack_out == 1'b0) & (ctrl_out_V_1_vld_in == 1'b1)))) begin
            ctrl_out_V_1_state <= 2'd1;
        end else if (((~((ctrl_out_V_1_vld_in == 1'b0) & (ctrl_out_V_1_ack_out == 1'b1)) & ~((ctrl_out_V_1_ack_out == 1'b0) & (ctrl_out_V_1_vld_in == 1'b1)) & (ctrl_out_V_1_state == 2'd3)) | ((ctrl_out_V_1_state == 2'd1) & (ctrl_out_V_1_ack_out == 1'b1)) | ((ctrl_out_V_1_state == 2'd2) & (ctrl_out_V_1_vld_in == 1'b1)))) begin
            ctrl_out_V_1_state <= 2'd3;
        end else begin
            ctrl_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag1_fu_325_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag1_fu_325_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag1_fu_325_ap_ready == 1'b1)) begin
            grp_awgn_imag1_fu_325_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag2_fu_351_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag2_fu_351_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag2_fu_351_ap_ready == 1'b1)) begin
            grp_awgn_imag2_fu_351_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag3_fu_377_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag3_fu_377_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag3_fu_377_ap_ready == 1'b1)) begin
            grp_awgn_imag3_fu_377_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_imag4_fu_403_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_imag4_fu_403_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_imag4_fu_403_ap_ready == 1'b1)) begin
            grp_awgn_imag4_fu_403_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real1_fu_312_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real1_fu_312_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real1_fu_312_ap_ready == 1'b1)) begin
            grp_awgn_real1_fu_312_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real2_fu_338_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real2_fu_338_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real2_fu_338_ap_ready == 1'b1)) begin
            grp_awgn_real2_fu_338_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real3_fu_364_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real3_fu_364_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real3_fu_364_ap_ready == 1'b1)) begin
            grp_awgn_real3_fu_364_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_awgn_real4_fu_390_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_awgn_real4_fu_390_ap_start_reg <= 1'b1;
        end else if ((grp_awgn_real4_fu_390_ap_ready == 1'b1)) begin
            grp_awgn_real4_fu_390_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_modulate_bits_fu_416_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
            grp_modulate_bits_fu_416_ap_start_reg <= 1'b1;
        end else if ((grp_modulate_bits_fu_416_ap_ready == 1'b1)) begin
            grp_modulate_bits_fu_416_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_modulate_bits_fu_430_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
            grp_modulate_bits_fu_430_ap_start_reg <= 1'b1;
        end else if ((grp_modulate_bits_fu_430_ap_ready == 1'b1)) begin
            grp_modulate_bits_fu_430_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_modulate_bits_fu_444_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
            grp_modulate_bits_fu_444_ap_start_reg <= 1'b1;
        end else if ((grp_modulate_bits_fu_444_ap_ready == 1'b1)) begin
            grp_modulate_bits_fu_444_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_modulate_bits_fu_458_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) & (ap_enable_reg_pp0_iter13 == 1'b1))) begin
            grp_modulate_bits_fu_458_ap_start_reg <= 1'b1;
        end else if ((grp_modulate_bits_fu_458_ap_ready == 1'b1)) begin
            grp_modulate_bits_fu_458_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_V_0_sel_rd <= 1'b0;
    end else begin
        if (((hard_data_V_V_0_ack_out == 1'b1) & (hard_data_V_V_0_vld_out == 1'b1))) begin
            hard_data_V_V_0_sel_rd <= ~hard_data_V_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_V_0_sel_wr <= 1'b0;
    end else begin
        if (((hard_data_V_V_0_ack_in == 1'b1) & (hard_data_V_V_0_vld_in == 1'b1))) begin
            hard_data_V_V_0_sel_wr <= ~hard_data_V_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        hard_data_V_V_0_state <= 2'd0;
    end else begin
        if ((((hard_data_V_V_0_state == 2'd2) & (hard_data_V_V_0_vld_in == 1'b0)) | ((hard_data_V_V_0_state == 2'd3) & (hard_data_V_V_0_vld_in == 1'b0) & (hard_data_V_V_0_ack_out == 1'b1)))) begin
            hard_data_V_V_0_state <= 2'd2;
        end else if ((((hard_data_V_V_0_state == 2'd1) & (hard_data_V_V_0_ack_out == 1'b0)) | ((hard_data_V_V_0_state == 2'd3) & (hard_data_V_V_0_ack_out == 1'b0) & (hard_data_V_V_0_vld_in == 1'b1)))) begin
            hard_data_V_V_0_state <= 2'd1;
        end else if (((~((hard_data_V_V_0_vld_in == 1'b0) & (hard_data_V_V_0_ack_out == 1'b1)) & ~((hard_data_V_V_0_ack_out == 1'b0) & (hard_data_V_V_0_vld_in == 1'b1)) & (hard_data_V_V_0_state == 2'd3)) | ((hard_data_V_V_0_state == 2'd1) & (hard_data_V_V_0_ack_out == 1'b1)) | ((hard_data_V_V_0_state == 2'd2) & (hard_data_V_V_0_vld_in == 1'b1)))) begin
            hard_data_V_V_0_state <= 2'd3;
        end else begin
            hard_data_V_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_902)) begin
        if (((tmp_4_reg_1557 == 1'd1) & (tmp_5_reg_1553 == 1'd0))) begin
            ap_phi_reg_pp0_iter2_p_Val2_5_reg_302 <= hard_data_V_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_Val2_5_reg_302 <= ap_phi_reg_pp0_iter1_p_Val2_5_reg_302;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_4_fu_833_p2 == 1'd1) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        remaining_bits_fu_230 <= remaining_bits_1_fu_848_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_4_fu_833_p2 == 1'd0) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        remaining_bits_fu_230 <= remaining_bits_2_fu_838_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        remaining_bits_fu_230 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        symbols_reg_293 <= symbols_V_1_fu_858_p2;
    end else if (((ctrl_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        symbols_reg_293 <= ctrl_block_symbls_V_reg_1438;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_reg_pp0_iter1_p_Val2_5_reg_302 <= ap_phi_reg_pp0_iter0_p_Val2_5_reg_302;
    end
end

always @ (posedge ap_clk) begin
    if (((ctrl_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        awgn_snr_V_reg_1493 <= awgn_snr_V_fu_774_p3;
        sel_tmp3_reg_1529 <= sel_tmp3_fu_809_p2;
        sel_tmp5_reg_1537 <= sel_tmp5_fu_814_p2;
        sel_tmp7_reg_1545 <= sel_tmp7_fu_819_p2;
        sel_tmp_reg_1521 <= sel_tmp_fu_804_p2;
        sh_assign_cast_reg_1481[1 : 0] <= sh_assign_cast_fu_651_p1[1 : 0];
        tmp_10_cast_reg_1505[5 : 0] <= tmp_10_cast_fu_782_p1[5 : 0];
        tmp_17_cast_reg_1516[6 : 0] <= tmp_17_cast_fu_800_p1[6 : 0];
        tmp_6_reg_1511[5 : 0] <= tmp_6_fu_790_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_1_V_1_load_A == 1'b1)) begin
        chan_data_1_V_1_payload_A <= cast1_fu_1337_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_1_V_1_load_B == 1'b1)) begin
        chan_data_1_V_1_payload_B <= cast1_fu_1337_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_2_V_1_load_A == 1'b1)) begin
        chan_data_2_V_1_payload_A <= cast2_fu_1350_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_2_V_1_load_B == 1'b1)) begin
        chan_data_2_V_1_payload_B <= cast2_fu_1350_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_3_V_1_load_A == 1'b1)) begin
        chan_data_3_V_1_payload_A <= cast3_fu_1363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_3_V_1_load_B == 1'b1)) begin
        chan_data_3_V_1_payload_B <= cast3_fu_1363_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_4_V_1_load_A == 1'b1)) begin
        chan_data_4_V_1_payload_A <= cast4_fu_1376_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((chan_data_4_V_1_load_B == 1'b1)) begin
        chan_data_4_V_1_payload_B <= cast4_fu_1376_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_block_symbls_V_reg_1438 <= {{ctrl_in_V_0_data_out[52:39]}};
        ctrl_mod_type_V_reg_1413 <= {{ctrl_in_V_0_data_out[3:1]}};
        ctrl_skip_chan_V_reg_1426 <= ctrl_in_V_0_data_out[32'd4];
        p_Result_s_reg_1475 <= {{snr_mod_V_fu_588_p2[16:15]}};
        p_Val2_3_reg_1465 <= {{snr_mod_V_fu_588_p2[14:7]}};
        sh_assign_reg_1448 <= sh_assign_fu_580_p3;
        signbit_reg_1458 <= snr_mod_V_fu_588_p2[32'd16];
        snr_mod_V_reg_1453 <= snr_mod_V_fu_588_p2;
        tmp_23_reg_1470 <= snr_mod_V_fu_588_p2[32'd6];
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_in_V_0_load_A == 1'b1)) begin
        ctrl_in_V_0_payload_A <= ctrl_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_in_V_0_load_B == 1'b1)) begin
        ctrl_in_V_0_payload_B <= ctrl_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_out_V_1_load_A == 1'b1)) begin
        ctrl_out_V_1_payload_A <= tmp_162_cast_fu_519_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((ctrl_out_V_1_load_B == 1'b1)) begin
        ctrl_out_V_1_payload_B <= tmp_162_cast_fu_519_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_V_V_0_load_A == 1'b1)) begin
        hard_data_V_V_0_payload_A <= hard_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((hard_data_V_V_0_load_B == 1'b1)) begin
        hard_data_V_V_0_payload_B <= hard_data_V_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        p_3_reg_281 <= r_V_reg_1591;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        p_6_fu_214 <= p_7_fu_1065_p3;
        r_V_reg_1591 <= r_V_fu_1072_p2;
        symbol_1_V_fu_226 <= symbol_1_V_4_fu_981_p3;
        symbol_2_V_1_fu_222 <= symbol_2_V_7_fu_1009_p3;
        symbol_3_V_6_fu_218 <= symbol_3_V_5_fu_1037_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter1_reg == 1'd0))) begin
        p_7_reg_1586 <= p_7_fu_1065_p3;
        symbol_1_V_4_reg_1571 <= symbol_1_V_4_fu_981_p3;
        symbol_2_V_7_reg_1576 <= symbol_2_V_7_fu_1009_p3;
        symbol_3_V_5_reg_1581 <= symbol_3_V_5_fu_1037_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        p_7_reg_1586_pp0_iter10_reg <= p_7_reg_1586_pp0_iter9_reg;
        p_7_reg_1586_pp0_iter11_reg <= p_7_reg_1586_pp0_iter10_reg;
        p_7_reg_1586_pp0_iter12_reg <= p_7_reg_1586_pp0_iter11_reg;
        p_7_reg_1586_pp0_iter13_reg <= p_7_reg_1586_pp0_iter12_reg;
        p_7_reg_1586_pp0_iter3_reg <= p_7_reg_1586;
        p_7_reg_1586_pp0_iter4_reg <= p_7_reg_1586_pp0_iter3_reg;
        p_7_reg_1586_pp0_iter5_reg <= p_7_reg_1586_pp0_iter4_reg;
        p_7_reg_1586_pp0_iter6_reg <= p_7_reg_1586_pp0_iter5_reg;
        p_7_reg_1586_pp0_iter7_reg <= p_7_reg_1586_pp0_iter6_reg;
        p_7_reg_1586_pp0_iter8_reg <= p_7_reg_1586_pp0_iter7_reg;
        p_7_reg_1586_pp0_iter9_reg <= p_7_reg_1586_pp0_iter8_reg;
        symbol_1_V_4_reg_1571_pp0_iter10_reg <= symbol_1_V_4_reg_1571_pp0_iter9_reg;
        symbol_1_V_4_reg_1571_pp0_iter11_reg <= symbol_1_V_4_reg_1571_pp0_iter10_reg;
        symbol_1_V_4_reg_1571_pp0_iter12_reg <= symbol_1_V_4_reg_1571_pp0_iter11_reg;
        symbol_1_V_4_reg_1571_pp0_iter13_reg <= symbol_1_V_4_reg_1571_pp0_iter12_reg;
        symbol_1_V_4_reg_1571_pp0_iter3_reg <= symbol_1_V_4_reg_1571;
        symbol_1_V_4_reg_1571_pp0_iter4_reg <= symbol_1_V_4_reg_1571_pp0_iter3_reg;
        symbol_1_V_4_reg_1571_pp0_iter5_reg <= symbol_1_V_4_reg_1571_pp0_iter4_reg;
        symbol_1_V_4_reg_1571_pp0_iter6_reg <= symbol_1_V_4_reg_1571_pp0_iter5_reg;
        symbol_1_V_4_reg_1571_pp0_iter7_reg <= symbol_1_V_4_reg_1571_pp0_iter6_reg;
        symbol_1_V_4_reg_1571_pp0_iter8_reg <= symbol_1_V_4_reg_1571_pp0_iter7_reg;
        symbol_1_V_4_reg_1571_pp0_iter9_reg <= symbol_1_V_4_reg_1571_pp0_iter8_reg;
        symbol_2_V_7_reg_1576_pp0_iter10_reg <= symbol_2_V_7_reg_1576_pp0_iter9_reg;
        symbol_2_V_7_reg_1576_pp0_iter11_reg <= symbol_2_V_7_reg_1576_pp0_iter10_reg;
        symbol_2_V_7_reg_1576_pp0_iter12_reg <= symbol_2_V_7_reg_1576_pp0_iter11_reg;
        symbol_2_V_7_reg_1576_pp0_iter13_reg <= symbol_2_V_7_reg_1576_pp0_iter12_reg;
        symbol_2_V_7_reg_1576_pp0_iter3_reg <= symbol_2_V_7_reg_1576;
        symbol_2_V_7_reg_1576_pp0_iter4_reg <= symbol_2_V_7_reg_1576_pp0_iter3_reg;
        symbol_2_V_7_reg_1576_pp0_iter5_reg <= symbol_2_V_7_reg_1576_pp0_iter4_reg;
        symbol_2_V_7_reg_1576_pp0_iter6_reg <= symbol_2_V_7_reg_1576_pp0_iter5_reg;
        symbol_2_V_7_reg_1576_pp0_iter7_reg <= symbol_2_V_7_reg_1576_pp0_iter6_reg;
        symbol_2_V_7_reg_1576_pp0_iter8_reg <= symbol_2_V_7_reg_1576_pp0_iter7_reg;
        symbol_2_V_7_reg_1576_pp0_iter9_reg <= symbol_2_V_7_reg_1576_pp0_iter8_reg;
        symbol_3_V_5_reg_1581_pp0_iter10_reg <= symbol_3_V_5_reg_1581_pp0_iter9_reg;
        symbol_3_V_5_reg_1581_pp0_iter11_reg <= symbol_3_V_5_reg_1581_pp0_iter10_reg;
        symbol_3_V_5_reg_1581_pp0_iter12_reg <= symbol_3_V_5_reg_1581_pp0_iter11_reg;
        symbol_3_V_5_reg_1581_pp0_iter13_reg <= symbol_3_V_5_reg_1581_pp0_iter12_reg;
        symbol_3_V_5_reg_1581_pp0_iter3_reg <= symbol_3_V_5_reg_1581;
        symbol_3_V_5_reg_1581_pp0_iter4_reg <= symbol_3_V_5_reg_1581_pp0_iter3_reg;
        symbol_3_V_5_reg_1581_pp0_iter5_reg <= symbol_3_V_5_reg_1581_pp0_iter4_reg;
        symbol_3_V_5_reg_1581_pp0_iter6_reg <= symbol_3_V_5_reg_1581_pp0_iter5_reg;
        symbol_3_V_5_reg_1581_pp0_iter7_reg <= symbol_3_V_5_reg_1581_pp0_iter6_reg;
        symbol_3_V_5_reg_1581_pp0_iter8_reg <= symbol_3_V_5_reg_1581_pp0_iter7_reg;
        symbol_3_V_5_reg_1581_pp0_iter9_reg <= symbol_3_V_5_reg_1581_pp0_iter8_reg;
        tmp_5_reg_1553_pp0_iter10_reg <= tmp_5_reg_1553_pp0_iter9_reg;
        tmp_5_reg_1553_pp0_iter11_reg <= tmp_5_reg_1553_pp0_iter10_reg;
        tmp_5_reg_1553_pp0_iter12_reg <= tmp_5_reg_1553_pp0_iter11_reg;
        tmp_5_reg_1553_pp0_iter13_reg <= tmp_5_reg_1553_pp0_iter12_reg;
        tmp_5_reg_1553_pp0_iter14_reg <= tmp_5_reg_1553_pp0_iter13_reg;
        tmp_5_reg_1553_pp0_iter15_reg <= tmp_5_reg_1553_pp0_iter14_reg;
        tmp_5_reg_1553_pp0_iter16_reg <= tmp_5_reg_1553_pp0_iter15_reg;
        tmp_5_reg_1553_pp0_iter2_reg <= tmp_5_reg_1553_pp0_iter1_reg;
        tmp_5_reg_1553_pp0_iter3_reg <= tmp_5_reg_1553_pp0_iter2_reg;
        tmp_5_reg_1553_pp0_iter4_reg <= tmp_5_reg_1553_pp0_iter3_reg;
        tmp_5_reg_1553_pp0_iter5_reg <= tmp_5_reg_1553_pp0_iter4_reg;
        tmp_5_reg_1553_pp0_iter6_reg <= tmp_5_reg_1553_pp0_iter5_reg;
        tmp_5_reg_1553_pp0_iter7_reg <= tmp_5_reg_1553_pp0_iter6_reg;
        tmp_5_reg_1553_pp0_iter8_reg <= tmp_5_reg_1553_pp0_iter7_reg;
        tmp_5_reg_1553_pp0_iter9_reg <= tmp_5_reg_1553_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter14_reg == 1'd0))) begin
        p_Val2_10_reg_1621 <= grp_modulate_bits_fu_444_ap_return_1;
        p_Val2_11_reg_1626 <= grp_modulate_bits_fu_458_ap_return_0;
        p_Val2_12_reg_1631 <= grp_modulate_bits_fu_458_ap_return_1;
        p_Val2_29_reg_1596 <= grp_modulate_bits_fu_416_ap_return_0;
        p_Val2_6_reg_1611 <= grp_modulate_bits_fu_430_ap_return_1;
        p_Val2_7_reg_1616 <= grp_modulate_bits_fu_444_ap_return_0;
        p_Val2_8_reg_1601 <= grp_modulate_bits_fu_416_ap_return_1;
        p_Val2_9_reg_1606 <= grp_modulate_bits_fu_430_ap_return_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_fu_824_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_1557 <= tmp_4_fu_833_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_4_reg_1557_pp0_iter1_reg <= tmp_4_reg_1557;
        tmp_5_reg_1553 <= tmp_5_fu_824_p2;
        tmp_5_reg_1553_pp0_iter1_reg <= tmp_5_reg_1553;
    end
end

always @ (*) begin
    if ((tmp_5_fu_824_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_p_3_phi_fu_285_p4 = r_V_reg_1591;
    end else begin
        ap_phi_mux_p_3_phi_fu_285_p4 = p_3_reg_281;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_4_reg_1557_pp0_iter1_reg == 1'd0) & (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_p_Val2_5_phi_fu_305_p4 = ap_phi_mux_p_3_phi_fu_285_p4;
    end else begin
        ap_phi_mux_p_Val2_5_phi_fu_305_p4 = ap_phi_reg_pp0_iter2_p_Val2_5_reg_302;
    end
end

always @ (*) begin
    if ((chan_data_1_V_1_sel == 1'b1)) begin
        chan_data_1_V_1_data_out = chan_data_1_V_1_payload_B;
    end else begin
        chan_data_1_V_1_data_out = chan_data_1_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_1_V_1_vld_in = 1'b1;
    end else begin
        chan_data_1_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_1_V_TDATA_blk_n = chan_data_1_V_1_state[1'd1];
    end else begin
        chan_data_1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((chan_data_2_V_1_sel == 1'b1)) begin
        chan_data_2_V_1_data_out = chan_data_2_V_1_payload_B;
    end else begin
        chan_data_2_V_1_data_out = chan_data_2_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_2_V_1_vld_in = 1'b1;
    end else begin
        chan_data_2_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_2_V_TDATA_blk_n = chan_data_2_V_1_state[1'd1];
    end else begin
        chan_data_2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((chan_data_3_V_1_sel == 1'b1)) begin
        chan_data_3_V_1_data_out = chan_data_3_V_1_payload_B;
    end else begin
        chan_data_3_V_1_data_out = chan_data_3_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_3_V_1_vld_in = 1'b1;
    end else begin
        chan_data_3_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_3_V_TDATA_blk_n = chan_data_3_V_1_state[1'd1];
    end else begin
        chan_data_3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((chan_data_4_V_1_sel == 1'b1)) begin
        chan_data_4_V_1_data_out = chan_data_4_V_1_payload_B;
    end else begin
        chan_data_4_V_1_data_out = chan_data_4_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        chan_data_4_V_1_vld_in = 1'b1;
    end else begin
        chan_data_4_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (ap_enable_reg_pp0_iter16 == 1'b1)))) begin
        chan_data_4_V_TDATA_blk_n = chan_data_4_V_1_state[1'd1];
    end else begin
        chan_data_4_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_in_V_0_ack_out = 1'b1;
    end else begin
        ctrl_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((ctrl_in_V_0_sel == 1'b1)) begin
        ctrl_in_V_0_data_out = ctrl_in_V_0_payload_B;
    end else begin
        ctrl_in_V_0_data_out = ctrl_in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ctrl_in_V_TDATA_blk_n = ctrl_in_V_0_state[1'd0];
    end else begin
        ctrl_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((ctrl_out_V_1_sel == 1'b1)) begin
        ctrl_out_V_1_data_out = ctrl_out_V_1_payload_B;
    end else begin
        ctrl_out_V_1_data_out = ctrl_out_V_1_payload_A;
    end
end

always @ (*) begin
    if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_out_V_1_vld_in = 1'b1;
    end else begin
        ctrl_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        ctrl_out_V_TDATA_blk_n = ctrl_out_V_1_state[1'd1];
    end else begin
        ctrl_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_imag1_fu_325_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag1_fu_325_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_imag2_fu_351_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag2_fu_351_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_imag3_fu_377_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag3_fu_377_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_imag4_fu_403_ap_ce = 1'b1;
    end else begin
        grp_awgn_imag4_fu_403_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_real1_fu_312_ap_ce = 1'b1;
    end else begin
        grp_awgn_real1_fu_312_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_real2_fu_338_ap_ce = 1'b1;
    end else begin
        grp_awgn_real2_fu_338_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_real3_fu_364_ap_ce = 1'b1;
    end else begin
        grp_awgn_real3_fu_364_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((tmp_5_reg_1553_pp0_iter14_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter13_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter12_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter11_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter10_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter9_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter8_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter7_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter6_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter5_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter4_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter3_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter2_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter1_reg == 1'd0) | (tmp_5_reg_1553_pp0_iter15_reg == 1'd0) | (tmp_5_reg_1553 == 1'd0)))) begin
        grp_awgn_real4_fu_390_ap_ce = 1'b1;
    end else begin
        grp_awgn_real4_fu_390_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_modulate_bits_fu_416_ap_ce = 1'b1;
    end else begin
        grp_modulate_bits_fu_416_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_modulate_bits_fu_430_ap_ce = 1'b1;
    end else begin
        grp_modulate_bits_fu_430_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_modulate_bits_fu_444_ap_ce = 1'b1;
    end else begin
        grp_modulate_bits_fu_444_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_modulate_bits_fu_458_ap_ce = 1'b1;
    end else begin
        grp_modulate_bits_fu_458_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op126_read_state5 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hard_data_V_V_0_ack_out = 1'b1;
    end else begin
        hard_data_V_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((hard_data_V_V_0_sel == 1'b1)) begin
        hard_data_V_V_0_data_out = hard_data_V_V_0_payload_B;
    end else begin
        hard_data_V_V_0_data_out = hard_data_V_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_4_reg_1557 == 1'd1) & (tmp_5_reg_1553 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        hard_data_V_V_TDATA_blk_n = hard_data_V_V_0_state[1'd0];
    end else begin
        hard_data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((ctrl_out_V_1_ack_in == 1'b0) | (ctrl_in_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ctrl_out_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_5_fu_824_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (tmp_5_fu_824_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if ((~((ctrl_out_V_1_ack_in == 1'b0) | (chan_data_4_V_1_ack_in == 1'b0) | (chan_data_3_V_1_ack_in == 1'b0) | (chan_data_2_V_1_ack_in == 1'b0) | (chan_data_1_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_689_p2 = ((p_Result_s_reg_1475 == 2'd3) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_694_p2 = ((p_Result_s_reg_1475 == 2'd0) ? 1'b1 : 1'b0);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_predicate_op126_read_state5 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((ap_predicate_op126_read_state5 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp0_iter16 == 1'b1)) | ((ap_predicate_op126_read_state5 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = (((tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (chan_data_4_V_1_ack_in == 1'b0)) | ((tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (chan_data_3_V_1_ack_in == 1'b0)) | ((tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (chan_data_2_V_1_ack_in == 1'b0)) | ((tmp_5_reg_1553_pp0_iter15_reg == 1'd0) & (chan_data_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state20_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = (((tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (chan_data_4_V_1_ack_in == 1'b0)) | ((tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (chan_data_3_V_1_ack_in == 1'b0)) | ((tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (chan_data_2_V_1_ack_in == 1'b0)) | ((tmp_5_reg_1553_pp0_iter16_reg == 1'd0) & (chan_data_1_V_1_ack_in == 1'b0)));
end

assign ap_block_state21_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22 = ((ctrl_out_V_1_ack_in == 1'b0) | (chan_data_4_V_1_ack_in == 1'b0) | (chan_data_3_V_1_ack_in == 1'b0) | (chan_data_2_V_1_ack_in == 1'b0) | (chan_data_1_V_1_ack_in == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter1 = ((ap_predicate_op126_read_state5 == 1'b1) & (hard_data_V_V_0_vld_out == 1'b0));
end

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_902 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_Val2_5_reg_302 = 'bx;

always @ (*) begin
    ap_predicate_op126_read_state5 = ((tmp_4_reg_1557 == 1'd1) & (tmp_5_reg_1553 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign awgn_snr_V_fu_774_p3 = ((brmerge_fu_752_p2[0:0] === 1'b1) ? p_mux_fu_758_p3 : p_s_fu_766_p3);

assign brmerge_fu_752_p2 = (p_39_demorgan_i_not_fu_746_p2 | neg_src_not_fu_734_p2);

assign brmerge_i_i_not_fu_740_p2 = (p_39_demorgan_i_fu_724_p2 & neg_src_not_fu_734_p2);

assign carry_fu_683_p2 = (tmp_s_fu_677_p2 & tmp_24_fu_657_p3);

assign cast1_fu_1337_p1 = $signed(tmp_276_fu_1329_p3);

assign cast2_fu_1350_p1 = $signed(tmp_381_fu_1342_p3);

assign cast3_fu_1363_p1 = $signed(tmp_486_fu_1355_p3);

assign cast4_fu_1376_p1 = $signed(tmp_591_fu_1368_p3);

assign chan_data_1_V_1_ack_in = chan_data_1_V_1_state[1'd1];

assign chan_data_1_V_1_ack_out = chan_data_1_V_TREADY;

assign chan_data_1_V_1_load_A = (~chan_data_1_V_1_sel_wr & chan_data_1_V_1_state_cmp_full);

assign chan_data_1_V_1_load_B = (chan_data_1_V_1_state_cmp_full & chan_data_1_V_1_sel_wr);

assign chan_data_1_V_1_sel = chan_data_1_V_1_sel_rd;

assign chan_data_1_V_1_state_cmp_full = ((chan_data_1_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_1_V_1_vld_out = chan_data_1_V_1_state[1'd0];

assign chan_data_1_V_TDATA = chan_data_1_V_1_data_out;

assign chan_data_1_V_TVALID = chan_data_1_V_1_state[1'd0];

assign chan_data_2_V_1_ack_in = chan_data_2_V_1_state[1'd1];

assign chan_data_2_V_1_ack_out = chan_data_2_V_TREADY;

assign chan_data_2_V_1_load_A = (~chan_data_2_V_1_sel_wr & chan_data_2_V_1_state_cmp_full);

assign chan_data_2_V_1_load_B = (chan_data_2_V_1_state_cmp_full & chan_data_2_V_1_sel_wr);

assign chan_data_2_V_1_sel = chan_data_2_V_1_sel_rd;

assign chan_data_2_V_1_state_cmp_full = ((chan_data_2_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_2_V_1_vld_out = chan_data_2_V_1_state[1'd0];

assign chan_data_2_V_TDATA = chan_data_2_V_1_data_out;

assign chan_data_2_V_TVALID = chan_data_2_V_1_state[1'd0];

assign chan_data_3_V_1_ack_in = chan_data_3_V_1_state[1'd1];

assign chan_data_3_V_1_ack_out = chan_data_3_V_TREADY;

assign chan_data_3_V_1_load_A = (~chan_data_3_V_1_sel_wr & chan_data_3_V_1_state_cmp_full);

assign chan_data_3_V_1_load_B = (chan_data_3_V_1_state_cmp_full & chan_data_3_V_1_sel_wr);

assign chan_data_3_V_1_sel = chan_data_3_V_1_sel_rd;

assign chan_data_3_V_1_state_cmp_full = ((chan_data_3_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_3_V_1_vld_out = chan_data_3_V_1_state[1'd0];

assign chan_data_3_V_TDATA = chan_data_3_V_1_data_out;

assign chan_data_3_V_TVALID = chan_data_3_V_1_state[1'd0];

assign chan_data_4_V_1_ack_in = chan_data_4_V_1_state[1'd1];

assign chan_data_4_V_1_ack_out = chan_data_4_V_TREADY;

assign chan_data_4_V_1_load_A = (~chan_data_4_V_1_sel_wr & chan_data_4_V_1_state_cmp_full);

assign chan_data_4_V_1_load_B = (chan_data_4_V_1_state_cmp_full & chan_data_4_V_1_sel_wr);

assign chan_data_4_V_1_sel = chan_data_4_V_1_sel_rd;

assign chan_data_4_V_1_state_cmp_full = ((chan_data_4_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign chan_data_4_V_1_vld_out = chan_data_4_V_1_state[1'd0];

assign chan_data_4_V_TDATA = chan_data_4_V_1_data_out;

assign chan_data_4_V_TVALID = chan_data_4_V_1_state[1'd0];

assign ctrl_in_V_0_ack_in = ctrl_in_V_0_state[1'd1];

assign ctrl_in_V_0_load_A = (~ctrl_in_V_0_sel_wr & ctrl_in_V_0_state_cmp_full);

assign ctrl_in_V_0_load_B = (ctrl_in_V_0_state_cmp_full & ctrl_in_V_0_sel_wr);

assign ctrl_in_V_0_sel = ctrl_in_V_0_sel_rd;

assign ctrl_in_V_0_state_cmp_full = ((ctrl_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign ctrl_in_V_0_vld_in = ctrl_in_V_TVALID;

assign ctrl_in_V_0_vld_out = ctrl_in_V_0_state[1'd0];

assign ctrl_in_V_TREADY = ctrl_in_V_0_state[1'd1];

assign ctrl_out_V_1_ack_in = ctrl_out_V_1_state[1'd1];

assign ctrl_out_V_1_ack_out = ctrl_out_V_TREADY;

assign ctrl_out_V_1_load_A = (~ctrl_out_V_1_sel_wr & ctrl_out_V_1_state_cmp_full);

assign ctrl_out_V_1_load_B = (ctrl_out_V_1_state_cmp_full & ctrl_out_V_1_sel_wr);

assign ctrl_out_V_1_sel = ctrl_out_V_1_sel_rd;

assign ctrl_out_V_1_state_cmp_full = ((ctrl_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign ctrl_out_V_1_vld_out = ctrl_out_V_1_state[1'd0];

assign ctrl_out_V_TDATA = ctrl_out_V_1_data_out;

assign ctrl_out_V_TVALID = ctrl_out_V_1_state[1'd0];

assign ctrl_snr_V_fu_499_p4 = {{ctrl_in_V_0_data_out[21:5]}};

assign deleted_zeros_fu_699_p3 = ((carry_fu_683_p2[0:0] === 1'b1) ? Range1_all_ones_fu_689_p2 : Range1_all_zeros_fu_694_p2);

assign err_sample_imag_1_V_1_fu_1207_p2 = ($signed(err_sample_imag_1_V_fu_1172_p1) + $signed(tmp_10_fu_1203_p1));

assign err_sample_imag_1_V_3_fu_1280_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_imag_1_V_fu_1172_p1 : err_sample_imag_1_V_1_fu_1207_p2);

assign err_sample_imag_1_V_fu_1172_p1 = $signed(p_Val2_8_reg_1601);

assign err_sample_imag_2_V_1_fu_1227_p2 = ($signed(err_sample_imag_2_V_fu_1178_p1) + $signed(tmp_12_fu_1223_p1));

assign err_sample_imag_2_V_3_fu_1294_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_imag_2_V_fu_1178_p1 : err_sample_imag_2_V_1_fu_1227_p2);

assign err_sample_imag_2_V_fu_1178_p1 = $signed(p_Val2_6_reg_1611);

assign err_sample_imag_3_V_1_fu_1247_p2 = ($signed(err_sample_imag_3_V_fu_1184_p1) + $signed(tmp_14_fu_1243_p1));

assign err_sample_imag_3_V_3_fu_1308_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_imag_3_V_fu_1184_p1 : err_sample_imag_3_V_1_fu_1247_p2);

assign err_sample_imag_3_V_fu_1184_p1 = $signed(p_Val2_10_reg_1621);

assign err_sample_imag_4_V_1_fu_1267_p2 = ($signed(err_sample_imag_4_V_fu_1190_p1) + $signed(tmp_16_fu_1263_p1));

assign err_sample_imag_4_V_3_fu_1322_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_imag_4_V_fu_1190_p1 : err_sample_imag_4_V_1_fu_1267_p2);

assign err_sample_imag_4_V_fu_1190_p1 = $signed(p_Val2_12_reg_1631);

assign err_sample_real_1_V_1_fu_1197_p2 = ($signed(err_sample_real_1_V_fu_1169_p1) + $signed(tmp_8_fu_1193_p1));

assign err_sample_real_1_V_3_fu_1273_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_real_1_V_fu_1169_p1 : err_sample_real_1_V_1_fu_1197_p2);

assign err_sample_real_1_V_fu_1169_p1 = $signed(p_Val2_29_reg_1596);

assign err_sample_real_2_V_1_fu_1217_p2 = ($signed(err_sample_real_2_V_fu_1175_p1) + $signed(tmp_11_fu_1213_p1));

assign err_sample_real_2_V_3_fu_1287_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_real_2_V_fu_1175_p1 : err_sample_real_2_V_1_fu_1217_p2);

assign err_sample_real_2_V_fu_1175_p1 = $signed(p_Val2_9_reg_1606);

assign err_sample_real_3_V_1_fu_1237_p2 = ($signed(err_sample_real_3_V_fu_1181_p1) + $signed(tmp_13_fu_1233_p1));

assign err_sample_real_3_V_3_fu_1301_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_real_3_V_fu_1181_p1 : err_sample_real_3_V_1_fu_1237_p2);

assign err_sample_real_3_V_fu_1181_p1 = $signed(p_Val2_7_reg_1616);

assign err_sample_real_4_V_1_fu_1257_p2 = ($signed(err_sample_real_4_V_fu_1187_p1) + $signed(tmp_15_fu_1253_p1));

assign err_sample_real_4_V_3_fu_1315_p3 = ((ctrl_skip_chan_V_reg_1426[0:0] === 1'b1) ? err_sample_real_4_V_fu_1187_p1 : err_sample_real_4_V_1_fu_1257_p2);

assign err_sample_real_4_V_fu_1187_p1 = $signed(p_Val2_11_reg_1626);

assign grp_awgn_imag1_fu_325_ap_start = grp_awgn_imag1_fu_325_ap_start_reg;

assign grp_awgn_imag2_fu_351_ap_start = grp_awgn_imag2_fu_351_ap_start_reg;

assign grp_awgn_imag3_fu_377_ap_start = grp_awgn_imag3_fu_377_ap_start_reg;

assign grp_awgn_imag4_fu_403_ap_start = grp_awgn_imag4_fu_403_ap_start_reg;

assign grp_awgn_real1_fu_312_ap_start = grp_awgn_real1_fu_312_ap_start_reg;

assign grp_awgn_real2_fu_338_ap_start = grp_awgn_real2_fu_338_ap_start_reg;

assign grp_awgn_real3_fu_364_ap_start = grp_awgn_real3_fu_364_ap_start_reg;

assign grp_awgn_real4_fu_390_ap_start = grp_awgn_real4_fu_390_ap_start_reg;

assign grp_modulate_bits_fu_416_ap_start = grp_modulate_bits_fu_416_ap_start_reg;

assign grp_modulate_bits_fu_430_ap_start = grp_modulate_bits_fu_430_ap_start_reg;

assign grp_modulate_bits_fu_444_ap_start = grp_modulate_bits_fu_444_ap_start_reg;

assign grp_modulate_bits_fu_458_ap_start = grp_modulate_bits_fu_458_ap_start_reg;

assign hard_data_V_V_0_ack_in = hard_data_V_V_0_state[1'd1];

assign hard_data_V_V_0_load_A = (hard_data_V_V_0_state_cmp_full & ~hard_data_V_V_0_sel_wr);

assign hard_data_V_V_0_load_B = (hard_data_V_V_0_state_cmp_full & hard_data_V_V_0_sel_wr);

assign hard_data_V_V_0_sel = hard_data_V_V_0_sel_rd;

assign hard_data_V_V_0_state_cmp_full = ((hard_data_V_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign hard_data_V_V_0_vld_in = hard_data_V_V_TVALID;

assign hard_data_V_V_0_vld_out = hard_data_V_V_0_state[1'd0];

assign hard_data_V_V_TREADY = hard_data_V_V_0_state[1'd1];

assign neg_src_fu_719_p2 = (tmp_9_fu_713_p2 & signbit_reg_1458);

assign neg_src_not_fu_734_p2 = (signbit_not_fu_729_p2 | p_38_i_fu_707_p2);

assign p_1_cast_fu_572_p3 = ((tmp_7_fu_524_p2[0:0] === 1'b1) ? 2'd0 : 2'd1);

assign p_38_i_fu_707_p2 = (carry_fu_683_p2 & Range1_all_ones_fu_689_p2);

assign p_39_demorgan_i_fu_724_p2 = (signbit_reg_1458 | deleted_zeros_fu_699_p3);

assign p_39_demorgan_i_not_fu_746_p2 = (p_39_demorgan_i_fu_724_p2 ^ 1'd1);

assign p_7_fu_1065_p3 = ((sel_tmp7_reg_1545[0:0] === 1'b1) ? symbol_4_V_fu_900_p4 : sel_tmp4_fu_1058_p3);

assign p_Val2_13_fu_1129_p2 = $signed(grp_awgn_real1_fu_312_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_14_fu_1134_p2 = $signed(grp_awgn_imag1_fu_325_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_15_fu_1139_p2 = $signed(grp_awgn_real2_fu_338_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_16_fu_1144_p2 = $signed(grp_awgn_imag2_fu_351_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_17_fu_1149_p2 = $signed(grp_awgn_real3_fu_364_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_18_fu_1154_p2 = $signed(grp_awgn_imag3_fu_377_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_19_fu_1159_p2 = $signed(grp_awgn_real4_fu_390_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_1_fu_560_p3 = ((tmp_fu_554_p2[0:0] === 1'b1) ? tmp_5_cast_fu_546_p3 : 16'd0);

assign p_Val2_20_fu_1164_p2 = $signed(grp_awgn_imag4_fu_403_ap_return) >>> sh_assign_cast_reg_1481;

assign p_Val2_2_cast_fu_568_p1 = $signed(p_Val2_1_fu_560_p3);

assign p_Val2_4_fu_664_p2 = (p_Val2_3_reg_1465 + tmp_3_fu_654_p1);

assign p_mux_fu_758_p3 = ((brmerge_i_i_not_fu_740_p2[0:0] === 1'b1) ? p_Val2_4_fu_664_p2 : 8'd255);

assign p_s_fu_766_p3 = ((neg_src_fu_719_p2[0:0] === 1'b1) ? 8'd0 : p_Val2_4_fu_664_p2);

assign r_V_fu_1072_p2 = ap_phi_mux_p_Val2_5_phi_fu_305_p4 >> tmp_6_reg_1511;

assign remaining_bits_1_fu_848_p2 = (tmp_17_cast_reg_1516 + remaining_bits_fu_230);

assign remaining_bits_2_fu_838_p2 = (remaining_bits_fu_230 - tmp_10_cast_reg_1505);

assign sel_tmp1_fu_1044_p3 = ((sel_tmp_reg_1521[0:0] === 1'b1) ? symbol_4_V_2_fu_950_p4 : p_6_fu_214);

assign sel_tmp2_fu_1051_p3 = ((sel_tmp3_reg_1529[0:0] === 1'b1) ? 6'd0 : sel_tmp1_fu_1044_p3);

assign sel_tmp3_fu_809_p2 = ((ctrl_mod_type_V_reg_1413 == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_1058_p3 = ((sel_tmp5_reg_1537[0:0] === 1'b1) ? symbol_4_V_3_fu_920_p4 : sel_tmp2_fu_1051_p3);

assign sel_tmp5_fu_814_p2 = ((ctrl_mod_type_V_reg_1413 == 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp7_fu_819_p2 = ((ctrl_mod_type_V_reg_1413 == 3'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_804_p2 = ((ctrl_mod_type_V_reg_1413 == 3'd3) ? 1'b1 : 1'b0);

assign sh_assign_cast_fu_651_p1 = sh_assign_reg_1448;

assign sh_assign_fu_580_p3 = ((tmp_20_fu_530_p3[0:0] === 1'b1) ? p_1_cast_fu_572_p3 : 2'd2);

assign signbit_not_fu_729_p2 = (signbit_reg_1458 ^ 1'd1);

assign snr_mod_V_fu_588_p2 = ($signed(ctrl_snr_V_fu_499_p4) - $signed(p_Val2_2_cast_fu_568_p1));

assign symbol_1_V_1_fu_960_p3 = ((sel_tmp_reg_1521[0:0] === 1'b1) ? symbol_1_V_5_fu_876_p1 : symbol_1_V_fu_226);

assign symbol_1_V_2_fu_967_p3 = ((sel_tmp3_reg_1529[0:0] === 1'b1) ? symbol_1_V_5_fu_876_p1 : symbol_1_V_1_fu_960_p3);

assign symbol_1_V_3_fu_974_p3 = ((sel_tmp5_reg_1537[0:0] === 1'b1) ? symbol_1_V_5_fu_876_p1 : symbol_1_V_2_fu_967_p3);

assign symbol_1_V_4_fu_981_p3 = ((sel_tmp7_reg_1545[0:0] === 1'b1) ? symbol_1_V_5_fu_876_p1 : symbol_1_V_3_fu_974_p3);

assign symbol_1_V_5_fu_876_p1 = ap_phi_mux_p_Val2_5_phi_fu_305_p4[5:0];

assign symbol_2_V_4_fu_988_p3 = ((sel_tmp_reg_1521[0:0] === 1'b1) ? symbol_4_V_3_fu_920_p4 : symbol_2_V_1_fu_222);

assign symbol_2_V_5_fu_995_p3 = ((sel_tmp3_reg_1529[0:0] === 1'b1) ? symbol_3_V_10_fu_910_p4 : symbol_2_V_4_fu_988_p3);

assign symbol_2_V_6_fu_1002_p3 = ((sel_tmp5_reg_1537[0:0] === 1'b1) ? symbol_3_V_9_fu_890_p4 : symbol_2_V_5_fu_995_p3);

assign symbol_2_V_7_fu_1009_p3 = ((sel_tmp7_reg_1545[0:0] === 1'b1) ? symbol_2_V_fu_880_p4 : symbol_2_V_6_fu_1002_p3);

assign symbol_2_V_fu_880_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[6:1]}};

assign symbol_3_V_10_fu_910_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[9:4]}};

assign symbol_3_V_1_fu_940_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[17:12]}};

assign symbol_3_V_2_fu_1016_p3 = ((sel_tmp_reg_1521[0:0] === 1'b1) ? symbol_3_V_1_fu_940_p4 : symbol_3_V_6_fu_218);

assign symbol_3_V_3_fu_1023_p3 = ((sel_tmp3_reg_1529[0:0] === 1'b1) ? symbol_3_V_fu_930_p4 : symbol_3_V_2_fu_1016_p3);

assign symbol_3_V_4_fu_1030_p3 = ((sel_tmp5_reg_1537[0:0] === 1'b1) ? symbol_3_V_10_fu_910_p4 : symbol_3_V_3_fu_1023_p3);

assign symbol_3_V_5_fu_1037_p3 = ((sel_tmp7_reg_1545[0:0] === 1'b1) ? symbol_3_V_9_fu_890_p4 : symbol_3_V_4_fu_1030_p3);

assign symbol_3_V_9_fu_890_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[7:2]}};

assign symbol_3_V_fu_930_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[13:8]}};

assign symbol_4_V_2_fu_950_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[29:24]}};

assign symbol_4_V_3_fu_920_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[11:6]}};

assign symbol_4_V_fu_900_p4 = {{ap_phi_mux_p_Val2_5_phi_fu_305_p4[8:3]}};

assign symbols_V_1_fu_858_p2 = ($signed(14'd16383) + $signed(symbols_reg_293));

assign tmp_10_cast_fu_782_p1 = p_2_fu_630_p10;

assign tmp_10_fu_1203_p1 = $signed(p_Val2_14_fu_1134_p2);

assign tmp_11_cast_fu_786_p1 = p_2_fu_630_p10;

assign tmp_11_fu_1213_p1 = $signed(p_Val2_15_fu_1139_p2);

assign tmp_12_fu_1223_p1 = $signed(p_Val2_16_fu_1144_p2);

assign tmp_13_fu_1233_p1 = $signed(p_Val2_17_fu_1149_p2);

assign tmp_14_fu_1243_p1 = $signed(p_Val2_18_fu_1154_p2);

assign tmp_15_fu_1253_p1 = $signed(p_Val2_19_fu_1159_p2);

assign tmp_162_cast_fu_519_p1 = $signed(tmp_27_fu_477_p1);

assign tmp_16_fu_1263_p1 = $signed(p_Val2_20_fu_1164_p2);

assign tmp_17_cast_fu_800_p1 = tmp_2_fu_794_p2;

assign tmp_20_fu_530_p3 = ctrl_in_V_0_data_out[32'd21];

assign tmp_21_fu_538_p3 = ctrl_in_V_0_data_out[32'd21];

assign tmp_24_fu_657_p3 = snr_mod_V_reg_1453[32'd14];

assign tmp_25_fu_669_p3 = p_Val2_4_fu_664_p2[32'd7];

assign tmp_276_fu_1329_p3 = {{err_sample_imag_1_V_3_fu_1280_p3}, {err_sample_real_1_V_3_fu_1273_p3}};

assign tmp_27_fu_477_p1 = ctrl_in_V_0_data_out[57:0];

assign tmp_2_fu_794_p2 = ($signed(7'd96) - $signed(tmp_11_cast_fu_786_p1));

assign tmp_381_fu_1342_p3 = {{err_sample_imag_2_V_3_fu_1294_p3}, {err_sample_real_2_V_3_fu_1287_p3}};

assign tmp_3_fu_654_p1 = tmp_23_reg_1470;

assign tmp_486_fu_1355_p3 = {{err_sample_imag_3_V_3_fu_1308_p3}, {err_sample_real_3_V_3_fu_1301_p3}};

assign tmp_4_fu_833_p2 = (($signed(remaining_bits_fu_230) < $signed(tmp_10_cast_reg_1505)) ? 1'b1 : 1'b0);

assign tmp_591_fu_1368_p3 = {{err_sample_imag_4_V_3_fu_1322_p3}, {err_sample_real_4_V_3_fu_1315_p3}};

assign tmp_5_cast_fu_546_p3 = ((tmp_7_fu_524_p2[0:0] === 1'b1) ? 16'd40875 : 16'd53205);

assign tmp_5_fu_824_p2 = ((symbols_reg_293 == 14'd0) ? 1'b1 : 1'b0);

assign tmp_6_fu_790_p1 = p_2_fu_630_p10;

assign tmp_7_fu_524_p2 = (($signed(ctrl_snr_V_fu_499_p4) < $signed(17'd118741)) ? 1'b1 : 1'b0);

assign tmp_8_fu_1193_p1 = $signed(p_Val2_13_fu_1129_p2);

assign tmp_9_fu_713_p2 = (p_38_i_fu_707_p2 ^ 1'd1);

assign tmp_fu_554_p2 = (tmp_7_fu_524_p2 | tmp_21_fu_538_p3);

assign tmp_s_fu_677_p2 = (tmp_25_fu_669_p3 ^ 1'd1);

always @ (posedge ap_clk) begin
    sh_assign_cast_reg_1481[17:2] <= 16'b0000000000000000;
    tmp_10_cast_reg_1505[7:6] <= 2'b00;
    tmp_6_reg_1511[95:6] <= 90'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    tmp_17_cast_reg_1516[7] <= 1'b0;
end

endmodule //mod_and_chan_4x
