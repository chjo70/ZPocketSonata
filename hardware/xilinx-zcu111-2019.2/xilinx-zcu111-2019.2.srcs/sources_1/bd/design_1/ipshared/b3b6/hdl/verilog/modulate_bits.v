// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1.0
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module modulate_bits (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        modulation_type,
        symbol_V,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [2:0] modulation_type;
input  [5:0] symbol_V;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [3:0] QAM16_LUT_M_real_V_address0;
reg    QAM16_LUT_M_real_V_ce0;
wire   [14:0] QAM16_LUT_M_real_V_q0;
wire   [3:0] QAM16_LUT_M_imag_V_address0;
reg    QAM16_LUT_M_imag_V_ce0;
wire   [14:0] QAM16_LUT_M_imag_V_q0;
wire   [5:0] QAM64_LUT_M_real_V_address0;
reg    QAM64_LUT_M_real_V_ce0;
wire   [15:0] QAM64_LUT_M_real_V_q0;
wire   [5:0] QAM64_LUT_M_imag_V_address0;
reg    QAM64_LUT_M_imag_V_ce0;
wire   [15:0] QAM64_LUT_M_imag_V_q0;
reg   [2:0] modulation_type_read_reg_240;
wire   [0:0] tmp_fu_100_p1;
reg   [0:0] tmp_reg_247;
wire   [1:0] tmp_1_fu_104_p1;
reg   [1:0] tmp_1_reg_252;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_3_fu_112_p1;
wire   [63:0] tmp_4_fu_118_p1;
wire   [3:0] tmp_2_fu_108_p1;
wire   [0:0] sel_tmp2_fu_165_p2;
wire  signed [15:0] channel_data_M_imag_2_fu_161_p1;
wire   [0:0] sel_tmp4_fu_178_p2;
wire   [15:0] channel_data_M_imag_fu_144_p6;
wire   [15:0] sel_tmp3_fu_170_p3;
wire   [0:0] sel_tmp6_fu_191_p2;
wire   [15:0] channel_data_M_real_fu_124_p3;
wire   [15:0] sel_tmp5_fu_183_p3;
wire  signed [15:0] channel_data_M_real_3_fu_157_p1;
wire   [15:0] channel_data_M_real_1_fu_131_p6;
wire   [15:0] sel_tmp_fu_204_p3;
wire   [15:0] sel_tmp1_fu_212_p3;
wire   [15:0] complex_M_real_V_wr_fu_220_p3;
wire   [15:0] complex_M_imag_V_wr_fu_196_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

modulate_bits_QAMbkb #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
QAM16_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM16_LUT_M_real_V_address0),
    .ce0(QAM16_LUT_M_real_V_ce0),
    .q0(QAM16_LUT_M_real_V_q0)
);

modulate_bits_QAMcud #(
    .DataWidth( 15 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
QAM16_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM16_LUT_M_imag_V_address0),
    .ce0(QAM16_LUT_M_imag_V_ce0),
    .q0(QAM16_LUT_M_imag_V_q0)
);

modulate_bits_QAMdEe #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
QAM64_LUT_M_real_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM64_LUT_M_real_V_address0),
    .ce0(QAM64_LUT_M_real_V_ce0),
    .q0(QAM64_LUT_M_real_V_q0)
);

modulate_bits_QAMeOg #(
    .DataWidth( 16 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
QAM64_LUT_M_imag_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(QAM64_LUT_M_imag_V_address0),
    .ce0(QAM64_LUT_M_imag_V_ce0),
    .q0(QAM64_LUT_M_imag_V_q0)
);

mod_and_chan_4x_mfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mfYi_U1(
    .din0(16'd11585),
    .din1(16'd53950),
    .din2(16'd11585),
    .din3(16'd53950),
    .din4(tmp_1_reg_252),
    .dout(channel_data_M_real_1_fu_131_p6)
);

mod_and_chan_4x_mfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mod_and_chan_4x_mfYi_U2(
    .din0(16'd11585),
    .din1(16'd11585),
    .din2(16'd53950),
    .din3(16'd53950),
    .din4(tmp_1_reg_252),
    .dout(channel_data_M_imag_fu_144_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        modulation_type_read_reg_240 <= modulation_type;
        tmp_1_reg_252 <= tmp_1_fu_104_p1;
        tmp_reg_247 <= tmp_fu_100_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        QAM16_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        QAM16_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        QAM16_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        QAM16_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        QAM64_LUT_M_imag_V_ce0 = 1'b1;
    end else begin
        QAM64_LUT_M_imag_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        QAM64_LUT_M_real_V_ce0 = 1'b1;
    end else begin
        QAM64_LUT_M_real_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign QAM16_LUT_M_imag_V_address0 = tmp_3_fu_112_p1;

assign QAM16_LUT_M_real_V_address0 = tmp_3_fu_112_p1;

assign QAM64_LUT_M_imag_V_address0 = tmp_4_fu_118_p1;

assign QAM64_LUT_M_real_V_address0 = tmp_4_fu_118_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = complex_M_real_V_wr_fu_220_p3;

assign ap_return_1 = complex_M_imag_V_wr_fu_196_p3;

assign channel_data_M_imag_2_fu_161_p1 = $signed(QAM16_LUT_M_imag_V_q0);

assign channel_data_M_real_3_fu_157_p1 = $signed(QAM16_LUT_M_real_V_q0);

assign channel_data_M_real_fu_124_p3 = ((tmp_reg_247[0:0] === 1'b1) ? 16'd53950 : 16'd11585);

assign complex_M_imag_V_wr_fu_196_p3 = ((sel_tmp6_fu_191_p2[0:0] === 1'b1) ? channel_data_M_real_fu_124_p3 : sel_tmp5_fu_183_p3);

assign complex_M_real_V_wr_fu_220_p3 = ((sel_tmp6_fu_191_p2[0:0] === 1'b1) ? channel_data_M_real_fu_124_p3 : sel_tmp1_fu_212_p3);

assign sel_tmp1_fu_212_p3 = ((sel_tmp4_fu_178_p2[0:0] === 1'b1) ? channel_data_M_real_1_fu_131_p6 : sel_tmp_fu_204_p3);

assign sel_tmp2_fu_165_p2 = ((modulation_type_read_reg_240 == 3'd2) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_170_p3 = ((sel_tmp2_fu_165_p2[0:0] === 1'b1) ? channel_data_M_imag_2_fu_161_p1 : QAM64_LUT_M_imag_V_q0);

assign sel_tmp4_fu_178_p2 = ((modulation_type_read_reg_240 == 3'd1) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_183_p3 = ((sel_tmp4_fu_178_p2[0:0] === 1'b1) ? channel_data_M_imag_fu_144_p6 : sel_tmp3_fu_170_p3);

assign sel_tmp6_fu_191_p2 = ((modulation_type_read_reg_240 == 3'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_204_p3 = ((sel_tmp2_fu_165_p2[0:0] === 1'b1) ? channel_data_M_real_3_fu_157_p1 : QAM64_LUT_M_real_V_q0);

assign tmp_1_fu_104_p1 = symbol_V[1:0];

assign tmp_2_fu_108_p1 = symbol_V[3:0];

assign tmp_3_fu_112_p1 = tmp_2_fu_108_p1;

assign tmp_4_fu_118_p1 = symbol_V;

assign tmp_fu_100_p1 = symbol_V[0:0];

endmodule //modulate_bits
