/* 02mm.cdf - Memory Management component description file */

/*
 * Copyright (c) 2003-2010, 2013-2017 Wind River Systems, Inc.
 *
 * The right to copy, distribute, modify or otherwise make use
 * of this software may be licensed only pursuant to the terms
 * of an applicable Wind River license agreement.
 */

/*
modification history
--------------------
07aug17,pcs  Changes corresponding to making the kernel virtual memory pool
             region size configurable using configuration parameter 
             KERNEL_VIRT_POOL_REGION_SIZE.(V7COR-5102)
17apr17,own  Improved NAME and SYNOPSIS descriptors (F8862).
16dec16,cfm  added INCLUDE_DATA_NO_EXEC and moved INCLUDE_TASK_STACK_NO_EXEC,
             INCLUDE_PROTECT_TEXT, INCLUDE_PROTECT_VEC_TABLE and
             INCLUDE_PROTECT_TASK_STACK to FOLDER_KERNEL_HARDENING (F7142)
21apr16,emj  CERT: Update to produce partially linked objects (US79607)
03may15,pcs  Added INCLUDE_ADR_SPACE_DIRECT_MAP
18nov14,gls  Added INCLUDE_SC_POSIX_SHM
             Removed INCLUDE_SYSCTL from REQUIRES of INCLUDE_POSIX_SHM
01apr,15,rr  Added INCLUDE_PG_MGR_BASIC component to required component
             when INCLUDE_PMAP_LIB INCLUDE_ADR_SPACE_LIB included   
             and VSB is configured as _WRS_CONFIG_COMPAT69_ADR_SPACE 
             (V7COR-2758)
04nov14,pcs  Added INCLUDE_SYSCTL to the REQUIRES of Component INCLUDE_POSIX_SHM
             (V7COR_2150).
20oct14,pcs  Added missing Component INCLUDE_USER_RESERVED_MEMORY for vx7 BSP's.
28aug14,pcs  Added INCLUDE_SYSCTL to REQUIRES of Component INCLUDE_DEVMEM.
             (V7COR-1467)
11jun14,pcs  Decoupled dependancy of INCLUDE_KERNEL on INCLUDE_MMU_BASIC when
             MMULESS_KERNEL is defined. (V7COR-1322)
15may14,pcs  Fixed warning generated by memPartCacheShowInit(). (V7COR-881)
14may14,pcs  Updated Component INCLUDE_MMU_BASIC to use macro 
             _WRS_CONFIG_COMPAT69_ADR_SPACE
17apr14,pcs  Updated REQUIRES for the Component INCLUDE_PMAP_LIB (US34433)
07mar14,x_z  removed AIM components. (US18830)
25feb14,pcs  Enabled INCLUDE_CACHE_DMA32_LIB for new vx7 BSPS's. (VXW7-1903)
10feb14,pcs  VXW7-1597 - POSIX components cleanup
24jan14,pcs  Updated with changes corresponding to adding a configlette for
             the pmapLib.
17jan14,pcs  Added Component INCLUDE_PMAP_LIB
28jan14,pcs  Removed references to SW_MMU_ENABLE
02jan14,cww  fixed init order for INCLUDE_CACHE_DMA32_LIB
20nov13,pcs  Updated to reflect the name changes to adrSpaceLibXXX files.
16sep13,x_z  merged MMU components from 00bsp.cdf.
02aug13,pcs  updated to use config option _WRS_CONFIG_COMPAT69_ADR_SPACE
19jul13,pcs  Change the prototype of memPartCacheLibInit
11jul13,pcs  Add Components INCLUDE_MEM_PART_CACHE and 
             INCLUDE_MEM_PART_CACHE_SHOW
05may13,pcs  Add support for SMP-optimized memory allocator.
08sep10,pcs  Add Parameter GLOBAL_VIRT_MEM_REGION_SIZE to represent the
             size of the virtual memory region to be reserved by the
             addressSpace allocator for usage as global virtual memory.
16sep10,s_s  parameter KERNEL_HEAP_SIZE now uses FREE_MEM_START_ADRS to
             get its value (CQ: WIND00214548)
09sep10,j_l  Parameterize DMA32_RESERVED_MEM (Fix for WIND00230744)
             Rename DMA32_RESERVED_MEM to DMA32_HEAP_SIZE
26aug10,gls  adapted vmInvTblLib for LP64
09jun10,pcs  Add devMemFsLib.o to Component INCLUDE_DEVMEM.
18may10,pcs  Add support for device memory object.
12mar10,jpb  Temporary removal of INCLUDE_VM_INVTBL for lp64.
19feb10,zl   added INCLUDE_POSIX_SHM_API
08jan10,zl   added INCLUDE_MMAP. Moved init order specifications 
             to 00vxWorks.cdf.
08dec09,cww  Added INCLUDE_TASK_STACK_ALLOC
16sep09,h_k  added INCLUDE_CACHE_DMA32_LIB.
11aug09,cww  Delayed pgMgrLibInit
29jun09,zl   support for address space manager without RTPs. Added
             32-bit and 64-bit specific modules.
23apr08,jpb  Defect #108859.  Changed ordering of shared memory.
29mar07,pcm  io footprint reduction work
01jan06,zl   added INCLUDE_MMAP_SHOW
25oct05,zl   added INCLUDE_POSIX_SHM components.
22nov04,zl   removed module definition for KH components
20sep04,tam  added INCLUDE_PROTECT_TASK_STACK &
             INCLUDE_TASK_STACK_NO_EXEC
13sep04,zl   private header files changes.
09jun04,zl   added INCLUDE_VM_RTP; added _CHILDREN definitions.
26feb04,tam  added missing defintions to the SHOW components
23oct03,tam  written
*/

/*
DESCRIPTION
This file contains descriptions for Memory Management components.
*/

Folder FOLDER_MMU {
        NAME            MMU
        SYNOPSIS        This folder contains components and parameters concerning Memory Management Units (MMUs).
        _CHILDREN       FOLDER_MEMORY
        CHILDREN        INCLUDE_MMU_BASIC               \
                        INCLUDE_MMU_GLOBAL_MAP          \
                        FOLDER_MMU_OPTIMIZE
        DEFAULTS        INCLUDE_MMU_BASIC               \
                        INCLUDE_MMU_GLOBAL_MAP
}

Component INCLUDE_MMU_BASIC {
	NAME		Basic MMU
	SYNOPSIS	This is the basic MMU component. It includes an \
			API which is used for programmatic \
			management of virtual memory.
	SOURCE		$(TGT_DIR)/src/os/mm
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		vmBaseLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	HDR_FILES	rebootLib.h private/vmLibP.h fioLib.h sysLib.h
#if (defined (_WRS_CONFIG_SMP) || \
     ((!defined (_WRS_CONFIG_COMPAT69_ADR_SPACE)) && \
      !defined(_WRS_CONFIG_MMULESS_KERNEL)))
	_REQUIRES	INCLUDE_KERNEL
#endif
	REQUIRES	INCLUDE_MMU_GLOBAL_MAP
}

Component INCLUDE_MMU_GLOBAL_MAP {
	NAME		MMU global map
	SYNOPSIS	This component initializes the kernel's global MMU \
			mappings according to the BSP's sysPhysMemDesc[ ] table.
	SOURCE		$(TGT_DIR)/src/os/mm
	CONFIGLETTES	usrMmuInit.c
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		vmGlobalMap.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
        INIT_RTN        usrMmuInit ();
	HDR_FILES	rebootLib.h private/vmLibP.h fioLib.h sysLib.h
	CFG_PARAMS	VM_PAGE_SIZE		\
			USER_D_MMU_ENABLE	\
			USER_I_MMU_ENABLE
}

Parameter VM_PAGE_SIZE {
	NAME		VM page size
	SYNOPSIS	This parameter sets the virtual memory page size (bytes).
	DEFAULT		8192
}

Component INCLUDE_PROTECT_TEXT {
	NAME		Write-protect program text
        _CHILDREN       FOLDER_KERNEL_HARDENING
	CONFIGLETTES	usrTextProtect.c
	INIT_RTN	usrTextProtect ();
	REQUIRES	INCLUDE_MMU_BASIC
	HDR_FILES	vmLib.h
}

Component INCLUDE_PROTECT_VEC_TABLE {
        NAME            Write-protect vector table
        _CHILDREN       FOLDER_KERNEL_HARDENING
        _INIT_ORDER     usrRoot
        INIT_RTN        intVecTableWriteProtect ();
        INIT_AFTER      INCLUDE_MMU_GLOBAL_MAP
        INIT_BEFORE     INCLUDE_DEFERRED_INTERRUPT_ENABLE
        REQUIRES        INCLUDE_MMU_BASIC
        HDR_FILES       intLib.h
}

#ifndef _WRS_CONFIG_COMPAT69
Component INCLUDE_DATA_NO_EXEC {
        NAME            Enable non-executable memory protection
        SYNOPSIS        Including this component will result in only the \
                        memory pages containing the .text (and .rodata) ELF \
                        sections being executable. All other memory pages, \
                        such as pages containing the .data ELF section, task \
                        stack, and heaps, are marked non-executable.
        _CHILDREN       FOLDER_KERNEL_HARDENING
        INIT_RTN        mmuDataNoExec = TRUE;
        _INIT_ORDER     usrInit
        HDR_FILES       private/vmLibP.h
        INIT_AFTER      INCLUDE_CPU_INIT
        INIT_BEFORE     INCLUDE_KERNEL
        REQUIRES        INCLUDE_MMU_BASIC       \
                        INCLUDE_PROTECT_TEXT    \
                        INCLUDE_PROTECT_VEC_TABLE
        INCLUDE_WHEN    INCLUDE_KERNEL_HARDENING
}
#endif /* !_WRS_CONFIG_COMPAT69 */

Folder  FOLDER_MMU_OPTIMIZE {
	NAME		MMU optimization
	SYNOPSIS	Optionally enable MMU optimization
	CHILDREN	INCLUDE_LOCK_TEXT_SECTION \
			INCLUDE_PAGE_SIZE_OPTIMIZATION
}

Component INCLUDE_LOCK_TEXT_SECTION {
	NAME		Lock program text into TLB
	SYNOPSIS	This component is used to lock page table entries for kernel text segment into \
			statically managed TLB entries. The number of static \
			TLB entries is limited, therefore it is not always \
			possible to lock the entire text segment. Not every \
			architecture and CPU family supports this feature. \
			See the respective Architecture Supplement for details.
	REQUIRES	INCLUDE_MMU_OPTIMIZE
}

Component INCLUDE_PAGE_SIZE_OPTIMIZATION {
	NAME		Optimize page tables
	SYNOPSIS	This component is used to enable page size optimization. On 32-bit VxWorks, the \
			kernel context is optimized at the end of the \
			initialization sequence. On 64-bit VxWorks, all \
			mappings (kernel and RTP) are performed automatically \
			with page size optimization when this component is \
			included. Not every architecture and CPU family \
			supports this feature. See the respective \
			Architecture Supplement for details.
#ifdef _WRS_CONFIG_LP64
	INCLUDE_WHEN	INCLUDE_MMU_BASIC
#else
	REQUIRES	INCLUDE_MMU_OPTIMIZE
#endif
}

Component INCLUDE_MMU_OPTIMIZE {
	NAME		Optimize configlette
	CONFIGLETTES	usrMmuOptimize.c
	INIT_RTN	usrMmuOptimize ();
	REQUIRES	INCLUDE_MMU_BASIC
	_CHILDREN	FOLDER_NOT_VISIBLE
	HDR_FILES	vmLib.h
}

/* address space allocator components */

Component INCLUDE_ADR_SPACE_LIB {
	NAME		System address space allocator 
	SYNOPSIS	This component includes support for the system address \
			space allocator.
	_CHILDREN	FOLDER_OS
#ifndef _WRS_CONFIG_COMPAT69_ADR_SPACE
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		adrSpaceLib.o
	CFG_PARAMS	KERNEL_VIRT_POOL_REGION_SIZE
#else
	CFG_PARAMS	KERNEL_VIRT_POOL_REGION_SIZE
        _REQUIRES INCLUDE_KERNEL
#endif
#else
	MODULES		adrSpaceLib.o			\
			adrSpaceLegacyLib.o
	CFG_PARAMS	KERNEL_HEAP_SIZE                \
                        GLOBAL_VIRT_MEM_REGION_SIZE
#endif
#ifdef _WRS_CONFIG_LP64
	REQUIRES	INCLUDE_MMU_BASIC		\
			INCLUDE_PG_POOL_LIB		\
			INCLUDE_PG_POOL_VIRT_LIB	\
			INCLUDE_PG_POOL_PHYS_LIB        \
                        INCLUDE_ADR_SPACE_DIRECT_MAP
#else
        REQUIRES        INCLUDE_MMU_BASIC               \
                        INCLUDE_PG_POOL_LIB             \
                        INCLUDE_PG_POOL_VIRT_LIB        \
                        INCLUDE_PG_POOL_PHYS_LIB
#endif
	HDR_FILES	private/adrSpaceLibP.h
}

#ifdef _WRS_CONFIG_LP64
Component INCLUDE_ADR_SPACE_DIRECT_MAP {
        NAME            Direct map region support
        SYNOPSIS        This component provides support for the \
			direct map region.
        _CHILDREN       FOLDER_NOT_VISIBLE
        MODULES         adrSpaceDirectMap.o
        HDR_FILES       private/adrSpaceLibP.h
}
#endif /* LP64 */

/* address space allocator components */

Component INCLUDE_PMAP_LIB {
        NAME            Physical address mapping library
        SYNOPSIS        This component provides the functionality to map or \
                        unmap physical address to the kernel/RTP context.
        _CHILDREN       FOLDER_OS
	CONFIGLETTES	usrPmap.c
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
        MODULES         pmapBaseLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	PROTOTYPE	void pmapInit (void);
	INIT_RTN	pmapInit();
#if !defined (_WRS_CONFIG_MMULESS_KERNEL)
#if !defined (_WRS_CONFIG_COMPAT69_ADR_SPACE)
        REQUIRES        INCLUDE_MMU_BASIC \
                        INCLUDE_ADR_SPACE_LIB  \
                        INCLUDE_PG_MGR_BASIC
#else
        REQUIRES        INCLUDE_MMU_BASIC \
                        INCLUDE_PG_POOL_VIRT_LIB\
                        INCLUDE_PG_MGR_BASIC
#endif
#endif
}

#ifdef _WRS_CONFIG_COMPAT69_ADR_SPACE
Parameter KERNEL_HEAP_SIZE {
        NAME            Size of the kernel heap in bytes
        SYNOPSIS        This parameter sets the size of the heap reserved to \
                        the kernel in bytes. Used only if RTP support is included.
        TYPE 		uint
        DEFAULT         ((((unsigned int) (sysMemTop() - FREE_MEM_START_ADRS) / 3) * 2))
}
Parameter GLOBAL_VIRT_MEM_REGION_SIZE {
        NAME            Size of global virtual memory region
        SYNOPSIS        This parameter represents the size of the virtual memory to be \
                        reserved for usage as global virtual memory.
        TYPE 		uint
        DEFAULT         (0x800000)
}
#else
Parameter KERNEL_VIRT_POOL_REGION_SIZE {
        NAME            Size of global virtual memory region
        SYNOPSIS        This parameter sets the size of the kernel virtual \
                        memory pool region is used for dynamically managed \
                        mappings in the kernel. The default value for this 0 \
                        which indicates that the size as defined by the \
                        architecture is used (KERNEL_VIRT_POOL_RGN_SIZE). \
                        This configuration parameter allows the user the \
                        ability to lower the size based on the customer usage \
                        scenario. This allows to kernel to create \
                        pre-allocated page table entries for only the required \
                        size and thus optimize the usage  of the kernel \
                        proximity heap.
        TYPE            size_t
        DEFAULT         0
}
#endif

Component INCLUDE_ADR_SPACE_SHOW {
        NAME            Address space allocator show routines
        SYNOPSIS        This component includes the adrSpaceShow() show function for \
				the C interpreter. It can be used to display an overview of \
				the address space usage at the time of the call.
	_CHILDREN	FOLDER_SHOW_ROUTINES
	REQUIRES        INCLUDE_ADR_SPACE_LIB
	INIT_RTN	adrSpaceShowInit();
        MODULES         adrSpaceShow.o
	INCLUDE_WHEN	INCLUDE_RTP_SHOW
	_INIT_ORDER	usrShowInit
	INIT_BEFORE	INCLUDE_RTP_SHOW
}

Component INCLUDE_MMAP {
	NAME		Memory mapping
	SYNOPSIS	This component provides memory mapping and unmapping functions.
	_CHILDREN	FOLDER_POSIX
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		mmanLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	PROTOTYPE	void mmanLibInit (void);
	INIT_RTN	mmanLibInit ();
	REQUIRES	INCLUDE_BASE_KERNEL \
			INCLUDE_PG_MGR_BASIC
}

/* page manager components */

Component INCLUDE_PG_MGR_BASIC {
	NAME		Basic Page Manager
	SYNOPSIS	Basic Page Manager Library
	_CHILDREN	FOLDER_NOT_VISIBLE
	REQUIRES	INCLUDE_ADR_SPACE_LIB
	INIT_RTN	pgMgrBaseLibInit();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		pgMgrBaseLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
#if defined (_WRS_CONFIG_COMPAT69_ADR_SPACE)
        INCLUDE_WHEN INCLUDE_PMAP_LIB INCLUDE_ADR_SPACE_LIB
#endif
	HDR_FILES	private/pgMgrLibP.h
}

Component INCLUDE_PG_MGR_LIB {
	NAME		Page Manager Library
	SYNOPSIS	Page Manager Library
	_CHILDREN	FOLDER_NOT_VISIBLE
	REQUIRES	INCLUDE_PG_MGR_BASIC \
			INCLUDE_VM_RTP
	_REQUIRES	INCLUDE_RTP
	INIT_RTN	pgMgrLibInit();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		pgMgrLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	HDR_FILES	private/pgMgrLibP.h
}

Component INCLUDE_PG_MGR_SHOW {
        NAME            Page Manager Show Routines
        SYNOPSIS        Page manager show routines: display information on \
			page managers.
	_CHILDREN	FOLDER_NOT_VISIBLE
	REQUIRES        INCLUDE_PG_MGR_LIB
	INIT_RTN	pgMgrShowInit();
        MODULES         pgMgrShow.o
	INCLUDE_WHEN	INCLUDE_RTP_SHOW
	_INIT_ORDER	usrShowInit
	INIT_BEFORE	INCLUDE_RTP_SHOW
}


/* page pool components */

Component INCLUDE_PG_POOL_LIB {
	NAME		Generic Page Pool Allocator
	SYNOPSIS	Generic Page Pool Allocator
	_CHILDREN	FOLDER_NOT_VISIBLE
	INIT_RTN	pgPoolLibInit();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		pgPoolLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	HDR_FILES	private/pgPoolLibP.h
}

Component INCLUDE_PG_POOL_VIRT_LIB {
	NAME		Page Pool Allocator for Virtual Space
	SYNOPSIS	Page Pool Allocator for Virtual Space
	_CHILDREN	FOLDER_NOT_VISIBLE
	INIT_RTN	pgPoolVirtLibInit();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		pgPoolVirtLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	HDR_FILES	private/pgPoolVirtLibP.h
}

Component INCLUDE_PG_POOL_PHYS_LIB {
	NAME		Page Pool Allocator for Physical Space
	SYNOPSIS	Page Pool Allocator for Physical Space
	_CHILDREN	FOLDER_NOT_VISIBLE
	INIT_RTN	pgPoolPhysLibInit();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		pgPoolPhysLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	HDR_FILES	private/pgPoolPhysLibP.h
}

Component INCLUDE_PG_POOL_SHOW {
        NAME            Generic Page Pool Allocator Show Routines
        SYNOPSIS        Generic page pool allocator show routines: display \
			information on page pools.
	_CHILDREN	FOLDER_NOT_VISIBLE
        INIT_RTN        pgPoolShowInit();
	REQUIRES        INCLUDE_PG_POOL_LIB
        MODULES         pgPoolShow.o
	INCLUDE_WHEN	INCLUDE_RTP_SHOW
	_INIT_ORDER	usrShowInit
	INIT_BEFORE	INCLUDE_RTP_SHOW
}

Component INCLUDE_TASK_STACK_ALLOC {
	NAME		taskStackAlloc and taskStackFree routines
	SYNOPSIS	taskStackAlloc and taskStackFree routines
	_CHILDREN	FOLDER_NOT_VISIBLE
	INIT_RTN	taskMemLibInit ();
	REQUIRES	INCLUDE_MMU_BASIC
	HDR_FILES	private/taskMemLibP.h
}

Component INCLUDE_PROTECT_TASK_STACK {
	NAME		Enable guard pages for kernel task stacks
	SYNOPSIS	This component is used to insert underflow and \
			overflow guard pages to kernel task stacks.
	_CHILDREN	FOLDER_KERNEL_HARDENING
	INIT_RTN	taskStackGuardPageEnable();
	REQUIRES        INCLUDE_TASK_STACK_ALLOC
	HDR_FILES	private/taskMemLibP.h
}

Component INCLUDE_TASK_STACK_NO_EXEC {
	NAME		Enable non-executable stacks
	SYNOPSIS	This component causes exception and execution stacks \
			for RTP and kernel tasks to be marked non-executable.
	_CHILDREN	FOLDER_KERNEL_HARDENING
	INIT_RTN	taskStackNoExecEnable();
	REQUIRES        INCLUDE_TASK_STACK_ALLOC
	HDR_FILES	private/taskMemLibP.h
}

Component INCLUDE_VM_RTP {
	NAME		VM support for RTPs
	_CHILDREN	FOLDER_NOT_VISIBLE
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		vmLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	REQUIRES        INCLUDE_MMU_BASIC
	HDR_FILES	vmLib.h
}

Component INCLUDE_VM_INVTBL {
	NAME		VM inverse page table support
	_CHILDREN	FOLDER_NOT_VISIBLE
	_REQUIRES	INCLUDE_SHARED_DATA
	MODULES		vmInvTblLib.o
	REQUIRES        INCLUDE_MMU_BASIC
}

Component INCLUDE_POSIX_MAPPED_FILES {
        NAME            Memory mapped files
        SYNOPSIS        This component supports POSIX memory mapped files.
	_CHILDREN	FOLDER_POSIX
	REQUIRES        INCLUDE_MMAP
	PROTOTYPE	extern STATUS mmanFdLibInit (void);
	INIT_RTN	mmanFdLibInit();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
        MODULES         mmanFdLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
}

Component INCLUDE_POSIX_SHM {
        NAME            Shared memory objects
        SYNOPSIS        POSIX shared memory objects. This component has to \
			be included if POSIX shared memory objects are used \
			in either user space applications or kernel applications.
	_CHILDREN	FOLDER_POSIX
	REQUIRES        INCLUDE_POSIX_MAPPED_FILES
	PROTOTYPE	extern STATUS shmFsLibInit (const char *);
	INIT_RTN	shmFsLibInit (SHM_DEV_NAME);
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
        MODULES         shmFsLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	CFG_PARAMS	SHM_DEV_NAME
}

Component INCLUDE_SC_POSIX_SHM {
        NAME            System call support for POSIX shared memory
        SYNOPSIS        System call support for POSIX shared memory
	_CHILDREN	FOLDER_NOT_VISIBLE
	REQUIRES        INCLUDE_POSIX_SHM
	INCLUDE_WHEN	INCLUDE_RTP \
                        INCLUDE_POSIX_SHM
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
        MODULES         shmScLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
}

Parameter SHM_DEV_NAME {
        NAME            SHM device name
        SYNOPSIS        This parameter sets the name of the POSIX shared memory object device.
        TYPE 		string
        DEFAULT         "/shm"
}

Component INCLUDE_POSIX_SHM_API {
        NAME            Shared memory object API
        SYNOPSIS        This component supports the POSIX shared memory object \
			API (shm_open and shm_unlink) in kernel space.
	_CHILDREN	FOLDER_POSIX
	REQUIRES        INCLUDE_POSIX_SHM
	PROTOTYPE	extern STATUS shmLibInit (void);
	INIT_RTN	shmLibInit();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
        MODULES         shmLib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
}

Component INCLUDE_DEVMEM {
        NAME            Device memory objects
        SYNOPSIS        This component supports device memory objects. This \
                        component has to be included if device memory objects are used \
                        in either user space applications or kernel applications.
        _CHILDREN       FOLDER_POSIX
        REQUIRES        INCLUDE_POSIX_MAPPED_FILES INCLUDE_SYSCTL
        PROTOTYPE       extern STATUS devMemLibInit (const char *);
        INIT_RTN        devMemLibInit (DEVMEM_DEV_NAME);
        MODULES         devMemLib.o devMemFsLib.o
        CFG_PARAMS      DEVMEM_DEV_NAME
}

Parameter DEVMEM_DEV_NAME {
        NAME            DEVMEM device name
        SYNOPSIS        This parameter defines the name of the memory object device.
        TYPE            string
        DEFAULT         "/devm"
}

#ifndef _WRS_CONFIG_COMPAT69_ADR_SPACE
Component INCLUDE_CACHE_DMA32_LIB {
	NAME		Cache DMA partition manager for 32-bit physical memory
	SYNOPSIS	This component provides a cache DMA partition manager \
			for 32-bit physical memory. VxWorks must be configured \
			with this component to use the DMA32 partition manager.
	_CHILDREN	FOLDER_MEMORY
	REQUIRES	INCLUDE_PMAP_LIB \
			INCLUDE_MMU_BASIC \
			INCLUDE_MEM_MGR_BASIC
	PROTOTYPE	extern STATUS cacheDma32PartInit (void);
	INIT_RTN	cacheDma32PartInit ();
#ifndef _WRS_CONFIG_CERT_KERNEL_OBJECT
	MODULES		cacheDma32Lib.o
#else
        _REQUIRES INCLUDE_KERNEL
#endif
	CFG_PARAMS	DMA32_HEAP_SIZE
	_INIT_ORDER	usrRoot
	INIT_BEFORE	INCLUDE_EDR_STUB
	INIT_AFTER	INCLUDE_KERNEL_COMMON_HEAP
}

Parameter DMA32_HEAP_SIZE {
        NAME            DMA32 heap reserved memory
        SYNOPSIS        This parameter defines the DMA32 heap reserved memory size (bytes).
        DEFAULT         0x04000000
}
#endif /* !_WRS_CONFIG_COMPAT69_ADR_SPACE */

Component INCLUDE_MAPPED_FILES_SHOW {
	NAME		Show routines for memory mapped objects
        SYNOPSIS        This component provides show routines for memory mapped objects.
	_CHILDREN	FOLDER_SHOW_ROUTINES
	REQUIRES        INCLUDE_POSIX_MAPPED_FILES
	PROTOTYPE	extern STATUS mmanShowInit ();
	INIT_RTN	mmanShowInit();
        MODULES         mmanShow.o
	_INIT_ORDER	usrShowInit
	INIT_AFTER	INCLUDE_RTP_SHOW
}
Component INCLUDE_MEM_PART_CACHE {
        NAME            Memory caching component
        SYNOPSIS        This component has to be included if task level memory \
                        caching of the system heap is desired in the kernel.
        _CHILDREN       FOLDER_OS
        MODULES         memPartCacheLib.o
        PROTOTYPE       extern STATUS memPartCacheLibInit (BOOL);
        REQUIRES        INCLUDE_MEM_MGR_BASIC
        INIT_RTN        memPartCacheLibInit (MEM_PART_CACHE_GLOBAL_ENABLE);
        CFG_PARAMS      MEM_PART_CACHE_GLOBAL_ENABLE
}

Component INCLUDE_MEM_PART_CACHE_SHOW {
        NAME            Memory partition cache show routines
        SYNOPSIS        This component supports memory partition cache show routines.
        MODULES         memPartCacheShow.o
        PROTOTYPE       extern STATUS memPartCacheShowInit (void);
        INIT_RTN        memPartCacheShowInit();
        _CHILDREN       FOLDER_SHOW_ROUTINES
        LINK_SYMS       memPartCacheShow
        REQUIRES        INCLUDE_MEM_PART_CACHE
        _INIT_ORDER     usrShowInit
}

Parameter MEM_PART_CACHE_GLOBAL_ENABLE
        {
        NAME            Enable memory caching
        SYNOPSIS        This parameter enable's task level memory caching \
                        globally for all tasks. When it is set to TRUE, then the task \
			level memory caching is enabled globally for all tasks. \
			That is when any task is created the task level memory \
			caching is enabled automatically. When the task is \
			deleted any memory that is cached in the memory cache \
			is released and the task level memory caching is \
			disabled automatically. When it is set to FALSE, then \
			the task level memory caching is not enabled until the \
			memPartCacheCreate( ) function is called in the context \
			of the task. When the task is deleted any memory that \
			is cached in the memory cache is released and the task \
			level memory caching is disabled automatically.
        TYPE            BOOL
        DEFAULT         FALSE
        }

Component INCLUDE_USER_RESERVED_MEMORY {
        NAME            User-reserved memory
        SYNOPSIS        This component enables user-reserved memory.
        _CHILDREN       FOLDER_MEMORY
        HDR_FILES       private/userReservedMemP.h
        MODULES         userReservedMem.o
        INIT_RTN        userReservedMemInit (USER_RESERVED_MEM, \
                                       CLEAR_USER_RESERVED_MEMORY_ON_COLD_BOOT);
#ifndef _WRS_CONFIG_COMPAT69
        REQUIRES        INCLUDE_PMAP_LIB
#endif
#ifdef _WRS_CONFIG_USE_MEMDESC
        CFG_PARAMS      USER_RESERVED_MEM CLEAR_USER_RESERVED_MEMORY_ON_COLD_BOOT
#else /* !_WRS_CONFIG_USE_MEMDESC */
        CFG_PARAMS      CLEAR_USER_RESERVED_MEMORY_ON_COLD_BOOT
#endif /* _WRS_CONFIG_USE_MEMDESC */
}

Parameter CLEAR_USER_RESERVED_MEMORY_ON_COLD_BOOT {
        NAME            Clear user-reserved memory on reboot
        SYNOPSIS        This parameter will have user-reserved memory cleared \
			on cold reboot when it is set to TRUE.
        DEFAULT         TRUE
}

Parameter USER_RESERVED_MEM {
    NAME        User reserved memory
    SYNOPSIS    This parameter sets the reserved memory size (bytes).
    DEFAULT     0x0
}

