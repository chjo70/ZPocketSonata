/* Copyright (c) 2014-2016 Wind River Systems, Inc.
 *
 * The right to copy, distribute, modify or otherwise make use
 * of this software may be licensed only pursuant to the terms
 * of an applicable Wind River license agreement.
 */

/* This file has been autogenerated by cafe-type2h(1). */

#ifndef CAFE_TYPE2H_VXWORKS_TYPE_autogenerated_h
#define CAFE_TYPE2H_VXWORKS_TYPE_autogenerated_h

#include <cafe/autogenerated/cafe.type.h>

#ifdef __cplusplus
extern "C" {
#endif

#define VX_CURRENT_FILE_DESCRIPTOR_VT_DEF "N[VX_CURRENT_FILE_DESCRIPTOR]"
#define VX_CURRENT_FILE_DESCRIPTOR_VT_REF "t[VX_CURRENT_FILE_DESCRIPTOR]"
#define VX_CURRENT_FILE_DESCRIPTOR_VT_NAT "n[VX_CURRENT_FILE_DESCRIPTOR]"

#define VX_CURRENT_RTP_ID_VT_DEF "N[VX_CURRENT_RTP_ID]"
#define VX_CURRENT_RTP_ID_VT_REF "t[VX_CURRENT_RTP_ID]"
#define VX_CURRENT_RTP_ID_VT_NAT "n[VX_CURRENT_RTP_ID]"

#define VX_CURRENT_TASK_ID_VT_DEF "N[VX_CURRENT_TASK_ID]"
#define VX_CURRENT_TASK_ID_VT_REF "t[VX_CURRENT_TASK_ID]"
#define VX_CURRENT_TASK_ID_VT_NAT "n[VX_CURRENT_TASK_ID]"

#define vxWorks_context_VT_DEF "S[vxWorks.context,v[tid,L,n[VX_CURRENT_TASK_ID]]v[pid,L,n[VX_CURRENT_RTP_ID]]v[intCount,i]v[intNum,i]]"
#define vxWorks_context_VT_REF "t[vxWorks.context]"

#define vxWorks_core_VT_DEF "S[vxWorks.core,v[cpu_id,i]]"
#define vxWorks_core_VT_REF "t[vxWorks.core]"

#define vxWorks_dprintf_VT_DEF "S[vxWorks.dprintf,v[message,s]v[length,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"dprintf\"]]"
#define vxWorks_dprintf_VT_REF "t[vxWorks.dprintf]"

#define vxWorks_edrErrorInject_VT_DEF "S[vxWorks.edrErrorInject,v[kind,i]v[filename,s]v[linenumber,i]v[address,L]v[message,s],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"EDR Error Inject\"]]"
#define vxWorks_edrErrorInject_VT_REF "t[vxWorks.edrErrorInject]"

#define vxWorks_eventReceive_VT_DEF "S[vxWorks.eventReceive,v[events,L]v[timeout,l]v[options,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"receive\"]]"
#define vxWorks_eventReceive_VT_REF "t[vxWorks.eventReceive]"

#define vxWorks_eventSend_VT_DEF "S[vxWorks.eventSend,v[taskId,L]v[events,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"send\"]]"
#define vxWorks_eventSend_VT_REF "t[vxWorks.eventSend]"

#define vxWorks_exception_VT_DEF "S[vxWorks.exception,v[arg,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"exception\"]]"
#define vxWorks_exception_VT_REF "t[vxWorks.exception]"

#define vxWorks_intEnter_VT_DEF "S[vxWorks.intEnter,v[interrupt,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"int enter\"]]"
#define vxWorks_intEnter_VT_REF "t[vxWorks.intEnter]"

#define vxWorks_intEnterPpcDec_VT_DEF "S[vxWorks.intEnterPpcDec,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"int enter PPC dec\"]]"
#define vxWorks_intEnterPpcDec_VT_REF "t[vxWorks.intEnterPpcDec]"

#define vxWorks_intEnterPpcWd_VT_DEF "S[vxWorks.intEnterPpcWd,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"int enter PPC watchdog\"]]"
#define vxWorks_intEnterPpcWd_VT_REF "t[vxWorks.intEnterPpcWd]"

#define vxWorks_intExit_VT_DEF "S[vxWorks.intExit,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"int exit\"]]"
#define vxWorks_intExit_VT_REF "t[vxWorks.intExit]"

#define vxWorks_intExitK_VT_DEF "S[vxWorks.intExitK,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"int exit K\"]]"
#define vxWorks_intExitK_VT_REF "t[vxWorks.intExitK]"

#define vxWorks_ioClose_VT_DEF "S[vxWorks.ioClose,v[fdEntry,L]v[classId,L]v[fd,l,n[VX_CURRENT_FILE_DESCRIPTOR]],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"close\"]]"
#define vxWorks_ioClose_VT_REF "t[vxWorks.ioClose]"

#define vxWorks_ioCreat_VT_DEF "S[vxWorks.ioCreat,v[fdEntry,L]v[classId,L]v[filename,b]v[fd,l,n[VX_CURRENT_FILE_DESCRIPTOR]]v[flags,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"creat\"]]"
#define vxWorks_ioCreat_VT_REF "t[vxWorks.ioCreat]"

#define vxWorks_ioDelete_VT_DEF "S[vxWorks.ioDelete,v[fileName,b],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"delete\"]]"
#define vxWorks_ioDelete_VT_REF "t[vxWorks.ioDelete]"

#define vxWorks_ioIoctl_VT_DEF "S[vxWorks.ioIoctl,v[fdEntry,L]v[classId,L]v[arg,L]v[cmd,l]v[fd,l,n[VX_CURRENT_FILE_DESCRIPTOR]],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"ioctl\"]]"
#define vxWorks_ioIoctl_VT_REF "t[vxWorks.ioIoctl]"

#define vxWorks_ioOpen_VT_DEF "S[vxWorks.ioOpen,v[fdEntry,L]v[classId,L]v[filename,b]v[fd,l,n[VX_CURRENT_FILE_DESCRIPTOR]]v[flags,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"open\"]]"
#define vxWorks_ioOpen_VT_REF "t[vxWorks.ioOpen]"

#define vxWorks_ioRead_VT_DEF "S[vxWorks.ioRead,v[fdEntry,L]v[classId,L]v[data,b]v[fd,l,n[VX_CURRENT_FILE_DESCRIPTOR]]v[result,L,n[cafe.SUM_METRIC_CLASS]n[cafe.LABEL,\"Bytes Read\"]]v[buffer,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"read\"]]"
#define vxWorks_ioRead_VT_REF "t[vxWorks.ioRead]"

#define vxWorks_ioWrite_VT_DEF "S[vxWorks.ioWrite,v[fdEntry,L]v[classId,L]v[data,b]v[fd,l,n[VX_CURRENT_FILE_DESCRIPTOR]]v[nBytes,L,n[cafe.SUM_METRIC_CLASS]n[cafe.LABEL,\"Bytes Written\"]]v[buffer,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"write\"]]"
#define vxWorks_ioWrite_VT_REF "t[vxWorks.ioWrite]"

#define vxWorks_isrCreate_VT_DEF "S[vxWorks.isrCreate,v[objId,L]v[classId,L]v[options,L]v[parameter,l]v[handlerRtn,L]v[isrTag,L]v[isrId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"create\"]]"
#define vxWorks_isrCreate_VT_REF "t[vxWorks.isrCreate]"

#define vxWorks_isrDestroy_VT_DEF "S[vxWorks.isrDestroy,v[objId,L]v[classId,L]v[isrId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"destroy\"]]"
#define vxWorks_isrDestroy_VT_REF "t[vxWorks.isrDestroy]"

#define vxWorks_isrDispatcherDone_VT_DEF "S[vxWorks.isrDispatcherDone,v[objId,L]v[classId,L]v[isrId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"Dispatch Done\"]]"
#define vxWorks_isrDispatcherDone_VT_REF "t[vxWorks.isrDispatcherDone]"

#define vxWorks_isrDispatcherInvoke_VT_DEF "S[vxWorks.isrDispatcherInvoke,v[objId,L]v[classId,L]v[isrId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"Dispatch\"]]"
#define vxWorks_isrDispatcherInvoke_VT_REF "t[vxWorks.isrDispatcherInvoke]"

#define vxWorks_isrInfo_VT_DEF "S[vxWorks.isrInfo,v[isrId,L]v[handler,L]v[name,s]]"
#define vxWorks_isrInfo_VT_REF "t[vxWorks.isrInfo]"

#define vxWorks_kill_VT_DEF "S[vxWorks.kill,v[signo,l]v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"kill\"]]"
#define vxWorks_kill_VT_REF "t[vxWorks.kill]"

#define vxWorks_memAddToPool_VT_DEF "S[vxWorks.memAddToPool,v[objId,L]v[classId,L]v[partId,L]v[poolSize,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"memAddToPool\"]]"
#define vxWorks_memAddToPool_VT_REF "t[vxWorks.memAddToPool]"

#define vxWorks_memAlloc_VT_DEF "S[vxWorks.memAlloc,v[objId,L]v[classId,L]v[partId,L]v[pBlock,L]v[nBytesPlusHeaderAlign,L,n[cafe.SUM_METRIC_CLASS]n[cafe.LABEL,\"Mallocd Bytes\"]]v[nBytesRequested,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"malloc\"]]"
#define vxWorks_memAlloc_VT_REF "t[vxWorks.memAlloc]"

#define vxWorks_memFree_VT_DEF "S[vxWorks.memFree,v[objId,L]v[classId,L]v[partId,L]v[pBlock,L]v[nBytesPlusHeaderAlign,L,n[cafe.SUM_METRIC_CLASS]n[cafe.LABEL,\"Freed Bytes\"]],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"free\"]]"
#define vxWorks_memFree_VT_REF "t[vxWorks.memFree]"

#define vxWorks_memPartCreate_VT_DEF "S[vxWorks.memPartCreate,v[objId,L]v[classId,L]v[partId,L]v[poolSize,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"memPartCreate\"]]"
#define vxWorks_memPartCreate_VT_REF "t[vxWorks.memPartCreate]"

#define vxWorks_memRealloc_VT_DEF "S[vxWorks.memRealloc,v[objId,L]v[classId,L]v[partId,L]v[pNewBlock,L]v[nBytesRequested,L]v[pOldBlock,L]v[oldBlockSize,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"realloc\"]]"
#define vxWorks_memRealloc_VT_REF "t[vxWorks.memRealloc]"

#define vxWorks_moduleLoad_VT_DEF "S[vxWorks.moduleLoad,v[name,s]v[moduleId,L]v[textAddr,L]v[textSize,L]v[dataAddr,L]v[dataSize,L]v[bssAddr,L]v[bssSize,L]v[rtpId,L]]"
#define vxWorks_moduleLoad_VT_REF "t[vxWorks.moduleLoad]"

#define vxWorks_moduleUnload_VT_DEF "S[vxWorks.moduleUnload,v[moduleId,L]]"
#define vxWorks_moduleUnload_VT_REF "t[vxWorks.moduleUnload]"

#define vxWorks_msgQCreate_VT_DEF "S[vxWorks.msgQCreate,v[objId,L]v[classId,L]v[msgQId,L]v[maxMsgs,L]v[maxMsgLength,L]v[options,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"create\"]]"
#define vxWorks_msgQCreate_VT_REF "t[vxWorks.msgQCreate]"

#define vxWorks_msgQDelete_VT_DEF "S[vxWorks.msgQDelete,v[objId,L]v[classId,L]v[msgQId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"delete\"]]"
#define vxWorks_msgQDelete_VT_REF "t[vxWorks.msgQDelete]"

#define vxWorks_msgQRecv_VT_DEF "S[vxWorks.msgQRecv,v[objId,L]v[classId,L]v[msgQId,L]v[buffer,L]v[maxBytes,L]v[timeout,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"receive\"]]"
#define vxWorks_msgQRecv_VT_REF "t[vxWorks.msgQRecv]"

#define vxWorks_msgQSend_VT_DEF "S[vxWorks.msgQSend,v[objId,L]v[classId,L]v[msgQId,L]v[buffer,L]v[nBytes,L]v[timeout,L]v[priority,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"send\"]]"
#define vxWorks_msgQSend_VT_REF "t[vxWorks.msgQSend]"

#define vxWorks_objEventReceive_VT_DEF "S[vxWorks.objEventReceive,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objEventReceive\"]]"
#define vxWorks_objEventReceive_VT_REF "t[vxWorks.objEventReceive]"

#define vxWorks_objEventSend_VT_DEF "S[vxWorks.objEventSend,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objEventSend\"]]"
#define vxWorks_objEventSend_VT_REF "t[vxWorks.objEventSend]"

#define vxWorks_objMsgDelete_VT_DEF "S[vxWorks.objMsgDelete,v[msgQId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objMsgDelete\"]]"
#define vxWorks_objMsgDelete_VT_REF "t[vxWorks.objMsgDelete]"

#define vxWorks_objMsgReceive_VT_DEF "S[vxWorks.objMsgReceive,v[msgQId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objMsgReceive\"]]"
#define vxWorks_objMsgReceive_VT_REF "t[vxWorks.objMsgReceive]"

#define vxWorks_objMsgSend_VT_DEF "S[vxWorks.objMsgSend,v[msgQId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objMsgSend\"]]"
#define vxWorks_objMsgSend_VT_REF "t[vxWorks.objMsgSend]"

#define vxWorks_objOwnerSet_VT_DEF "S[vxWorks.objOwnerSet,v[id,L]v[classId,L]v[objId,L]v[ownerId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objOwnerSet\"]]"
#define vxWorks_objOwnerSet_VT_REF "t[vxWorks.objOwnerSet]"

#define vxWorks_objSemFlush_VT_DEF "S[vxWorks.objSemFlush,v[semId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSemFlush\"]]"
#define vxWorks_objSemFlush_VT_REF "t[vxWorks.objSemFlush]"

#define vxWorks_objSemGive_VT_DEF "S[vxWorks.objSemGive,v[semId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSemGive\"]]"
#define vxWorks_objSemGive_VT_REF "t[vxWorks.objSemGive]"

#define vxWorks_objSemRTake_VT_DEF "S[vxWorks.objSemRTake,v[semId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSemRTake\"]]"
#define vxWorks_objSemRTake_VT_REF "t[vxWorks.objSemRTake]"

#define vxWorks_objSemTake_VT_DEF "S[vxWorks.objSemTake,v[semId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSemTake\"]]"
#define vxWorks_objSemTake_VT_REF "t[vxWorks.objSemTake]"

#define vxWorks_objSemWTake_VT_DEF "S[vxWorks.objSemWTake,v[semId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSemWTake\"]]"
#define vxWorks_objSemWTake_VT_REF "t[vxWorks.objSemWTake]"

#define vxWorks_objSigKill_VT_DEF "S[vxWorks.objSigKill,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSigKill\"]]"
#define vxWorks_objSigKill_VT_REF "t[vxWorks.objSigKill]"

#define vxWorks_objSigPause_VT_DEF "S[vxWorks.objSigPause,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSigPause\"]]"
#define vxWorks_objSigPause_VT_REF "t[vxWorks.objSigPause]"

#define vxWorks_objSigSuspend_VT_DEF "S[vxWorks.objSigSuspend,v[pSet,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSigSuspend\"]]"
#define vxWorks_objSigSuspend_VT_REF "t[vxWorks.objSigSuspend]"

#define vxWorks_objSigWait_VT_DEF "S[vxWorks.objSigWait,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objSigWait\"]]"
#define vxWorks_objSigWait_VT_REF "t[vxWorks.objSigWait]"

#define vxWorks_objWindRotate_VT_DEF "S[vxWorks.objWindRotate,v[priority,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"objWindRotate\"]]"
#define vxWorks_objWindRotate_VT_REF "t[vxWorks.objWindRotate]"

#define vxWorks_pause_VT_DEF "S[vxWorks.pause,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"pause\"]]"
#define vxWorks_pause_VT_REF "t[vxWorks.pause]"

#define vxWorks_rtpChildWait_VT_DEF "S[vxWorks.rtpChildWait,v[rtpId,L]v[options,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"child wait\"]]"
#define vxWorks_rtpChildWait_VT_REF "t[vxWorks.rtpChildWait]"

#define vxWorks_rtpDelete_VT_DEF "S[vxWorks.rtpDelete,v[objId,L]v[classId,L]v[options,L]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"delete\"]]"
#define vxWorks_rtpDelete_VT_REF "t[vxWorks.rtpDelete]"

#define vxWorks_rtpInitTask_VT_DEF "S[vxWorks.rtpInitTask,v[objId,L]v[classId,L]v[pInitialStack,L]v[pEnv,L]v[pArgv,L]v[numArgs,l]v[rtpId,L]]"
#define vxWorks_rtpInitTask_VT_REF "t[vxWorks.rtpInitTask]"

#define vxWorks_rtpKill_VT_DEF "S[vxWorks.rtpKill,v[signo,l]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"kill\"]]"
#define vxWorks_rtpKill_VT_REF "t[vxWorks.rtpKill]"

#define vxWorks_rtpLoad_VT_DEF "S[vxWorks.rtpLoad,v[dataSize,L]v[dataAddr,L]v[textSize,L]v[textAddr,L]v[entryPoint,L]v[rtpId,L]v[name,s]]"
#define vxWorks_rtpLoad_VT_REF "t[vxWorks.rtpLoad]"

#define vxWorks_rtpMemAlloc_VT_DEF "S[vxWorks.rtpMemAlloc,v[partId,L]v[pBlock,L]v[blockSize,L]v[nBytesRequested,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"rtpMemAlloc\"]]"
#define vxWorks_rtpMemAlloc_VT_REF "t[vxWorks.rtpMemAlloc]"

#define vxWorks_rtpMemFree_VT_DEF "S[vxWorks.rtpMemFree,v[partId,L]v[pBlock,L]v[blockSize,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"rtpMemFree\"]]"
#define vxWorks_rtpMemFree_VT_REF "t[vxWorks.rtpMemFree]"

#define vxWorks_rtpMemPartCreate_VT_DEF "S[vxWorks.rtpMemPartCreate,v[partId,L]v[poolSize,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"rtpMemPartCreate\"]]"
#define vxWorks_rtpMemPartCreate_VT_REF "t[vxWorks.rtpMemPartCreate]"

#define vxWorks_rtpMemRealloc_VT_DEF "S[vxWorks.rtpMemRealloc,v[partId,L]v[pNewBlock,L]v[nBytesRequested,L]v[pOldBlock,L]v[oldBlockSize,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"rtpMemRealloc\"]]"
#define vxWorks_rtpMemRealloc_VT_REF "t[vxWorks.rtpMemRealloc]"

#define vxWorks_rtpName_VT_DEF "S[vxWorks.rtpName,v[options,l]v[owner,L]v[rtpId,L]v[name,s]]"
#define vxWorks_rtpName_VT_REF "t[vxWorks.rtpName]"

#define vxWorks_rtpPause_VT_DEF "S[vxWorks.rtpPause,v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"pause\"]]"
#define vxWorks_rtpPause_VT_REF "t[vxWorks.rtpPause]"

#define vxWorks_rtpSigPending_VT_DEF "S[vxWorks.rtpSigPending,v[pSet,L]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"sigpending\"]]"
#define vxWorks_rtpSigPending_VT_REF "t[vxWorks.rtpSigPending]"

#define vxWorks_rtpSigProcMask_VT_DEF "S[vxWorks.rtpSigProcMask,v[pOset,L]v[pSet,L]v[how,l]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"sigprocmask\"]]"
#define vxWorks_rtpSigProcMask_VT_REF "t[vxWorks.rtpSigProcMask]"

#define vxWorks_rtpSigQueue_VT_DEF "S[vxWorks.rtpSigQueue,v[sival,l]v[signo,l]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"sigqueue\"]]"
#define vxWorks_rtpSigQueue_VT_REF "t[vxWorks.rtpSigQueue]"

#define vxWorks_rtpSigTimedWait_VT_DEF "S[vxWorks.rtpSigTimedWait,v[timeout,L]v[pInfo,L]v[pSet,L]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"sigtimedwait\"]]"
#define vxWorks_rtpSigTimedWait_VT_REF "t[vxWorks.rtpSigTimedWait]"

#define vxWorks_rtpSigWrapper_VT_DEF "S[vxWorks.rtpSigWrapper,v[type,l]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"sig handler entry\"]]"
#define vxWorks_rtpSigWrapper_VT_REF "t[vxWorks.rtpSigWrapper]"

#define vxWorks_rtpSigWrapperDone_VT_DEF "S[vxWorks.rtpSigWrapperDone,v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"sig handler exit\"]]"
#define vxWorks_rtpSigWrapperDone_VT_REF "t[vxWorks.rtpSigWrapperDone]"

#define vxWorks_rtpSignal_VT_DEF "S[vxWorks.rtpSignal,v[action,L]v[signo,l]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"signal\"]]"
#define vxWorks_rtpSignal_VT_REF "t[vxWorks.rtpSignal]"

#define vxWorks_rtpSpawn_VT_DEF "S[vxWorks.rtpSpawn,v[objId,L]v[classId,L]v[options,L]v[stacksize,L]v[priority,l]v[rtpId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"spawn\"]]"
#define vxWorks_rtpSpawn_VT_REF "t[vxWorks.rtpSpawn]"

#define vxWorks_rtpSuspend_VT_DEF "S[vxWorks.rtpSuspend,v[sigset,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"suspend\"]]"
#define vxWorks_rtpSuspend_VT_REF "t[vxWorks.rtpSuspend]"

#define vxWorks_rtpTaskKill_VT_DEF "S[vxWorks.rtpTaskKill,v[signo,L]v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"task kill\"]]"
#define vxWorks_rtpTaskKill_VT_REF "t[vxWorks.rtpTaskKill]"

#define vxWorks_rtpTaskSigQueue_VT_DEF "S[vxWorks.rtpTaskSigQueue,v[value,L]v[signo,l]v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"taskSigqueue\"]]"
#define vxWorks_rtpTaskSigQueue_VT_REF "t[vxWorks.rtpTaskSigQueue]"

#define vxWorks_rtpUnload_VT_DEF "S[vxWorks.rtpUnload,v[rtpId,L]]"
#define vxWorks_rtpUnload_VT_REF "t[vxWorks.rtpUnload]"

#define vxWorks_sdCreate_VT_DEF "S[vxWorks.sdCreate,v[objId,L]v[classId,L]v[nameLength,L]v[name,s]v[sdId,L]v[options,L]v[size,L]v[attr,L]v[virtAddr,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"create\"]]"
#define vxWorks_sdCreate_VT_REF "t[vxWorks.sdCreate]"

#define vxWorks_sdDelete_VT_DEF "S[vxWorks.sdDelete,v[objId,L]v[classId,L]v[options,L]v[sdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"delete\"]]"
#define vxWorks_sdDelete_VT_REF "t[vxWorks.sdDelete]"

#define vxWorks_sdMap_VT_DEF "S[vxWorks.sdMap,v[objId,L]v[classId,L]v[options,L]v[attr,L]v[sdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"map\"]]"
#define vxWorks_sdMap_VT_REF "t[vxWorks.sdMap]"

#define vxWorks_sdUnmap_VT_DEF "S[vxWorks.sdUnmap,v[objId,L]v[classId,L]v[options,L]v[sdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"unmap\"]]"
#define vxWorks_sdUnmap_VT_REF "t[vxWorks.sdUnmap]"

#define vxWorks_semBCreate_VT_DEF "S[vxWorks.semBCreate,v[objId,L]v[classId,L]v[semId,L]v[options,L]v[owner,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"semBCreate\"]]"
#define vxWorks_semBCreate_VT_REF "t[vxWorks.semBCreate]"

#define vxWorks_semCCreate_VT_DEF "S[vxWorks.semCCreate,v[objId,L]v[classId,L]v[semId,L]v[options,L]v[initialCount,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"semCCreate\"]]"
#define vxWorks_semCCreate_VT_REF "t[vxWorks.semCCreate]"

#define vxWorks_semDelete_VT_DEF "S[vxWorks.semDelete,v[objId,L]v[classId,L]v[semId,L]v[recurse,L]v[qHead,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"semDelete\"]]"
#define vxWorks_semDelete_VT_REF "t[vxWorks.semDelete]"

#define vxWorks_semFlush_VT_DEF "S[vxWorks.semFlush,v[objId,L]v[classId,L]v[semId,L]v[recurse,L]v[qHead,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"semFlush\"]]"
#define vxWorks_semFlush_VT_REF "t[vxWorks.semFlush]"

#define vxWorks_semGive_VT_DEF "S[vxWorks.semGive,v[objId,L]v[classId,L]v[semId,L]v[owner,L]v[recurse,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"semGive\"]]"
#define vxWorks_semGive_VT_REF "t[vxWorks.semGive]"

#define vxWorks_semMCreate_VT_DEF "S[vxWorks.semMCreate,v[objId,L]v[classId,L]v[semId,L]v[options,L]v[owner,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"semMCreate\"]]"
#define vxWorks_semMCreate_VT_REF "t[vxWorks.semMCreate]"

#define vxWorks_semMGiveForce_VT_DEF "S[vxWorks.semMGiveForce,v[objId,L]v[classId,L]v[semId,L]v[options,L]v[owner,L]]"
#define vxWorks_semMGiveForce_VT_REF "t[vxWorks.semMGiveForce]"

#define vxWorks_semRTake_VT_DEF "S[vxWorks.semRTake,v[objId,L]v[classId,L]v[semId,L]v[owner,L]v[recurse,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"take (reader)\"]]"
#define vxWorks_semRTake_VT_REF "t[vxWorks.semRTake]"

#define vxWorks_semRWCreate_VT_DEF "S[vxWorks.semRWCreate,v[objId,L]v[classId,L]v[semId,L]v[maxReaders,l]v[options,l]v[owner,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"RW sem create\"]]"
#define vxWorks_semRWCreate_VT_REF "t[vxWorks.semRWCreate]"

#define vxWorks_semTake_VT_DEF "S[vxWorks.semTake,v[objId,L]v[classId,L]v[semId,L]v[owner,L]v[recurse,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"semTake\"]]"
#define vxWorks_semTake_VT_REF "t[vxWorks.semTake]"

#define vxWorks_semWTake_VT_DEF "S[vxWorks.semWTake,v[objId,L]v[classId,L]v[semId,L]v[owner,L]v[recurse,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"take (writer)\"]]"
#define vxWorks_semWTake_VT_REF "t[vxWorks.semWTake]"

#define vxWorks_sigSuspend_VT_DEF "S[vxWorks.sigSuspend,v[sigset,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"suspend\"]]"
#define vxWorks_sigSuspend_VT_REF "t[vxWorks.sigSuspend]"

#define vxWorks_sigWrapper_VT_DEF "S[vxWorks.sigWrapper,v[signo,l]v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"sig handler entry\"]]"
#define vxWorks_sigWrapper_VT_REF "t[vxWorks.sigWrapper]"

#define vxWorks_signal_VT_DEF "S[vxWorks.signal,v[signo,l]v[handler,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"signal\"]]"
#define vxWorks_signal_VT_REF "t[vxWorks.signal]"

#define vxWorks_syscallBadId_VT_DEF "S[vxWorks.syscallBadId,v[objId,L]v[classId,L]v[group,l]v[routine,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"bad id\"]]"
#define vxWorks_syscallBadId_VT_REF "t[vxWorks.syscallBadId]"

#define vxWorks_syscallEnter_VT_DEF "S[vxWorks.syscallEnter,v[rtpId,L]v[nParams,l]v[pState,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"enter\"]]"
#define vxWorks_syscallEnter_VT_REF "t[vxWorks.syscallEnter]"

#define vxWorks_syscallReturnError_VT_DEF "S[vxWorks.syscallReturnError,v[objId,L]v[classId,L]v[errnoResult,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"return with error\"]]"
#define vxWorks_syscallReturnError_VT_REF "t[vxWorks.syscallReturnError]"

#define vxWorks_syscallReturnOk_VT_DEF "S[vxWorks.syscallReturnOk,v[objId,L]v[classId,L]v[result,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"return ok\"]]"
#define vxWorks_syscallReturnOk_VT_REF "t[vxWorks.syscallReturnOk]"

#define vxWorks_taskCont_VT_DEF "S[vxWorks.taskCont,v[objId,L]v[classId,L]v[taskId,L]v[priority,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"cont\"]]"
#define vxWorks_taskCont_VT_REF "t[vxWorks.taskCont]"

#define vxWorks_taskCpuAffinitySet_VT_DEF "S[vxWorks.taskCpuAffinitySet,v[objId,L]v[classId,L]v[affinity,L]v[taskId,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"cpu affinity set\"]]"
#define vxWorks_taskCpuAffinitySet_VT_REF "t[vxWorks.taskCpuAffinitySet]"

#define vxWorks_taskDelay_VT_DEF "S[vxWorks.taskDelay,v[objId,L]v[classId,L]v[ticks,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"delay\"]]"
#define vxWorks_taskDelay_VT_REF "t[vxWorks.taskDelay]"

#define vxWorks_taskDestroy_VT_DEF "S[vxWorks.taskDestroy,v[objId,L]v[classId,L]v[taskId,L]v[safeCount,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"destroy\"]]"
#define vxWorks_taskDestroy_VT_REF "t[vxWorks.taskDestroy]"

#define vxWorks_taskLock_VT_DEF "S[vxWorks.taskLock,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"lock\"]]"
#define vxWorks_taskLock_VT_REF "t[vxWorks.taskLock]"

#define vxWorks_taskName_VT_DEF "S[vxWorks.taskName,v[state,L]v[priority,L]v[lockCnt,L]v[tid,L]v[entryPt,L]v[rtp,L]v[affinity,L]v[name,s]]"
#define vxWorks_taskName_VT_REF "t[vxWorks.taskName]"

#define vxWorks_taskPrioritySet_VT_DEF "S[vxWorks.taskPrioritySet,v[objId,L]v[classId,L]v[taskId,L]v[newPri,l]v[oldPri,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"priority set\"]]"
#define vxWorks_taskPrioritySet_VT_REF "t[vxWorks.taskPrioritySet]"

#define vxWorks_taskResume_VT_DEF "S[vxWorks.taskResume,v[objId,L]v[classId,L]v[taskId,L]v[priority,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"resume\"]]"
#define vxWorks_taskResume_VT_REF "t[vxWorks.taskResume]"

#define vxWorks_taskRotate_VT_DEF "S[vxWorks.taskRotate,v[objId,L]v[classId,L]v[priority,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"rotate\"]]"
#define vxWorks_taskRotate_VT_REF "t[vxWorks.taskRotate]"

#define vxWorks_taskSafe_VT_DEF "S[vxWorks.taskSafe,v[objId,L]v[classId,L]v[taskId,L]v[safeCount,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"safe\"]]"
#define vxWorks_taskSafe_VT_REF "t[vxWorks.taskSafe]"

#define vxWorks_taskSpawn_VT_DEF "S[vxWorks.taskSpawn,v[taskId,L]v[priority,L]v[stacksize,L]v[entryPoint,L]v[options,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"spawn\"]]"
#define vxWorks_taskSpawn_VT_REF "t[vxWorks.taskSpawn]"

#define vxWorks_taskStop_VT_DEF "S[vxWorks.taskStop,v[objId,L]v[classId,L]v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"stop\"]]"
#define vxWorks_taskStop_VT_REF "t[vxWorks.taskStop]"

#define vxWorks_taskSuspend_VT_DEF "S[vxWorks.taskSuspend,v[objId,L]v[classId,L]v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"suspend\"]]"
#define vxWorks_taskSuspend_VT_REF "t[vxWorks.taskSuspend]"

#define vxWorks_taskUnlock_VT_DEF "S[vxWorks.taskUnlock,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"unlock\"]]"
#define vxWorks_taskUnlock_VT_REF "t[vxWorks.taskUnlock]"

#define vxWorks_taskUnlockNonZero_VT_DEF "S[vxWorks.taskUnlockNonZero,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"unlock (Non-zero)\"]]"
#define vxWorks_taskUnlockNonZero_VT_REF "t[vxWorks.taskUnlockNonZero]"

#define vxWorks_taskUnlockZero_VT_DEF "S[vxWorks.taskUnlockZero,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"unlock (Zero)\"]]"
#define vxWorks_taskUnlockZero_VT_REF "t[vxWorks.taskUnlockZero]"

#define vxWorks_taskUnsafe_VT_DEF "S[vxWorks.taskUnsafe,v[objId,L]v[classId,L]v[taskId,L]v[safeCount,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"unsafe\"]]"
#define vxWorks_taskUnsafe_VT_REF "t[vxWorks.taskUnsafe]"

#define vxWorks_tickAnnounce_VT_DEF "S[vxWorks.tickAnnounce,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"tickAnnounce\"]]"
#define vxWorks_tickAnnounce_VT_REF "t[vxWorks.tickAnnounce]"

#define vxWorks_ticks_VT_DEF "S[vxWorks.ticks,v[timestamp,Q]]"
#define vxWorks_ticks_VT_REF "t[vxWorks.ticks]"

#define vxWorks_timerRollover_VT_DEF "S[vxWorks.timerRollover]"
#define vxWorks_timerRollover_VT_REF "t[vxWorks.timerRollover]"

#define vxWorks_wdCancel_VT_DEF "S[vxWorks.wdCancel,v[objId,L]v[classId,L]v[wdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"cancel\"]]"
#define vxWorks_wdCancel_VT_REF "t[vxWorks.wdCancel]"

#define vxWorks_wdCreate_VT_DEF "S[vxWorks.wdCreate,v[objId,L]v[classId,L]v[wdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"create\"]]"
#define vxWorks_wdCreate_VT_REF "t[vxWorks.wdCreate]"

#define vxWorks_wdDelete_VT_DEF "S[vxWorks.wdDelete,v[objId,L]v[classId,L]v[wdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"delete\"]]"
#define vxWorks_wdDelete_VT_REF "t[vxWorks.wdDelete]"

#define vxWorks_wdStart_VT_DEF "S[vxWorks.wdStart,v[objId,L]v[classId,L]v[wdId,L]v[delay,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"start\"]]"
#define vxWorks_wdStart_VT_REF "t[vxWorks.wdStart]"

#define vxWorks_windCont_VT_DEF "S[vxWorks.windCont,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windCont\"]]"
#define vxWorks_windCont_VT_REF "t[vxWorks.windCont]"

#define vxWorks_windDelay_VT_DEF "S[vxWorks.windDelay,v[timeout,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windDelay\"]]"
#define vxWorks_windDelay_VT_REF "t[vxWorks.windDelay]"

#define vxWorks_windDelete_VT_DEF "S[vxWorks.windDelete,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windDelete\"]]"
#define vxWorks_windDelete_VT_REF "t[vxWorks.windDelete]"

#define vxWorks_windExitDispatch_VT_DEF "S[vxWorks.windExitDispatch,v[taskId,L]v[priority,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"dispatch\"]]"
#define vxWorks_windExitDispatch_VT_REF "t[vxWorks.windExitDispatch]"

#define vxWorks_windExitDispatchPI_VT_DEF "S[vxWorks.windExitDispatchPI,v[taskId,L]v[priority,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"dispatch (inherited priority)\"]]"
#define vxWorks_windExitDispatchPI_VT_REF "t[vxWorks.windExitDispatchPI]"

#define vxWorks_windExitIdle_VT_DEF "S[vxWorks.windExitIdle,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"transtion to idle\"]]"
#define vxWorks_windExitIdle_VT_REF "t[vxWorks.windExitIdle]"

#define vxWorks_windPendQFlush_VT_DEF "S[vxWorks.windPendQFlush,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windPendQFlush\"]]"
#define vxWorks_windPendQFlush_VT_REF "t[vxWorks.windPendQFlush]"

#define vxWorks_windPendQGet_VT_DEF "S[vxWorks.windPendQGet,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windPendQGet\"]]"
#define vxWorks_windPendQGet_VT_REF "t[vxWorks.windPendQGet]"

#define vxWorks_windPendQPut_VT_DEF "S[vxWorks.windPendQPut,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windPendQPut\"]]"
#define vxWorks_windPendQPut_VT_REF "t[vxWorks.windPendQPut]"

#define vxWorks_windPendQTerminate_VT_DEF "S[vxWorks.windPendQTerminate,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windPendQTerminate\"]]"
#define vxWorks_windPendQTerminate_VT_REF "t[vxWorks.windPendQTerminate]"

#define vxWorks_windPrioritySetLower_VT_DEF "S[vxWorks.windPrioritySetLower,v[taskId,L]v[oldPri,L]v[newPri,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windPrioritySetLower\"]]"
#define vxWorks_windPrioritySetLower_VT_REF "t[vxWorks.windPrioritySetLower]"

#define vxWorks_windPrioritySetRaise_VT_DEF "S[vxWorks.windPrioritySetRaise,v[taskId,L]v[oldPri,L]v[newPri,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windPrioritySetRaise\"]]"
#define vxWorks_windPrioritySetRaise_VT_REF "t[vxWorks.windPrioritySetRaise]"

#define vxWorks_windResume_VT_DEF "S[vxWorks.windResume,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windResume\"]]"
#define vxWorks_windResume_VT_REF "t[vxWorks.windResume]"

#define vxWorks_windSemDelete_VT_DEF "S[vxWorks.windSemDelete,v[semId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windSemDelete\"]]"
#define vxWorks_windSemDelete_VT_REF "t[vxWorks.windSemDelete]"

#define vxWorks_windSpawn_VT_DEF "S[vxWorks.windSpawn,v[taskId,L]v[priority,l],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windSpawn\"]]"
#define vxWorks_windSpawn_VT_REF "t[vxWorks.windSpawn]"

#define vxWorks_windStop_VT_DEF "S[vxWorks.windStop,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windStop\"]]"
#define vxWorks_windStop_VT_REF "t[vxWorks.windStop]"

#define vxWorks_windSuspend_VT_DEF "S[vxWorks.windSuspend,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windSuspend\"]]"
#define vxWorks_windSuspend_VT_REF "t[vxWorks.windSuspend]"

#define vxWorks_windTickAnnounceTmrSlc_VT_DEF "S[vxWorks.windTickAnnounceTmrSlc,,n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windTickAnnounceTmrSlc\"]]"
#define vxWorks_windTickAnnounceTmrSlc_VT_REF "t[vxWorks.windTickAnnounceTmrSlc]"

#define vxWorks_windTickAnnounceTmrWd_VT_DEF "S[vxWorks.windTickAnnounceTmrWd,v[wdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windTickAnnounceTmrWd\"]]"
#define vxWorks_windTickAnnounceTmrWd_VT_REF "t[vxWorks.windTickAnnounceTmrWd]"

#define vxWorks_windTickTimeout_VT_DEF "S[vxWorks.windTickTimeout,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windTickTimeout\"]]"
#define vxWorks_windTickTimeout_VT_REF "t[vxWorks.windTickTimeout]"

#define vxWorks_windTickUndelay_VT_DEF "S[vxWorks.windTickUndelay,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windTickUndelay\"]]"
#define vxWorks_windTickUndelay_VT_REF "t[vxWorks.windTickUndelay]"

#define vxWorks_windUndelay_VT_DEF "S[vxWorks.windUndelay,v[taskId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windUndelay\"]]"
#define vxWorks_windUndelay_VT_REF "t[vxWorks.windUndelay]"

#define vxWorks_windWdCancel_VT_DEF "S[vxWorks.windWdCancel,v[wdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windWdCancel\"]]"
#define vxWorks_windWdCancel_VT_REF "t[vxWorks.windWdCancel]"

#define vxWorks_windWdStart_VT_DEF "S[vxWorks.windWdStart,v[wdId,L],n[cafe.COUNTER_METRIC_CLASS]n[cafe.LABEL,\"windWdStart\"]]"
#define vxWorks_windWdStart_VT_REF "t[vxWorks.windWdStart]"

#define VXWORKS_TYPE_ALL_VT_DEFS \
	VX_CURRENT_FILE_DESCRIPTOR_VT_DEF \
	VX_CURRENT_RTP_ID_VT_DEF \
	VX_CURRENT_TASK_ID_VT_DEF \
	vxWorks_context_VT_DEF \
	vxWorks_core_VT_DEF \
	vxWorks_dprintf_VT_DEF \
	vxWorks_edrErrorInject_VT_DEF \
	vxWorks_eventReceive_VT_DEF \
	vxWorks_eventSend_VT_DEF \
	vxWorks_exception_VT_DEF \
	vxWorks_intEnter_VT_DEF \
	vxWorks_intEnterPpcDec_VT_DEF \
	vxWorks_intEnterPpcWd_VT_DEF \
	vxWorks_intExit_VT_DEF \
	vxWorks_intExitK_VT_DEF \
	vxWorks_ioClose_VT_DEF \
	vxWorks_ioCreat_VT_DEF \
	vxWorks_ioDelete_VT_DEF \
	vxWorks_ioIoctl_VT_DEF \
	vxWorks_ioOpen_VT_DEF \
	vxWorks_ioRead_VT_DEF \
	vxWorks_ioWrite_VT_DEF \
	vxWorks_isrCreate_VT_DEF \
	vxWorks_isrDestroy_VT_DEF \
	vxWorks_isrDispatcherDone_VT_DEF \
	vxWorks_isrDispatcherInvoke_VT_DEF \
	vxWorks_isrInfo_VT_DEF \
	vxWorks_kill_VT_DEF \
	vxWorks_memAddToPool_VT_DEF \
	vxWorks_memAlloc_VT_DEF \
	vxWorks_memFree_VT_DEF \
	vxWorks_memPartCreate_VT_DEF \
	vxWorks_memRealloc_VT_DEF \
	vxWorks_moduleLoad_VT_DEF \
	vxWorks_moduleUnload_VT_DEF \
	vxWorks_msgQCreate_VT_DEF \
	vxWorks_msgQDelete_VT_DEF \
	vxWorks_msgQRecv_VT_DEF \
	vxWorks_msgQSend_VT_DEF \
	vxWorks_objEventReceive_VT_DEF \
	vxWorks_objEventSend_VT_DEF \
	vxWorks_objMsgDelete_VT_DEF \
	vxWorks_objMsgReceive_VT_DEF \
	vxWorks_objMsgSend_VT_DEF \
	vxWorks_objOwnerSet_VT_DEF \
	vxWorks_objSemFlush_VT_DEF \
	vxWorks_objSemGive_VT_DEF \
	vxWorks_objSemRTake_VT_DEF \
	vxWorks_objSemTake_VT_DEF \
	vxWorks_objSemWTake_VT_DEF \
	vxWorks_objSigKill_VT_DEF \
	vxWorks_objSigPause_VT_DEF \
	vxWorks_objSigSuspend_VT_DEF \
	vxWorks_objSigWait_VT_DEF \
	vxWorks_objWindRotate_VT_DEF \
	vxWorks_pause_VT_DEF \
	vxWorks_rtpChildWait_VT_DEF \
	vxWorks_rtpDelete_VT_DEF \
	vxWorks_rtpInitTask_VT_DEF \
	vxWorks_rtpKill_VT_DEF \
	vxWorks_rtpLoad_VT_DEF \
	vxWorks_rtpMemAlloc_VT_DEF \
	vxWorks_rtpMemFree_VT_DEF \
	vxWorks_rtpMemPartCreate_VT_DEF \
	vxWorks_rtpMemRealloc_VT_DEF \
	vxWorks_rtpName_VT_DEF \
	vxWorks_rtpPause_VT_DEF \
	vxWorks_rtpSigPending_VT_DEF \
	vxWorks_rtpSigProcMask_VT_DEF \
	vxWorks_rtpSigQueue_VT_DEF \
	vxWorks_rtpSigTimedWait_VT_DEF \
	vxWorks_rtpSigWrapper_VT_DEF \
	vxWorks_rtpSigWrapperDone_VT_DEF \
	vxWorks_rtpSignal_VT_DEF \
	vxWorks_rtpSpawn_VT_DEF \
	vxWorks_rtpSuspend_VT_DEF \
	vxWorks_rtpTaskKill_VT_DEF \
	vxWorks_rtpTaskSigQueue_VT_DEF \
	vxWorks_rtpUnload_VT_DEF \
	vxWorks_sdCreate_VT_DEF \
	vxWorks_sdDelete_VT_DEF \
	vxWorks_sdMap_VT_DEF \
	vxWorks_sdUnmap_VT_DEF \
	vxWorks_semBCreate_VT_DEF \
	vxWorks_semCCreate_VT_DEF \
	vxWorks_semDelete_VT_DEF \
	vxWorks_semFlush_VT_DEF \
	vxWorks_semGive_VT_DEF \
	vxWorks_semMCreate_VT_DEF \
	vxWorks_semMGiveForce_VT_DEF \
	vxWorks_semRTake_VT_DEF \
	vxWorks_semRWCreate_VT_DEF \
	vxWorks_semTake_VT_DEF \
	vxWorks_semWTake_VT_DEF \
	vxWorks_sigSuspend_VT_DEF \
	vxWorks_sigWrapper_VT_DEF \
	vxWorks_signal_VT_DEF \
	vxWorks_syscallBadId_VT_DEF \
	vxWorks_syscallEnter_VT_DEF \
	vxWorks_syscallReturnError_VT_DEF \
	vxWorks_syscallReturnOk_VT_DEF \
	vxWorks_taskCont_VT_DEF \
	vxWorks_taskCpuAffinitySet_VT_DEF \
	vxWorks_taskDelay_VT_DEF \
	vxWorks_taskDestroy_VT_DEF \
	vxWorks_taskLock_VT_DEF \
	vxWorks_taskName_VT_DEF \
	vxWorks_taskPrioritySet_VT_DEF \
	vxWorks_taskResume_VT_DEF \
	vxWorks_taskRotate_VT_DEF \
	vxWorks_taskSafe_VT_DEF \
	vxWorks_taskSpawn_VT_DEF \
	vxWorks_taskStop_VT_DEF \
	vxWorks_taskSuspend_VT_DEF \
	vxWorks_taskUnlock_VT_DEF \
	vxWorks_taskUnlockNonZero_VT_DEF \
	vxWorks_taskUnlockZero_VT_DEF \
	vxWorks_taskUnsafe_VT_DEF \
	vxWorks_tickAnnounce_VT_DEF \
	vxWorks_ticks_VT_DEF \
	vxWorks_timerRollover_VT_DEF \
	vxWorks_wdCancel_VT_DEF \
	vxWorks_wdCreate_VT_DEF \
	vxWorks_wdDelete_VT_DEF \
	vxWorks_wdStart_VT_DEF \
	vxWorks_windCont_VT_DEF \
	vxWorks_windDelay_VT_DEF \
	vxWorks_windDelete_VT_DEF \
	vxWorks_windExitDispatch_VT_DEF \
	vxWorks_windExitDispatchPI_VT_DEF \
	vxWorks_windExitIdle_VT_DEF \
	vxWorks_windPendQFlush_VT_DEF \
	vxWorks_windPendQGet_VT_DEF \
	vxWorks_windPendQPut_VT_DEF \
	vxWorks_windPendQTerminate_VT_DEF \
	vxWorks_windPrioritySetLower_VT_DEF \
	vxWorks_windPrioritySetRaise_VT_DEF \
	vxWorks_windResume_VT_DEF \
	vxWorks_windSemDelete_VT_DEF \
	vxWorks_windSpawn_VT_DEF \
	vxWorks_windStop_VT_DEF \
	vxWorks_windSuspend_VT_DEF \
	vxWorks_windTickAnnounceTmrSlc_VT_DEF \
	vxWorks_windTickAnnounceTmrWd_VT_DEF \
	vxWorks_windTickTimeout_VT_DEF \
	vxWorks_windTickUndelay_VT_DEF \
	vxWorks_windUndelay_VT_DEF \
	vxWorks_windWdCancel_VT_DEF \
	vxWorks_windWdStart_VT_DEF \

struct vxWorks_context {
	unsigned long tid;
	unsigned long pid;
	int intCount;
	int intNum;
};

struct vxWorks_core {
	int cpu_id;
};

struct vxWorks_dprintf {
	char *message;
	unsigned long length;
};

struct vxWorks_edrErrorInject {
	int kind;
	char *filename;
	int linenumber;
	unsigned long address;
	char *message;
};

struct vxWorks_eventReceive {
	unsigned long events;
	long timeout;
	unsigned long options;
};

struct vxWorks_eventSend {
	unsigned long taskId;
	unsigned long events;
};

struct vxWorks_exception {
	unsigned long arg;
};

struct vxWorks_intEnter {
	long interrupt;
};

struct vxWorks_ioClose {
	unsigned long fdEntry;
	unsigned long classId;
	long fd;
};

struct vxWorks_ioCreat {
	unsigned long fdEntry;
	unsigned long classId;
	struct cafe_vm_blob filename;
	long fd;
	unsigned long flags;
};

struct vxWorks_ioDelete {
	struct cafe_vm_blob fileName;
};

struct vxWorks_ioIoctl {
	unsigned long fdEntry;
	unsigned long classId;
	unsigned long arg;
	long cmd;
	long fd;
};

struct vxWorks_ioOpen {
	unsigned long fdEntry;
	unsigned long classId;
	struct cafe_vm_blob filename;
	long fd;
	unsigned long flags;
};

struct vxWorks_ioRead {
	unsigned long fdEntry;
	unsigned long classId;
	struct cafe_vm_blob data;
	long fd;
	unsigned long result;
	unsigned long buffer;
};

struct vxWorks_ioWrite {
	unsigned long fdEntry;
	unsigned long classId;
	struct cafe_vm_blob data;
	long fd;
	unsigned long nBytes;
	unsigned long buffer;
};

struct vxWorks_isrCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long options;
	long parameter;
	unsigned long handlerRtn;
	unsigned long isrTag;
	unsigned long isrId;
};

struct vxWorks_isrDestroy {
	unsigned long objId;
	unsigned long classId;
	unsigned long isrId;
};

struct vxWorks_isrDispatcherDone {
	unsigned long objId;
	unsigned long classId;
	unsigned long isrId;
};

struct vxWorks_isrDispatcherInvoke {
	unsigned long objId;
	unsigned long classId;
	unsigned long isrId;
};

struct vxWorks_isrInfo {
	unsigned long isrId;
	unsigned long handler;
	char *name;
};

struct vxWorks_kill {
	long signo;
	unsigned long taskId;
};

struct vxWorks_memAddToPool {
	unsigned long objId;
	unsigned long classId;
	unsigned long partId;
	unsigned long poolSize;
};

struct vxWorks_memAlloc {
	unsigned long objId;
	unsigned long classId;
	unsigned long partId;
	unsigned long pBlock;
	unsigned long nBytesPlusHeaderAlign;
	unsigned long nBytesRequested;
};

struct vxWorks_memFree {
	unsigned long objId;
	unsigned long classId;
	unsigned long partId;
	unsigned long pBlock;
	unsigned long nBytesPlusHeaderAlign;
};

struct vxWorks_memPartCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long partId;
	unsigned long poolSize;
};

struct vxWorks_memRealloc {
	unsigned long objId;
	unsigned long classId;
	unsigned long partId;
	unsigned long pNewBlock;
	unsigned long nBytesRequested;
	unsigned long pOldBlock;
	unsigned long oldBlockSize;
};

struct vxWorks_moduleLoad {
	char *name;
	unsigned long moduleId;
	unsigned long textAddr;
	unsigned long textSize;
	unsigned long dataAddr;
	unsigned long dataSize;
	unsigned long bssAddr;
	unsigned long bssSize;
	unsigned long rtpId;
};

struct vxWorks_moduleUnload {
	unsigned long moduleId;
};

struct vxWorks_msgQCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long msgQId;
	unsigned long maxMsgs;
	unsigned long maxMsgLength;
	unsigned long options;
};

struct vxWorks_msgQDelete {
	unsigned long objId;
	unsigned long classId;
	unsigned long msgQId;
};

struct vxWorks_msgQRecv {
	unsigned long objId;
	unsigned long classId;
	unsigned long msgQId;
	unsigned long buffer;
	unsigned long maxBytes;
	unsigned long timeout;
};

struct vxWorks_msgQSend {
	unsigned long objId;
	unsigned long classId;
	unsigned long msgQId;
	unsigned long buffer;
	unsigned long nBytes;
	unsigned long timeout;
	unsigned long priority;
};

struct vxWorks_objMsgDelete {
	unsigned long msgQId;
};

struct vxWorks_objMsgReceive {
	unsigned long msgQId;
};

struct vxWorks_objMsgSend {
	unsigned long msgQId;
};

struct vxWorks_objOwnerSet {
	unsigned long id;
	unsigned long classId;
	unsigned long objId;
	unsigned long ownerId;
};

struct vxWorks_objSemFlush {
	unsigned long semId;
};

struct vxWorks_objSemGive {
	unsigned long semId;
};

struct vxWorks_objSemRTake {
	unsigned long semId;
};

struct vxWorks_objSemTake {
	unsigned long semId;
};

struct vxWorks_objSemWTake {
	unsigned long semId;
};

struct vxWorks_objSigKill {
	unsigned long taskId;
};

struct vxWorks_objSigPause {
	unsigned long taskId;
};

struct vxWorks_objSigSuspend {
	unsigned long pSet;
};

struct vxWorks_objSigWait {
	unsigned long taskId;
};

struct vxWorks_objWindRotate {
	long priority;
};

struct vxWorks_pause {
	unsigned long taskId;
};

struct vxWorks_rtpChildWait {
	unsigned long rtpId;
	unsigned long options;
};

struct vxWorks_rtpDelete {
	unsigned long objId;
	unsigned long classId;
	unsigned long options;
	unsigned long rtpId;
};

struct vxWorks_rtpInitTask {
	unsigned long objId;
	unsigned long classId;
	unsigned long pInitialStack;
	unsigned long pEnv;
	unsigned long pArgv;
	long numArgs;
	unsigned long rtpId;
};

struct vxWorks_rtpKill {
	long signo;
	unsigned long rtpId;
};

struct vxWorks_rtpLoad {
	unsigned long dataSize;
	unsigned long dataAddr;
	unsigned long textSize;
	unsigned long textAddr;
	unsigned long entryPoint;
	unsigned long rtpId;
	char *name;
};

struct vxWorks_rtpMemAlloc {
	unsigned long partId;
	unsigned long pBlock;
	unsigned long blockSize;
	unsigned long nBytesRequested;
};

struct vxWorks_rtpMemFree {
	unsigned long partId;
	unsigned long pBlock;
	unsigned long blockSize;
};

struct vxWorks_rtpMemPartCreate {
	unsigned long partId;
	unsigned long poolSize;
};

struct vxWorks_rtpMemRealloc {
	unsigned long partId;
	unsigned long pNewBlock;
	unsigned long nBytesRequested;
	unsigned long pOldBlock;
	unsigned long oldBlockSize;
};

struct vxWorks_rtpName {
	long options;
	unsigned long owner;
	unsigned long rtpId;
	char *name;
};

struct vxWorks_rtpPause {
	unsigned long rtpId;
};

struct vxWorks_rtpSigPending {
	unsigned long pSet;
	unsigned long rtpId;
};

struct vxWorks_rtpSigProcMask {
	unsigned long pOset;
	unsigned long pSet;
	long how;
	unsigned long rtpId;
};

struct vxWorks_rtpSigQueue {
	long sival;
	long signo;
	unsigned long rtpId;
};

struct vxWorks_rtpSigTimedWait {
	unsigned long timeout;
	unsigned long pInfo;
	unsigned long pSet;
	unsigned long rtpId;
};

struct vxWorks_rtpSigWrapper {
	long type;
	unsigned long rtpId;
};

struct vxWorks_rtpSigWrapperDone {
	unsigned long rtpId;
};

struct vxWorks_rtpSignal {
	unsigned long action;
	long signo;
	unsigned long rtpId;
};

struct vxWorks_rtpSpawn {
	unsigned long objId;
	unsigned long classId;
	unsigned long options;
	unsigned long stacksize;
	long priority;
	unsigned long rtpId;
};

struct vxWorks_rtpSuspend {
	unsigned long sigset;
};

struct vxWorks_rtpTaskKill {
	unsigned long signo;
	unsigned long taskId;
};

struct vxWorks_rtpTaskSigQueue {
	unsigned long value;
	long signo;
	unsigned long taskId;
};

struct vxWorks_rtpUnload {
	unsigned long rtpId;
};

struct vxWorks_sdCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long nameLength;
	char *name;
	unsigned long sdId;
	unsigned long options;
	unsigned long size;
	unsigned long attr;
	unsigned long virtAddr;
};

struct vxWorks_sdDelete {
	unsigned long objId;
	unsigned long classId;
	unsigned long options;
	unsigned long sdId;
};

struct vxWorks_sdMap {
	unsigned long objId;
	unsigned long classId;
	unsigned long options;
	unsigned long attr;
	unsigned long sdId;
};

struct vxWorks_sdUnmap {
	unsigned long objId;
	unsigned long classId;
	unsigned long options;
	unsigned long sdId;
};

struct vxWorks_semBCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long options;
	unsigned long owner;
};

struct vxWorks_semCCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long options;
	unsigned long initialCount;
};

struct vxWorks_semDelete {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long recurse;
	unsigned long qHead;
};

struct vxWorks_semFlush {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long recurse;
	unsigned long qHead;
};

struct vxWorks_semGive {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long owner;
	unsigned long recurse;
};

struct vxWorks_semMCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long options;
	unsigned long owner;
};

struct vxWorks_semMGiveForce {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long options;
	unsigned long owner;
};

struct vxWorks_semRTake {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long owner;
	long recurse;
};

struct vxWorks_semRWCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	long maxReaders;
	long options;
	unsigned long owner;
};

struct vxWorks_semTake {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long owner;
	unsigned long recurse;
};

struct vxWorks_semWTake {
	unsigned long objId;
	unsigned long classId;
	unsigned long semId;
	unsigned long owner;
	long recurse;
};

struct vxWorks_sigSuspend {
	unsigned long sigset;
};

struct vxWorks_sigWrapper {
	long signo;
	unsigned long taskId;
};

struct vxWorks_signal {
	long signo;
	unsigned long handler;
};

struct vxWorks_syscallBadId {
	unsigned long objId;
	unsigned long classId;
	long group;
	long routine;
};

struct vxWorks_syscallEnter {
	unsigned long rtpId;
	long nParams;
	unsigned long pState;
};

struct vxWorks_syscallReturnError {
	unsigned long objId;
	unsigned long classId;
	long errnoResult;
};

struct vxWorks_syscallReturnOk {
	unsigned long objId;
	unsigned long classId;
	long result;
};

struct vxWorks_taskCont {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
	long priority;
};

struct vxWorks_taskCpuAffinitySet {
	unsigned long objId;
	unsigned long classId;
	unsigned long affinity;
	long taskId;
};

struct vxWorks_taskDelay {
	unsigned long objId;
	unsigned long classId;
	long ticks;
};

struct vxWorks_taskDestroy {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
	long safeCount;
};

struct vxWorks_taskName {
	unsigned long state;
	unsigned long priority;
	unsigned long lockCnt;
	unsigned long tid;
	unsigned long entryPt;
	unsigned long rtp;
	unsigned long affinity;
	char *name;
};

struct vxWorks_taskPrioritySet {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
	long newPri;
	long oldPri;
};

struct vxWorks_taskResume {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
	long priority;
};

struct vxWorks_taskRotate {
	unsigned long objId;
	unsigned long classId;
	long priority;
};

struct vxWorks_taskSafe {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
	long safeCount;
};

struct vxWorks_taskSpawn {
	unsigned long taskId;
	unsigned long priority;
	unsigned long stacksize;
	unsigned long entryPoint;
	unsigned long options;
};

struct vxWorks_taskStop {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
};

struct vxWorks_taskSuspend {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
};

struct vxWorks_taskUnsafe {
	unsigned long objId;
	unsigned long classId;
	unsigned long taskId;
	long safeCount;
};

struct vxWorks_ticks {
	unsigned long long timestamp;
};

struct vxWorks_wdCancel {
	unsigned long objId;
	unsigned long classId;
	unsigned long wdId;
};

struct vxWorks_wdCreate {
	unsigned long objId;
	unsigned long classId;
	unsigned long wdId;
};

struct vxWorks_wdDelete {
	unsigned long objId;
	unsigned long classId;
	unsigned long wdId;
};

struct vxWorks_wdStart {
	unsigned long objId;
	unsigned long classId;
	unsigned long wdId;
	long delay;
};

struct vxWorks_windCont {
	unsigned long taskId;
};

struct vxWorks_windDelay {
	long timeout;
};

struct vxWorks_windDelete {
	unsigned long taskId;
};

struct vxWorks_windExitDispatch {
	unsigned long taskId;
	unsigned long priority;
};

struct vxWorks_windExitDispatchPI {
	unsigned long taskId;
	unsigned long priority;
};

struct vxWorks_windPendQFlush {
	unsigned long taskId;
};

struct vxWorks_windPendQGet {
	unsigned long taskId;
};

struct vxWorks_windPendQTerminate {
	unsigned long taskId;
};

struct vxWorks_windPrioritySetLower {
	unsigned long taskId;
	unsigned long oldPri;
	unsigned long newPri;
};

struct vxWorks_windPrioritySetRaise {
	unsigned long taskId;
	unsigned long oldPri;
	unsigned long newPri;
};

struct vxWorks_windResume {
	unsigned long taskId;
};

struct vxWorks_windSemDelete {
	unsigned long semId;
};

struct vxWorks_windSpawn {
	unsigned long taskId;
	long priority;
};

struct vxWorks_windStop {
	unsigned long taskId;
};

struct vxWorks_windSuspend {
	unsigned long taskId;
};

struct vxWorks_windTickAnnounceTmrWd {
	unsigned long wdId;
};

struct vxWorks_windTickTimeout {
	unsigned long taskId;
};

struct vxWorks_windTickUndelay {
	unsigned long taskId;
};

struct vxWorks_windUndelay {
	unsigned long taskId;
};

struct vxWorks_windWdCancel {
	unsigned long wdId;
};

struct vxWorks_windWdStart {
	unsigned long wdId;
};

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif
