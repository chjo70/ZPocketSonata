/* event_map.c - Maps local events to events from external address spaces. */

/* Copyright (c) 2010 Wind River Systems, Inc.
 *
 * The right to copy, distribute or otherwise make use of this software
 * may be licensed only pursuant to the terms of an applicable Wind River
 * license agreement.
 */

#if !defined(__event_map_h)
#define __event_map_h

#include <cafe/cafe.h>
#include <cafe/autogenerated/cafe.type.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Event Map objects allow clients to interpret events from external address
   spaces.
*/


/* An event_map object is a handle used to store all the mappings between
   remote event IDs and the local event descriptions. */
struct cafe_event_map;


/* */
struct cafe_remote_event {
	unsigned long long remote_id;
	struct cafe_event_descr *event;
	void *client_data;
};


/**
 *  Returns a newly created empty mapping, or NULL on failure.
 */
extern struct cafe_event_map *cafe_event_map_create(
	struct cafe_instrument *session);


/**
 *  Free all resources associated with a previously created mapping.
 */
extern void cafe_event_map_destroy(struct cafe_event_map *map);


/**
 *  Iterate over all remote events associated with the event map.
 */
extern void cafe_event_map_iter(struct cafe_event_map *map,
				bool (*cb)(void *client_data,
					   struct cafe_remote_event *),
				void *client_data);

/**
 *  Create an event within the given mapping, as described by the given
 * metadata.  Associates this new event with the remote event id contained
 * in the metadata.
 */
extern int cafe_event_map_add_event(
	struct cafe_event_map *map,
	const struct cafe_metadata *description,
	void *client_data,
	struct cafe_remote_event **result);


/**
 *  Return the local event ID corresponding to the given remote event id, or
 * NULL if no mapping was found.
 */
extern struct cafe_remote_event *cafe_event_map_lookup(
	const struct cafe_event_map *map, unsigned long long event_id);

#ifdef __cplusplus
}
#endif

#endif  /* if !defined(__event_map_h) */
