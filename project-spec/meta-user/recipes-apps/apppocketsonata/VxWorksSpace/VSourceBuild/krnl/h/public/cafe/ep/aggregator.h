/* aggregator - configurable table aggregator event processor */

/*
 * Copyright (c) 2010-2012 Wind River Systems, Inc.
 *
 * The right to copy, distribute, modify or otherwise make use
 * of this software may be licensed only pursuant to the terms
 * of an applicable Wind River license agreement.
 */

#ifndef INCaggregator_h
#define INCaggregator_h

#include <cafe/value_type.h>
#include <cafe/autogenerated/cafe.type.h>
#include <cafe/autogenerated/cafe_aggregator.type.h>

#ifdef __cplusplus
extern "C" {
#endif


#define CAFE_AGGREGATOR_EP_NAME		"cafe_aggregator"


extern void cafe_aggregator_ep_unregister(void);
extern int cafe_aggregator_ep_register(void);

extern int cafe_aggregator_ep_table_create(
	struct cafe_ep_inst *inst,
	struct cafe_value_type *type);

extern int cafe_aggregator_ep_table_delete(
	struct cafe_ep_inst *inst,
	struct cafe_value_type *type);

extern int cafe_aggregator_ep_action_add(
	struct cafe_ep_inst *inst,
	const char *trigger,
	const char *filter,
	const char *cell,
	const char *operation,
	const char *args);

extern int cafe_aggregator_ep_action_del(
	struct cafe_ep_inst *inst,
	const char *trigger,
	const char *filter,
	const char *cell,
	const char *operation,
	const char *args);


struct symresolve_actions;
struct cafe_dict_struct;

struct symresolve_functions {
	int (*actions_create)(struct cafe_value_type *delta_vt,
			      const struct cafe_allocator *allocator,
			      struct symresolve_actions **actions);
	void (*actions_delete)(struct symresolve_actions *actions);
	void (*set_symindex)(struct symresolve_actions *actions,
			     struct cafe_dict_struct *symbol_table);
	void (*set_lineinfoindex)(struct symresolve_actions *actions,
				  struct cafe_dict_struct *lineinfo_table);
	void (*set_errhandler)(struct symresolve_actions *actions,
			       void (*handler_callback) (const char *msg, void *arg),
			       void *arg);
	void (*actions_reset)(struct symresolve_actions *actions);
	int (*mm_update)(struct symresolve_actions *actions,
			 unsigned long long address_space_uid,
			 unsigned long long start_addr,
			 unsigned long long size,
			 unsigned long long file_offset,
			 const char *file_name,
			 bool map);
	int (*mm_delta)(struct symresolve_actions *actions,
			void *delta);
	int (*mm_flush)(struct symresolve_actions *actions);
	int (*address_space_clone)(struct symresolve_actions *actions,
				   unsigned long long address_space_uid,
				   unsigned long long new_uid);
	int (*address_space_clear)(struct symresolve_actions *actions,
				   unsigned long long address_space_uid,
				   unsigned long long parent_uid);
	int (*address_space_delete)(struct symresolve_actions *actions,
				    unsigned long long address_space_uid);
	int (*mm_current_gen)(struct symresolve_actions *actions,
			      unsigned long long address_space_uid,
			      unsigned long long *current_gen);
	int (*callstack)(struct symresolve_actions *actions,
			 unsigned long long address_space_uid,
			 unsigned long long mm_generation,
			 const struct cafe_vm_dynarray *stack,
			 const struct cafe_value_type *result_type,
			 struct cafe_vm_dynarray *result);
	int (*mm_gen_delta)(struct symresolve_actions *actions, void *delta);
	void (*mm_clear_delta)(struct symresolve_actions *actions, void *delta);
};

extern void aggregator_symresolve_register(const struct symresolve_functions *);

extern void symresolve_aggregator_ini(void);


#ifdef __cplusplus
}
#endif	/* __cplusplus */

#endif	/* INCaggregator_h */
