/* user_event - simple user event root provider */

/*
 * Copyright (c) 2010-2012 Wind River Systems, Inc.
 *
 * The right to copy, distribute, modify or otherwise make use
 * of this software may be licensed only pursuant to the terms
 * of an applicable Wind River license agreement.
 */

#ifndef INCuser_event_h
#define INCuser_event_h

#include <cafe/cafe.h>
#include <cafe/autogenerated/user_event.type.h>


#ifdef __cplusplus
extern "C" {
#endif

struct cafe_user_event_handle;

/*******************************************************************************
*
* cafe_user_event_signed - Generate user event with signed value
*
* This function will generate a user event with signed value to all
* instruments that include an instance of the "user event" event
* processor.
*
* EXAMPLE IMPLEMENTATION:
*   void cafe_user_event_signed(
*     char *label,
*     long long value)
*   {
*     struct cafe_user_event_signed_struct data;
*
*     data.label = label;
*     data.value = value;
*     cafe_user_event_generate(&signed_handle, &data);
*   }
*
* RETURNS: N/A
*
* ERRNO:
*/
extern void cafe_user_event_signed(
	const char *label,
	long long value);

/*******************************************************************************
*
* cafe_user_event_unsigned - Generate user event with unsigned value
*
* This function will generate a user event with unsigned value to all
* instruments that include an instance of the "user event" event
* processor.
*
* EXAMPLE IMPLEMENTATION:
*   void cafe_user_event_unsigned(
*     char *label,
*     unsigned long long value)
*   {
*     struct cafe_user_event_unsigned_struct data;
*
*     data.label = label;
*     data.value = value;
*     cafe_user_event_generate(&unsigned_handle, &data);
*   }
*
* RETURNS: N/A
*
* ERRNO:
*/
extern void cafe_user_event_unsigned(
	const char *label,
	unsigned long long value);

/*******************************************************************************
*
* cafe_user_event_float - Generate user event with floating point value
*
* This function will generate a user event with double value to all
* instruments that include an instance of the "user event" event
* processor.
*
* EXAMPLE IMPLEMENTATION:
*   void cafe_user_event_float(
*     char *label,
*     double value)
*   {
*     struct cafe_user_event_float_struct data;
*
*     data.label = label;
*     data.value = value;
*     cafe_user_event_generate(&float_handle, &data);
*   }
*
* RETURNS: N/A
*
* ERRNO:
*/
extern void cafe_user_event_float(
	const char *label,
	double value);

/*******************************************************************************
*
* cafe_user_event_string - Generate user event with string value
*
* This function will generate a user event with string value to all
* instruments that include an instance of the "user event" event
* processor.
*
* EXAMPLE IMPLEMENTATION:
*   void cafe_user_event_string(
*     char *label,
*     const char *value)
*   {
*     struct cafe_user_event_string_struct data;
*
*     data.label = label;
*     data.value = value;
*     cafe_user_event_generate(&string_handle, &data);
*   }
*
* RETURNS: N/A
*
* ERRNO:
*/
extern void cafe_user_event_string(
	const char *label,
	const char *value);

/*******************************************************************************
*
* cafe_user_event_add - Adds a new user event type to the system
*
* This function should be called to add event types to the system.  A
* handle is returned that can be used to generate events and release
* the event type.
*
* The <vt2str> argument is a string specifying the main event followed
* by the orthogonal data types that should be included when the event
* is generated.
*
* Must be called with the cafe system lock acquired.
*
* RETURNS: CAFE_OK, or Cafe error code
*
* ERRNO:
*/
extern int cafe_user_event_add(
	const struct cafe_allocator *allocator,
	const char *vt2str,
	struct cafe_user_event_handle **handle);

/*******************************************************************************
*
* cafe_user_event_release - Release user event type specified by handle
*
* This function should be called to release event types previously
* added to the system.
*
* Must be called with the cafe system lock acquired.
*
* RETURNS: N/A
*
* ERRNO:
*/
extern void cafe_user_event_release(
	struct cafe_user_event_handle *handle);

/*******************************************************************************
*
* cafe_user_event_generate - Generate event type specified by handle
*
* This function will generate the given event with the given data to
* all instruments that includes the "user event" event processor.
*
* RETURNS: N/A
*
* ERRNO:
*/
extern void cafe_user_event_generate(
	struct cafe_user_event_handle *handle,
	void *data);

/*******************************************************************************
*
* cafe_user_event_generate2 - Generate event type and orthogonal data specified by handle
*
* This function will generate the given event with the given data to
* all instruments that includes the "user event" event processor.  It
* is identical to cafe_user_event_generate() except that it allows the
* caller to specify values to be used as orthogonal data.  Any NULL
* orthogonal data pointer will, if possible, be populated by the user
* event implementation.
*
* RETURNS: N/A
*
* ERRNO:
*/
extern void cafe_user_event_generate2(
	struct cafe_user_event_handle *handle,
	void **data);

#ifdef __cplusplus
}
#endif	/* __cplusplus */

#endif	/* INCuser_event_h */
