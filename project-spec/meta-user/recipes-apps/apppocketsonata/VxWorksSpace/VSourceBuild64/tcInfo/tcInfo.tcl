# tcInfo.tcl - generated by tcInfoGen.tcl


set tcWIND_HOME [file normalize [prjEnv WIND_HOME]]

set tcWIND_HOST_TYPE [prjEnv WIND_HOST_TYPE]

if {$tcWIND_HOST_TYPE == "x86-win32"} {
# this will be the WIN subst
set tct1 /WIN32/bin
} else {
# this will be the LINUX subst
set tct1 /LINUX386/bin
}


# toolchain : PPCE6500diab

namespace eval tcInfo {}

lappend tcInfo::ToolFamilies(PPCE6500) diab
set tcInfo_PPCE6500diab(TOOL_FAMILY) diab
set ::tcInfo_PPCE6500diab(CC) "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/dcc"
set ::tcInfo_PPCE6500diab(CPP) "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/dcc -E"
set ::tcInfo_PPCE6500diab(AS) "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/dcc"
set ::tcInfo_PPCE6500diab(LD) "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/dld"
set ::tcInfo_PPCE6500diab(NM) "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/ddump -Ng"
set ::tcInfo_PPCE6500diab(SIZE) "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/ddump -Z"
set ::tcInfo_PPCE6500diab(AR) "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/dar"
set ::tcInfo_PPCE6500diab(HEX_FLAGS) ""
set ::tcInfo_PPCE6500diab(OPTION_INCLUDE_DIR) -I
set ::tcInfo_PPCE6500diab(OPTION_DEFINE_MACRO) -D
set ::tcInfo_PPCE6500diab(OPTION_UNDEFINE_MACRO) -U
set ::tcInfo_PPCE6500diab(OPTION_LANG_C) "-xc"
set ::tcInfo_PPCE6500diab(OPTION_GENERATE_DEPENDENCY_FILE) -MD
set ::tcInfo_PPCE6500diab(OPTION_DEPEND) "-Xmake-dependency -w"
set ::tcInfo_PPCE6500diab(CC_ARCH_SPEC) "-tPPCLP64FV:vxworks7 -Xkeywords=0x0 -D_WRS_HARDWARE_FP -ffixed-r13 -ID:/vxWorks7/vxworks-7/pkgs/os/arch/ppc/kernel/base/h/arch/ppc/private/globRegs.h -Xcode-model-medium"
namespace eval ::tc_PPCE6500diab { }

set ::tc_PPCE6500diab::tcname(big_hard) diab

namespace eval ::tc_PPCE6500diab::tool_cc {

    proc type {} {
	return "C compiler"
    }

    proc inputSuffixes {} {
	return ".c .C"
    }

    proc outputFiles {inFile} {
	return [file rootname [file tail $inFile]].o
    }

    proc buildCmds {flags file} {
	return [list "\$(CC) $flags -c $file"]
    }

    proc toolMacro {} {
	return CC
    }

    proc flagsMacro {} {
	return CFLAGS
    }

    proc sdFlagsMacro {} {
	return CC_SDA_FLAGS
    }
}

namespace eval ::tc_PPCE6500diab::tool_cxx {

    proc type {} {
	return "C++ compiler"
    }

    proc inputSuffixes {} {
	return ".cxx .cpp .cc .CPP"
    }

    proc outputFiles {inFile} {
	return [file rootname [file tail $inFile]].o
    }

    proc buildCmds {flags file} {
	return [list "\$(CXX) $flags -c $file"]
    }

    proc toolMacro {} {
	return CXX
    }

    proc flagsMacro {} {
	return C++FLAGS
    }

    proc sdFlagsMacro {} {
	return CC_SDA_FLAGS
    }
}

namespace eval ::tc_PPCE6500diab::tool_as {

    proc type {} {
	return assembler
    }

    proc inputSuffixes {} {
	return ".s"
    }

    proc outputFiles {inFile} {
	return [file rootname [file tail $inFile]].o
    }

    proc buildCmds {flags file} {
	set tc [namespace parent]
	if {[${tc}::asmHasCpp]} {
	    return [list "\$(CC) $flags -c $file -o [outputFiles $file]"]
	}
	global tcInfo_[${tc}::name]
	regsub -all -- " -MD" $flags "" cppFlags
	set tmpFile [file rootname $file]_tmp.s
	return [list "\$(CPP) $cppFlags $file > ${tmpFile}" "\$(CC) $flags -c ${tmpFile} -o [outputFiles $file]" "\$(RM) ${tmpFile}"]
    }

    proc toolMacro {} {
	return CC
    }

    proc flagsMacro {} {
	return CFLAGS_AS
    }
    proc sdFlagsMacro {} {
	return 
    }
}

namespace eval ::tc_PPCE6500diab::tool_ld {

    proc type {} {
	return "linker"
    }

    proc inputSuffixes {} {
	return ""
    }

    proc outputFiles {inFile} {
	return [file rootname [file tail $inFile]].o
    }

    proc buildCmds {flags file} {
	return [list "${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/dld $flags -c $file"]
    }

    proc toolMacro {} {
	return LD
    }

    proc flagsMacro {} {
	return LDFLAGS
    }
}

namespace eval ::tc_PPCE6500diab {

    proc type {} {
	return C++
    }

    proc tool {} {
	return diab
    }

    proc family {} {
	return diab
    }

    proc cpu {} {
	return PPCE6500
    }

    proc archDir {} {
	return ppc
    }

    proc name {} {
	return PPCE6500diab
    }

    proc toolListGet {} {
	return [namespace children [namespace current] tool_*]
    }

    proc toolFindByFile {file} {
	foreach tool [toolListGet] {
	    if {[lsearch [${tool}::inputSuffixes] [file extension $file]] != -1} {
		return $tool
	    }
	}
	prjWarnLog "no tool works on file $file"
	return ""
    }

    proc toolFindByType {type} {
	foreach tool [toolListGet] {
	    if {[${tool}::type] == $type} {
		return $tool
	    }
	}
	prjWarnLog "no tool of type $type"
	return ""
    }

    proc dependFiles {tool flags file} {
	regsub -all -- " -MD" $flags "" cppFlags
	if {[catch {set bUseQuickScan [::Dependencies::UseQuickScan?]}] || !$bUseQuickScan || [catch {set result [DependencyAnalyzer::GenerateDependenciesFromFile $cppFlags $file]}]} {
	    set result [oldDependFiles $tool $flags $file]
	}
	return $result
    }

    proc oldDependFiles {tool flags file} {

	global tcInfo_[name]

	regsub -all -- " -MD" $flags "" cppFlags
	set errorFile [tempFileGet]
	if {[catch {eval exec ${tcWIND_HOME}/compilers/diab-5.9.6.5${tct1}/dcc -E -Xmake-dependency -w $cppFlags $file 2>  [filenameQuoteIfNecessary $errorFile]} depend]} {
	    set fd [open $errorFile r]
	    set dependError [read $fd]
	    close $fd
	    error "dependency generation failed: $dependError"
	}
	file delete $errorFile
	regsub -all { \\} $depend {} depend
	regsub -all {\\} $depend {\/} depend
	return [lrange $depend 2 end]
    }

    proc macroListGet {} {
	global tcInfo_[name]
	return [array names tcInfo_[name]]
    }

    proc macroDefaultValGet {macro} {
	global tcInfo_[name]
	return [set tcInfo_[name]($macro)]
    }

    proc commSymLink {} {
	switch -glob [archDir] {
	    mc68k {return symbol}
	    default {return module}
	}
    }

    proc defaultWtxDownloadFlags {strFilename} {
	set bufNmOutput {}
	regsub -- -g [macroDefaultValGet NM] {} strCmd
	set bFailed [catch {set bufNmOutput "\n[eval exec $strCmd $strFilename ]" } ]
	if {$bFailed || [regexp "\n0+\[ \t]+\[A-Za-z]\[ \t]+___gnu_compiled_cplusplus" $bufNmOutput] } {
	    return {LOAD_GLOBAL_SYMBOLS|LOAD_COMMON_MATCH_ALL}
	} else {
	    return {LOAD_GLOBAL_SYMBOLS|LOAD_COMMON_MATCH_NONE}
	}
    }

    proc asmHasCpp {} {
	return 1
    }

    proc endian {} {
	return big
    }

    proc fp {} {
	return hard
    }

    proc dm {} {
	return [list ILP32 LP64 ]
    }

    proc default_VSB {} {
	return ppc/PPCE6500
    }

}

if {[info commands prjTcAdd] == "prjTcAdd"} {
    prjTcAdd ::tc_PPCE6500diab
}
