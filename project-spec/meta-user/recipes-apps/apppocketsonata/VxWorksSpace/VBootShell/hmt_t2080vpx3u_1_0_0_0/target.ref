\" fsl_t2t4/target.ref - Freescale T2/T4 target specific documentation
\"
\" Copyright (c) 2014-2017 Wind River Systems, Inc.
\"
\" The right to copy, distribute, modify or otherwise make use
\" of this software may be licensed only pursuant to the terms
\" of an applicable Wind River license agreement.
\"
\" modification history
\" --------------------
\" 26dec17,ffu  fix USB support information (V7CON-568)
\" 06dec17,ffu  fix incorrect SPI flash information (V7STO-991)
\" 25oct17,j_x  modify the description of eMMC and SATA
\" 11jul17,syt  updated on how to update RCW.(V7PRO-3817)
\" 23may17,syt  corrected spelling mistakes and description error about VxBL.(V7PRO-3777)  
\" 22feb17,syt  removed the unsupported feature description of RTC alarm.(V7PRO-3593) 
\" 13jan17,syt  corrected some typos in target.ref.(V7PRO-3435)
\" 29dec16,syt  add description about flash partitions for VxBL.(V7PRO-3371)
\" 29nov16,y_y  add T4240 SD/MMC support (V7STO-750)
\" 29nov16,ffu  add LP64 support in TFFS layer (F4496)
\" 26dec16,syt  updated description about I2C RTC. (US74075)
\" 12dec16,yjl  added SATA driver support on PPC64 model (V7STO-749)
\" 24nov16,syt  added a Known Problems section: SATA driver does not work on PPC64 model.
\" 28sep16,syt  updated the DTS memory node example for T4240QDS.(V7PRO-3328)
\" 02sep16,x_w  fix vsb configuration issue for SD/MMC support.(V7STO-690)
\" 25aug16,l_z  fix the t2080 board reversion. (V7PRO-3224)
\" 08sep16,syt  add T2080RDB support (US85017).
\" 06jun16,y_y  update DMA section.
\" 31mar16,zly  add eSDHC support for SD/MMC card and eMMC chip on t2080qds(F6541)
\" 27apr16,wap  Correct SW4 settings for T2080QDS board to set the SERDES
\"              clock correctly for 10G ports
\" 28mar16,wap  Update some component names
\" 18mar16,wap  Add support for both SGMII riser cards (F1921)
\" 16mar16,wap  Add support for 10 gigabit interfaces on T4240 QDS and
\"              T2080 QDS board, and SGMII interfaces on the T4240 QDS
\"              board (F1921)
\" 07mar16,fao  add reconfiguring the DDR Register for vxbl.(V7PRO-2687)
\" 09jul15,y_y  fix pcie multi-func device could hang issue.(V7PRO-2231)
\" 30jun15,hcl  remove memory node in DTS file.(F2518)
\" 06feb15,m_y  add sata support (US49951) 
\" 23jan15,syt  updated vsb/vip info for LP64 build and BOOTAPP support (F2518) 
\" 28dec14,j_x  add USB TCD support (US48635)
\" 26dec14,fao  add VxBL section. (US: 48637)
\" 14jan15,d_l  fix apigen warning by removing NAME section
\" 23dec14,jzl  update vsb/vip info for USB(V7CON-84)
\" 25sep14,syt  corrected errors (V7PRO-1240).
\" 25jun14,x_z  added SMP support and memory map. (US40508).
\" 23jun14,x_z  added support for T4240QDS I2C/DMA and fixed document issues. 
\"              (US40508).
\" 13jun14,syt  add T4240QDS support (US15742).
\" 13may14,syt  add Clock Generator support (V7PRO-885).
\" 10may14,ylu  added SMT (multi-threading) support to BSP for 
\"              PPCE6500.(US34958)
\" 16apr14,ljg  added USB EHCI support.(US35669)
\" 10apr14,ylu  added support for SMP.(US34480)
\" 10apr14,ylu  added SMP section.
\" 29mar14,ylu  added the Memory Maps, I2C and DMA sections.
\" 29mar14,b_m  fixed the u-boot programming section.
\" 21mar14,b_m  updated using new target.ref template.
\" 05mar14,ylu  created.
\"
\TITLE fsl_t2t4 - Freescale T2/T4

EXTERNAL DEPENDENCIES
None

INTRODUCTION

This section includes getting-started information, including subsections
detailing ROM installation, boot ROM instructions, and jumper settings
for VxWorks operation.

\sh Supported Boards

The current release of this BSP only supports below boards:

\cs
Freescale T2080RDB-PC
Freescale T2080QDS
Freescale T4240QDS
\ce

\sh Jumpers & Switches

Default Switch Settings:
For Freescale T2080RDB-PC
\ts
Switch Number | Switch ON       | Switch OFF
--------------------------------------------
SW1           | 1,2,3,5,6       | 4,7,8
SW2           | 2               | 1,3,4,5,6,7,8
SW3           | 4,5,6,7         | 1,2,3,8
\te

For Freescale T2080QDS
\ts
Switch Number | Switch ON       | Switch OFF
--------------------------------------------
SW1           | 4,7,8           | 1,2,3,5,6
SW2           | 1,2,3,4,5,6,7   | 8
SW3           | 5,6,7           | 1,2,3,4,8
SW4           | 1,3,4,5,6,7,8   | 2
SW5           | 1,5,6,7,8       | 2,3,4
SW6           | 2,4,5,6,7,8     | 1,3
SW7           | 2,3,6,7         | 1,4,5,8
SW8           | 4,6,7           | 1,2,3,5,8
SW9           | 2,3,5,7         | 1,4,6,8
SW10          | 1,2,3,4         | 5,6,7,8
SW11          | 1,2,3,4,5,6     | 7,8
SW12          | 1,2,3,4,5,6,7,8 |
\te

For Freescale T4240QDS
\ts
Switch Number | Switch ON       | Switch OFF
-------------------------------------------------
SW1           | 4,6,7,8         | 1,2,3,5
SW2           | 1,2,3,4,5,6,7   | 8
SW3           |                 | 1,2,3,4,5,6,7,8
SW4           | 2,4             | 1,3,5,6,7,8
SW5           | 1,2,3,7         | 4,5,6,8
SW6           | 5,6,7,8         | 1,2,3,4
SW7           | 1,2,3,5,7       | 4,6,8
SW8           | 1,2,4,5,6       | 3,7,8
SW9           | 1,2,3           | 4,5,6,7,8
\te

\sh Getting the board running VxWorks
This section will guide you how to run VxWorks on the Freescale T2/T4 board.

1. Creating VxWorks image

    1.1 Create and config a VSB (VxWorks Source Build)

    A VSB must be created before a VIP could be used, and it could be created
    based on the BSP: fsl_t2t4 or CPU: PPCE6500.

        1.1.1 Create a VSB

        In the step of "Project Setup" in WorkBench, select
        fsl_t2t4 BSP or PPCE6500 CPU.

        Or just use one of the following commands in the VxWorks 7 Development
        Shell:

\cs
        vxprj vsb create -bsp fsl_t2t4 -S ~/myVsb
        vxprj vsb create -cpu PPCE6500 -S ~/myVsb
\ce

        The VxWorks 7 is also supported on 64-bit PowerPC Architecture
        (such as e6500 core). If you want to create a VSB supporting the 64-bit
        architecture, -lp64 option should added, the VSB creating commands
        should be as the following:

 \cs
        vxprj vsb create -bsp fsl_t2t4 -lp64 -S ~/myVsb
        vxprj vsb create -cpu PPCE6500 -lp64 -S ~/myVsb
 \ce

        1.1.2 Configure the VSB

            1.1.2.1 Configure the required layers

            For CPU based VSB, the following layers need to be enabled in the
            Source Build Configuration Editor of WorkBench:

\cs
            FDT
            BOARDLIB
            FSL_QORIQ
\ce

            Or just use below command to add all the layers needed:

\cs
            vxprj vsb add FSL_QORIQ
\ce

            1.1.2.2 Configure the device tree blob (DTB) loading method

            The VxWorks 7 PPC BSP uses device tree nodes to describe device
            specific information, and there are two methods to load the device
            tree blob:
                - Embedded:     the device tree blob is embedded in the VxWorks
                                image.
                - Independent:  an independent file is created for the device
                                tree blob. And the independent method is used
                                by default.

            To use the embedded method, use below command in the VSB directory:

\cs
            vxprj vsb config -s -add _WRS_CONFIG_STANDALONE_DTB=y
\ce

        1.1.3 Build the VSB

        Build the VSB in the WorkBench or use below command in the
        VxWorks 7 Development Shell:

\cs
        vxprj build
\ce

    1.2 Create a VIP based on the new VSB

    Please note: Both WorkBench and the VxWorks 7 Development Shell can
    be used for VIP creating and configuring. All below sections will only
    use the VxWorks 7 Development Shell command as an example, and the
    corresponding operation in WorkBench is quite straight forward.

        1.2.1 Create a VIP based on the new VSB

        In the same directory of the new VSB, use below command to create a VIP:

\cs
        vxprj vip create -vsb myVsb fsl_t2t4 diab myVip
\ce

        1.2.2 Configure and build the VIP

            1.2.2.1 Configure the device tree blob (DTB) source

            If the embedded method is configured in the VSB, DTB source file
            must be selected correctly. By default INCLUDE_T2080QDS_DTB
            component is enabled for T2080QDS board booting from U-Boot.

            If the embedded method is used, the memory node need to be added in
            the DTS file. For example:

            For T2080RDB-PC, 4G RAM:
            memory {
                device_type = "memory";
                reg = <0x0 0x00000000 0x1 0x00000000>;
            };			
			
			For T2080QDS, 4G RAM:
            memory {
                device_type = "memory";
                reg = <0x0 0x00000000 0x1 0x00000000>;
            };
            
            For T4240QDS, 6G RAM:
            memory {
                device_type = "memory";
                reg = <0x0 0x00000000 0x1 0x00000000 0x1 0x00000000 0x0 0x80000000>;
                };

            If the embedded method VxWorks image is needed to be booted with vxbl, the memory node should be
            configured likes:

            memory {
                device_type = "memory";
                reg = <0x0 0x00000000 0x1 0x00000000 0x1 0x00000000 0x0 0x80000000 0x2 0x00000000 0x0 0x80000000>;
                };

            Note : The start address for each physical memory bank must
            be aligned with the required TLB page size required by ARCH, and the
            kernel image must be in the first physical memory bank. 

            1.2.2.2 Configure the booting method and image type

            This BSP supports booting from U-Boot (v2014.01 release and later).

            The U-Boot can boot up two kinds of VxWorks images: uVxWorks and raw
            bin file vxWorks.bin. The uVxWorks is used for U-Boot "bootm"
            command, and needs an independent DTB file. The vxWorks.bin is used
            for U-Boot "go" command and needs embedded DTB.

            Use one of the below commands to create different VxWorks image:

\cs
            vxprj build uVxWorks
            vxprj build vxWorks.bin
            vxprj build vxWorks
\ce

            After building passed, the related independent DTB files
            (with .dtb suffix) are also created in the "default" subdirectory
            of the VIP.

2. Running VxWorks on U-Boot

    2.1 Updating the U-Boot image

    The pre-flashed U-Boot images supplied by the vendor maybe couldn't be used to
    boot up the VxWorks image (v2014.01 release before). And the Wind River supplied
    U-Boot images can be found under the "_bootloader" subdirectory of the BSP.

    Follow the instructions below to program the U-Boot on to the board.

        2.1.1 Set the Boot Flash Switch to the alternate bank

        For T2080QDS and T4240QDS:
\cs
            SW#6[1,2,3,4] = [OFF,ON,OFF,OFF]
\ce
        For T2080RDB
\cs
            SW#3[4,5,6,7] = [ON,OFF,ON,ON] 
\ce

        2.1.2 Start a TFTP server

        Open a TFTP server on your host. Make sure the root directory is
        the _bootloader sub-directory under BSP directory which contains the
        Wind River supplied U-Boot image.

        2.1.3 Make sure your host serial port's configuration is:

        Baud Rate: 115200
        Data: 8 bit
        Parity: None
        Stop: 1 bit
        Flow Control: None

        2.1.4 Confirm if on-board ethernet port can be used

        Power up the board, until you see the U-Boot shell prompt, and check the
        RCW[EC1] and RCW[EC2] fields. These fields configure the functionality
        assigned to the EC1/EC2 parallel mode pins. If the values of the two
        fields indicate that the two on-board RGMII interfaces are disabled, in
        order to use the on-board ethernet port, RCW needs to be replaced with a
        new one in the _bootloader directory.

        For instructions on how to replace the RCW, please check the RCW chapter
        below.

        2.1.5 Configure the U-Boot environment

        Type the following commands to setup the U-Boot environment.

\cs
        setenv ethaddr 00:04:9f:ef:01:01    # 6 byte Ethernet addresses for eth0
        setenv eth1addr 00:04:9f:ef:01:02   # 6 byte Ethernet addresses for eth1
        setenv eth2addr 00:04:9f:ef:01:03   # 6 byte Ethernet addresses for eth1
        setenv ipaddr 192.168.0.3           # target IP address
        setenv netmask 255.255.255.0        # netmask
        setenv serverip 192.168.0.2         # host IP address
        setenv gatewayip 192.168.0.1        # gateway IP address
        saveenv
\ce

        Note: This is just an example, you must change the network parameters
        according to your actual situation.

        2.1.6 Program the FMAN ucode to the primary bank

        Type the following commands in the U-Boot shell.

        For T2080QDS and T4240QDS:
\cs
            protect off ebf00000 +40000
            erase ebf00000 +40000
            cp.b eff40000 ebf00000 40000
\ce
        For T2080RDB-PC:
\cs
            protect off ebf00000 +20000
            erase ebf00000 +20000
            cp.b eff00000 ebf00000 20000
\ce

        2.1.7 Program the provided U-Boot to the primary bank

        Type the following commands in the U-Boot shell.

        For T2080RDB-PC, T2080QDS and T4240QDS:
\cs
            tftp 1000000 u-boot_<boardname>.bin
            protect off ebf40000 +c0000
            erase ebf40000 +c0000
            cp.b 1000000 ebf40000 c0000
\ce
        Note: the <boardname> could be t2080qds or t4240qds.

        2.1.8 Update RCW in the primary bank

        Type the following commands in the U-Boot shell.
    
        1)  Load the RCW file
            for T4240QDS,
            => tftp 1000000 T4240QDS_RR_XXSSPRPH_1_28_6_12_1666MHz_rev2.bin
            for T2080QDS,
            => tftp 1000000 T2080QDS_RR_PNNPPH_66_16_1533MHz.bin
            for T2080RDB,
            => tftp 1000000 T2080RDB_RRFFXXP_66_15_1800MHz.bin

        2)  Program new RCW to NOR flash:
            => protect off ec000000 +20000
            => erase ec000000 +120
            => cp.b 1000000 ec000000 $filesize

        2.1.9 Reset the Boot Flash Switch to the primary bank

        For T2080QDS and T4240QDS:
\cs
            SW#6[1,2,3,4] = [OFF,OFF,OFF,OFF]
\ce
        For T2080RDB-PC
\cs
            SW#3[4,5,6,7] = [ON,ON,ON,ON]
\ce

        Power off the board and then power on, the programmed U-Boot should be
        up and running.

        2.1.9 Update RCW in the primary bank

        Pre-flashed RCW in the primary bank should be replaced with provided RCW
        in the _bootloader directory.

        For instructions on how to replace the RCW, please check the RCW chapter
        below.

    2.2 Downloading the VxWorks image

        2.2.1 Start a TFTP server

        Open a TFTP server on your host. Make sure the root directory is your
        project directory of the VIP which contains the VxWorks image.

        2.2.2 Configure the U-Boot environment

        When board boots up, the U-Boot will prompt you to enter U-Boot shell,
        press any key then to get into U-Boot shell before count down finished.
        Type the following commands to setup the U-Boot environment.

\cs
        setenv ipaddr 192.168.0.3
        setenv netmask 255.255.255.0
        setenv serverip 192.168.0.2
        setenv gatewayip 192.168.0.1
        saveenv
\ce

        And then type the following command to update the VxWorks Bootline:

\cs
        setenv bootargs 'memac(0,0)host:vxWorks h=192.168.0.2
                e=192.168.0.3:fffffe00 g=192.168.0.1 u=target pw=vxTarget f=0x0'
        saveenv
\ce

        Note:
        1)  This is just an example, you must change the network parameters
            according to your actual situation.

        2)  Wrong setting of the "bootargs" parameter may cause the network
            failed to work. And if you do not want to set the "bootargs" in
            U-Boot, use below command to delete the parameter in U-Boot will
            make VxWorks using the default setting in the BSP's device tree
            file.

\cs
        setenv bootargs
        saveenv
\ce

        2.2.3 Download and run the uVxWorks image for U-Boot

            2.2.3.1 Download uVxWorks image for U-Boot

            The uVxWorks image is used along with an independent DTB file, and
            the downloading address must not destroy the spaces used by VxWorks.
            Below is an example for this BSP:

            In the U-Boot shell, type the following command to download uVxWorks:

\cs
            tftp 0x2000000 uVxWorks
\ce

            type the following command to download DTB:

\cs
            tftp 0xf000000 $DTB_FILE
\ce

            Note: the DTB_FILE varies for different boards as below:

\ts
Board                 | DTB_FILE
------------------------------------
Freescale T2080QDS    | t2080qds.dtb
Freescale T2080RDB-PC | t2080rdb.dtb
Freescale T4240QDS    | t4240qds.dtb
\te

            2.2.3.2. Running the uVxWorks image on U-Boot

            Use "bootm <image address> - <DTB address>" command to load and run
            uVxWorks image as below:

\cs
            bootm 0x2000000 - 0xf000000
\ce

        2.2.4 Download and run the vxWorks.bin image for U-Boot

            2.2.4.1 Download vxWorks.bin image for U-Boot

            The vxWorks.bin image is used for U-Boot "go" command, so the
            downloading address must be the same as "RAM_LOW_ADRS".
            For this BSP, it's 0x100000. Also, it is used along with the
            embedded DTB mode.

            Use below command to download the vxWorks.bin image for U-Boot:

\cs
            tftp 0x100000 vxWorks.bin
\ce

            2.2.4.2. Running the vxWorks.bin image on U-Boot

            Use "go <image running address>" to run the vxWorks.bin image as below:

\cs
            go 0x100000
\ce

3. Running VxWorks with BOOTAPP

    BOOTAPP is a RAM-based, intermediate type VxWorks bootloader using full
    network libraries; it is booted by u-boot, load and boot VxWorks image
    with embedded DTB. The BOOTAPP can be configured and built with
    the command-line project tool vxprj or Wind River Workbench.

    The below sections will only use the VxWorks 7 Development Shell command
    as an example, and the corresponding operation in WorkBench is quite
    straight forward.

    3.1 Create a VSB.

        Please reference the section 1.1

    3.2 Configure and build the VIP

\cs
        vxprj create -force fsl_t2t4 diab -vsb myVsb myVipBootapp -profile PROFILE_BOOTAPP
        cd myVipBootapp
        vxprj build uVxWorks
\ce

    3.3 Configure the U-Boot environment

        Same as the section 2.2.2, the bootargs will be passed to BOOTAPPP as
        the VxWorks bootline parameters by u-boot.

    3.4 Download and run the BOOTAPP profile VxWorks image for U-Boot

        Same as the section 2.2.3.

    3.5 Boot VxWorks image

        The procedure of VxWorks 7 BOOTAPP loading and booting VxWorks image
        is same as the VxWorks 6.x did.

4. Running VxWorks on VxBL (VxWorks Boot Loader)

    NOTE: Currently VxBL only supports T4240QDS/T2080QDS board.

    VxBL is a newly developed bootloader designed to work with VxWorks 7
    kernels and replace the legacy bootrom. 

    The on board Nor Flash device is SPANSION's S29GL01GP, 16MB capacity of it
    is used for VxBL's simple flash file system. The 16MB space is divided into
    four partitions. The uVxWorks partition size is configurable, its default value
    is 0x800000, but the max size could not be exceeded 0xc00000.
    The following table is the flash partitions map,

\ts
+--------------------+  0x000000
|                    |
| uVxWorks partition |
+--------------------+  0x800000
|                    |
+--------------------+  0xc00000
| DTB      partition |
+--------------------+  0xd00000
| NVRAM    partition |
+--------------------+  0xe00000
| vxboot   partition |
+--------------------+  0xffffff
\te

    This section describes how to use VxBL to load and run VxWorks 7 kernels.

    4.1 Creating VxBL project for T4240QDS/T2080QDS

    NOTE: 1. Instructions here MUST be executed under VxWorks development shell
          2. VXBL would select T4240QDS as default board. To enable T2080QDS, user need modify 
             $(WIND_BASE)/pkgs/os/board/ppc/fsl_t2t4/_bootloader/vxbl/vxbl.vxconfig file,
             change the default "BOARD_TYPE" to T2080QDS. 
\cs
        cd $(WIND_BASE)/pkgs/boot/vxbl
        make project CPU=PPCE6500 BSP=fsl_t2t4 TOOL=gnu FORCE=1 OUTPUT=<your_project_directory> 
        cd <your_project_directory>
        make
\ce

        The final bootloader image located at: <your_project_directory>/vxboot.bin

    4.2 Burning VxBL and VxWorks images to NOR flash

        Burning VxBL and VxWorks is done by using on-board U-Boot.

        Follow the instructions below to program the VXBL on to the board.

        Set the Boot Flash Switch to the alternate bank

        For T4240QDS/T2080QDS:
\cs
            SW#6[1,2,3,4]=  [OFF,ON,OFF,OFF]
\ce
        power-on the board and type the following commands in the U-Boot shell to burn VxBL:

\cs
        tftp 1000000 vxboot.bin
        protect off eee00000 +200000
        erase eee00000 +200000
        cp.b 1000000 eee00000 200000
\ce

        NOTE: 1) please refer to section 2.2 Downloading the VxWorks image for
              more details on how to configure TFTP server and IP address.
              2) the default size of vxboot.bin is 2MB

        Type the following commands in the U-Boot shell to burn uVxWorks:

\cs
        tftp 1000000 uVxWorks
        protect off ee000000 +$(SIZE)
        erase ee000000 +$(SIZE)
        cp.b 1000000 ee000000 $(SIZE)
\ce

        NOTE: 1) please refer to section 2.2 Downloading the VxWorks image for
              more details on how to configure TFTP server and IP address.
              2) please replace $(SIZE) the actual size of your uVxWorks

        Type the following commands in the U-Boot shell to burn DTB file:

\cs
        tftp 1000000 t4240qds.dtb
        protect off eeC00000 +$(SIZE)
        erase eeC00000 +$(SIZE)
        cp.b 1000000 eeC00000 $(SIZE)
\ce

        NOTE: 1) please refer to section 2.2 Downloading the VxWorks image for
              more details on how to configure TFTP server and IP address.
              2) please replace $(SIZE) the actual size of your DTB file

    4.3 Loading uVxWorks using VxBL

        Reset the Boot Flash Switch to the bank 5

        For T4240QDS/T2080QDS:
\cs
            SW#6[1,2,3,4] = [OFF,ON,OFF,ON]
\ce

        power-on the board, VxBL will start to run, it looks like the following:
 

            Copyright 2012-2014 Wind River Systems
            
            VxWorks fsl_t2t4 Stage 1 Bootstrap (32-bit version)
            Built on: Jan  6 2015 09:57:31
            
            mounting flash OK
            info - loader VxWorks 7 registered
            EVN: checksum invalid
            ENV: using default settings
            vxbl@ 

         Type the following commands in the VxBL shell to load VxWorks:

\cs
            load /flash/uVxWorks 0x2000000
            load /flash/t4240qds.dtb 0xf000000
            boot 0x2000000 - 0xf000000
\ce

    4.4 Reconfiguring the DDR Register 

        The VxWorks boot loader (VxBL) configures the DDR register using 
        immediate integers (see the ddrInit.c file in BSP directory). 
        This configuration method reduces the code footprint and is more easily 
        implemented compared to the SPD configuration method. However, the set
        of immediate integers for the BSP is specific to a particular DDR 
        memory module. If the DDR memory module changes and you do not update
        the DDR configuration, VxBL can hang during the DDR controller
        initialization stage. This is often seen on Freescale boards between
        different board revisions. That is, some newer revision boards can 
        change to use another DDR memory module from a different vendor. 
        This requires that you change the DDR configuration parameters in VxBL
        follow this link:
            https://knowledge.windriver.com/en-us/000_Products/000/020/000/060/010/000_VxWorks_7_VxBL_DDR_Configuration_App_Note/000
 
5. Summary

    Below is a summary about configuring and running VxWorks 7:

\ts
                | uVxWorks    | vxWorks.bin                 | vxWorks
--------------------------------------------------------------------------------
Boot Loader     | U-Boot/VxBL | U-Boot                      | BOOTAPP
DTB Mode        | independent | embedded                    | embedded 
VSB Option      | N/A         | _WRS_CONFIG_STANDALONE_DTB  | _WRS_CONFIG_STANDALONE_DTB
Component       | N/A         | INCLUDE_<boardname>_DTB     | INCLUDE_<boardname>_DTB
Boot Method     | bootm       | go                          | same as 6.9.x
\te    

    Where <boardname> could be: T2080RDB, T2080QDS or T4240QDS.

DEVICE TREE
This BSP uses device tree nodes to describe the device specific information
on the board. The supported drivers will get configuration data from
the device tree source files (with suffix .dts) under the BSP directory.
For the structure of the device tree source file, please refer to the
ePAPR specification here:
http://www.power.org/technology-introduction/standards-specifications/

The supported boards and the corresponding device tree source files of this BSP
are mapped as below:

\ts
Board                 | Device Tree Source    | Bootloader
-------------------------------------------------------------
Freescale T2080RDB-PC | t2080rdb.dts          | U-Boot
Freescale T2080QDS    | t2080qds.dts          | U-Boot/VxBL
Freescale T4240QDS    | t4240qds.dts          | U-Boot/VxBL

\te

FEATURES

This section describes all features of the board, supported or not.
It documents all configurations of the board and the interaction between
features and configuration items.

\sh List of hardware Features (Freescale T2080RDB-PC)

\ts
Hardware Interface  | Controller    | Driver/Component       | Status
-------------------------------------------------------------------------
UART:0              | on-chip       | DRV_SIO_FDT_NS16550    | SUPPORTED
UART:1              | on-chip       | DRV_SIO_FDT_NS16550    | SUPPORTED
1GB-ETHERNET:0      | on-chip       | DRV_VXBEND_QORIQMEMAC  | SUPPORTED
1GB-ETHERNET:1      | on-chip       | DRV_VXBEND_QORIQMEMAC  | SUPPORTED
10GB-ETHERNET:2     | on-chip       | -                      | UNSUPPORTED
10GB-ETHERNET:3     | on-chip       | -                      | UNSUPPORTED
10GB-ETHERNET:4     | on-chip       | -                      | UNSUPPORTED
10GB-ETHERNET:5     | on-chip       | -                      | UNSUPPORTED
NOR-FLASH           | JS28F00AM29E  | -                      | UNSUPPORTED
NAND-FLASH          | MT29F8G       | -                      | UNSUPPORTED
BOOKE-TIMER         | on-chip       | DRV_TIMER_FSL_BOOKE    | SUPPORTED
CLOCK-GENERATOR     | on-chip       | DRV_QORIQ_CLK          | SUPPORTED
MPIC-TIMER:0        | on-chip       | DRV_TIMER_OPENPIC      | SUPPORTED
MPIC-TIMER:1        | on-chip       | DRV_TIMER_OPENPIC      | SUPPORTED
PCI-E-SLAVE:0       | on-chip       | -                      | UNSUPPORTED
PCI-E-HOST:1        | on-chip       | -                      | UNSUPPORTED
PCI-E-HOST:2        | on-chip       | -                      | UNAVAILABLE
PCI-E-HOST:3        | on-chip       | DRV_FSL_PCI            | SUPPORTED
DMA:0               | on-chip       | DRV_FSL_DMA            | SUPPORTED
DMA:1               | on-chip       | DRV_FSL_DMA            | SUPPORTED
DMA:2               | on-chip       | DRV_FSL_DMA            | SUPPORTED
I2C:0               | on-chip       | DRV_FSL_I2C            | SUPPORTED
I2C:1               | on-chip       | DRV_FSL_I2C            | SUPPORTED
I2C:2               | on-chip       | DRV_FSL_I2C            | UNAVAILABLE
I2C:3               | on-chip       | DRV_FSL_I2C            | UNAVAILABLE
I2C-MUX             | PCA9546       | DRV_I2C_PCA954X        | SUPPORTED
RTC                 | DS1339        | DRV_I2C_RTC            | SUPPORTED
EEPROM              | AT24Cxxx      | DRV_I2C_EEPROM         | UNSUPPORTED
THERMAL SENSOR      | ATD7481       | -                      | UNSUPPORTED
PCIE_CLOCK          | 9FGV0641      | -                      | UNSUPPORTED
SPI                 | on-chip       | DRV_FSL_ESPI           | SUPPORTED
SPI-FLASH:0         | N25Q512A      | -                      | UNSUPPORTED
GPIO                | on-chip       | -                      | UNSUPPORTED
USB-HOST:1          | on-chip       | EHCI_INIT              | SUPPORTED
USB-HOST:2          | on-chip       | EHCI_INIT              | SUPPORTED
SD/eMMC             | on-chip       | DRV_FSL_SDHC_CTRL      | SUPPORTED
SATA:0              | on-chip       | FDT_DRV_STORAGE_FSLSATA| SUPPORTED
SATA:1              | on-chip       | FDT_DRV_STORAGE_FSLSATA| SUPPORTED
ENCRYPTION          | on-chip       | -                      | UNSUPPORTED
\te

\sh List of hardware Features (Freescale T2080QDS)

\ts
Hardware Interface  | Controller    | Driver/Component      | Status
-------------------------------------------------------------------------
UART:0              | on-chip       | DRV_SIO_FDT_NS16550   | SUPPORTED
UART:1              | on-chip       | DRV_SIO_FDT_NS16550   | SUPPORTED
10GB-ETHERNET:0     | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
10GB-ETHERNET:1     | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
1GB-ETHERNET:2      | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
1GB-ETHERNET:3      | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
1GB-ETHERNET:4      | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
1GB-ETHERNET:5      | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
10GB-ETHERNET:0     | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
10GB-ETHERNET:1     | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
NOR-FLASH           | S29GL01GP     | -                     | UNSUPPORTED
NAND-FLASH          | MT29F4G       | -                     | UNSUPPORTED
BOOKE-TIMER         | on-chip       | DRV_TIMER_FSL_BOOKE   | SUPPORTED
CLOCK-GENERATOR     | on-chip       | DRV_QORIQ_CLK         | SUPPORTED
MPIC-TIMER:0        | on-chip       | DRV_TIMER_OPENPIC     | SUPPORTED
MPIC-TIMER:1        | on-chip       | DRV_TIMER_OPENPIC     | SUPPORTED
PCI-E-HOST:0        | on-chip       | DRV_FSL_PCI           | SUPPORTED
PCI-E-HOST:1        | on-chip       | DRV_FSL_PCI           | SUPPORTED
PCI-E-HOST:2        | on-chip       | DRV_FSL_PCI           | SUPPORTED
PCI-E-HOST:3        | on-chip       | DRV_FSL_PCI           | SUPPORTED
DMA:0               | on-chip       | DRV_FSL_DMA           | SUPPORTED
DMA:1               | on-chip       | DRV_FSL_DMA           | SUPPORTED
DMA:2               | on-chip       | DRV_FSL_DMA           | SUPPORTED
I2C:0               | on-chip       | DRV_FSL_I2C           | SUPPORTED
I2C:1               | on-chip       | DRV_FSL_I2C           | UNSUPPORTED
I2C:2               | on-chip       | DRV_FSL_I2C           | UNSUPPORTED
I2C:3               | on-chip       | DRV_FSL_I2C           | UNSUPPORTED
RTC                 | DS3232        | DRV_I2C_RTC           | SUPPORTED
EEPROM              | AT24Cxxx      | DRV_I2C_EEPROM        | UNSUPPORTED
SPI                 | on-chip       | DRV_FSL_ESPI          | SUPPORTED
SPI-FLASH:0         | N25Q128A      | -                     | UNSUPPORTED
SPI-FLASH:1         | SST25WF040    | -                     | UNSUPPORTED
SPI-FLASH:2         | EN25S64       | -                     | UNSUPPORTED
GPIO                | on-chip       | -                     | UNSUPPORTED
USB-HOST:1          | on-chip       | EHCI_INIT             | SUPPORTED
USB-HOST:2          | on-chip       | EHCI_INIT             | SUPPORTED
USB-TARGET          | on-chip       | FSL_TCD_INIT          | SUPPORTED
SD/eMMC             | on-chip       | DRV_FSL_SDHC_CTRL     | SUPPORTED
SATA:0              | on-chip       | FDT_DRV_STORAGE_FSLSATA| SUPPORTED
SATA:1              | on-chip       | FDT_DRV_STORAGE_FSLSATA| SUPPORTED
ENCRYPTION          | on-chip       | -                     | UNSUPPORTED
\te

\sh List of hardware Features (Freescale T4240QDS)

\ts
Hardware Interface      | Controller    | Driver/Component      | Status
-----------------------------------------------------------------------------
UART:0                  | on-chip       | DRV_SIO_FDT_NS16550   | SUPPORTED
UART:1                  | on-chip       | DRV_SIO_FDT_NS16550   | SUPPORTED
FMAN0 1GB-ETHERNET:0    | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
FMAN0 1GB-ETHERNET:1    | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
FMAN0 1GB-ETHERNET:2    | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
FMAN0 1GB-ETHERNET:3    | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
FMAN0 1GB-ETHERNET:4    | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN0 1GB-ETHERNET:5    | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
FMAN0 10GB-ETHERNET:0   | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN0 10GB-ETHERNET:1   | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN1 1GB-ETHERNET:0    | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN1 1GB-ETHERNET:1    | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN1 1GB-ETHERNET:2    | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN1 1GB-ETHERNET:3    | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN1 1GB-ETHERNET:4    | on-chip       | DRV_VXBEND_QORIQMEMAC | SUPPORTED
FMAN1 1GB-ETHERNET:5    | on-chip       | DRV_VXBEND_QORIQMEMAC | UNVALIDATED
FMAN1 10GB-ETHERNET:0   | on-chip       |                       | UNSUPPORTED
FMAN1 10GB-ETHERNET:1   | on-chip       |                       | UNSUPPORTED
NOR-FLASH               | S29GL128P     | DRV_VXB_NORFLASH      | SUPPORTED
NAND-FLASH              | MT29F4G08A    | -                     | UNSUPPORTED
BOOKE-TIMER             | on-chip       | DRV_TIMER_FSL_BOOKE   | SUPPORTED
CLOCK-GENERATOR         | on-chip       | DRV_QORIQ_CLK         | SUPPORTED
MPIC-TIMER              | on-chip       | DRV_TIMER_OPENPIC     | SUPPORTED
PCI-E-HOST:0            | on-chip       | DRV_FSL_PCI           | SUPPORTED
PCI-E-HOST:1            | on-chip       | DRV_FSL_PCI           | UNVALIDATED
PCI-E-HOST:2            | on-chip       | DRV_FSL_PCI           | SUPPORTED
PCI-E-HOST:3            | on-chip       | DRV_FSL_PCI           | UNVALIDATED
DMA:0                   | on-chip       | DRV_FSL_DMA           | SUPPORTED
DMA:1                   | on-chip       | DRV_FSL_DMA           | SUPPORTED
I2C:0                   | on-chip       | DRV_FSL_I2C           | SUPPORTED
I2C:1                   | on-chip       | DRV_FSL_I2C           | UNVALIDATED
I2C:2                   | on-chip       | DRV_FSL_I2C           | UNVALIDATED
I2C:3                   | on-chip       | DRV_FSL_I2C           | UNVALIDATED
I2C-MUX:0               | PCA9547       | DRV_I2C_PCA954X       | UNVALIDATED
I2C-MUX:1               | PCA9547       | DRV_I2C_PCA954X       | UNVALIDATED
RTC                     | DS3232        | DRV_I2C_RTC           | SUPPORTED
EEPROM                  | AT24Cxxx      | DRV_I2C_EEPROM        | UNVALIDATED
SPI                     | on-chip       | DRV_FSL_ESPI          | SUPPORTED
SPI-FLASH:0             | N25Q512A      | DRV_SPIFLASH_SP25     | UNVALIDATED
SPI-FLASH:1             | SST25WF040    | DRV_SPIFLASH_SP25     | SUPPORTED
SPI-FLASH:2             | EN25S64       | -                     | UNSUPPORTED
GPIO                    | on-chip       | -                     | UNSUPPORTED
USB-HOST:1              | on-chip       | -                     | UNSUPPORTED
USB-HOST:2              | on-chip       | -                     | UNSUPPORTED
USB-TARGET              | on-chip       | -                     | UNSUPPORTED
eMMC                    | on-chip       | DRV_FSL_SDHC_CTRL     | SUPPORTED
SD                      | on-chip       | DRV_FSL_SDHC_CTRL     | UNVALIDATED
SATA:0                  | on-chip       | FDT_DRV_STORAGE_FSLSATA| SUPPORTED
SATA:1                  | on-chip       | FDT_DRV_STORAGE_FSLSATA| SUPPORTED
ENCRYPTION              | on-chip       | -                     | UNSUPPORTED
\te

\sh Feature Interactions

Refer to the board vendor's documentation.

HARDWARE DETAILS

This section documents the details of the device drivers and board
hardware elements.

\sh Verified Hardware

This BSP has been verified on Freescale T2080RDB-PC, T2080QDS and T4240QDS.

\ts
         | T2080RDB Board | CPU            | Core           | CPLD
------------------------------------------------------------------
 version | Rev 01         | T2080E Rev 1.0 | E6500 Rev 2.0  | 3.0

                                 | CPU      | CCB    | DDR
---------------------------------------------------------------
Frequency Combinations Supported | 1.800GHz | 600MHz | 933.3MHz
\te

\ts
         | T2080QDS Board | CPU            | Core
----------------------------------------------------------
 version | Rev A          | T2080E Rev 1.0 | E6500 Rev 2.0

                                 | CPU    | CCB    | DDR
---------------------------------------------------------
Frequency Combinations Supported | 1.5GHz | 600MHz | 1GHz
\te

\ts
         | T4240QDS Board | CPU            | Core
----------------------------------------------------------
 version | Rev B          | T4240E Rev 2.0 | E6500 Rev 2.0

                                 | CPU     | CCB      | DDR
-----------------------------------------------------------------
Frequency Combinations Supported | 1.67GHz | 733.3MHz | 466.67MHz
\te

Note: all other revisions of the same board might work with this
BSP, but it is not officially supported.

\sh Memory Maps
The default hardware memory map of the T2080RDB-PC BSP is as follows:

\ts
physical address|  Size    | End            | Access to
-----------------------------------------------------------------------
0xF_8000_0000   |  512MB   | 0xF_9FFF_FFFF  | PCIe 1 memory pool
0xF_A000_0000   |  256MB   | 0xF_AFFF_FFFF  | PCIe 2 memory pool
0xF_B000_0000   |  256MB   | 0xF_BFFF_FFFF  | PCIe 3 memory pool
0xF_C000_0000   |  256MB   | 0xF_CFFF_FFFF  | PCIe 4 memory pool
0xF_E800_0000   |  128MB   | 0xF_EFFF_FFFF  | IFC norflash memory bank
0xF_E800_0000   |  96bytes | 0xF_E800_005F  | boot rcw
0xF_EBF0_0000   |  32K     | 0xF_EBF0_7FFF  | alternate bank FMAN ucode
0xF_EBF2_0000   |  128KB   | 0xF_EBF3_FFFF  | U-Boot environment (bank 4)
0xF_EBF4_0000   |  768KB   | 0xF_EBFF_FFFF  | u-boot (bank 4)
0xF_EC00_0000   |  96bytes | 0xF_EC00_005F  | alternate bank rcw
0xF_EFF0_0000   |  32KB    | 0xF_EFF0_7FFF  | FMAN ucode
0xF_EFF2_0000   |  128KB   | 0xF_EFF3_FFFF  | U-Boot environment (bank 0)
0xF_EFF4_0000   |  768KB   | 0xF_EFFF_FFFF  | u-boot (bank 0)
0xF_FE00_0000   |  16MB    | 0xF_FEFF_FFFF  | CCSBAR
0xF_FF80_0000   |  64KB    | 0xF_FF80_FFFF  | IFC nandfLash memory bank
0xF_FFC0_0000   |  64KB    | 0xF_FFC0_FFFF  | PCIe 1 IO pool
0xF_FFC1_0000   |  64KB    | 0xF_FFC1_FFFF  | PCIe 2 IO pool
0xF_FFC2_0000   |  64KB    | 0xF_FFC2_FFFF  | PCIe 3 IO pool
0xF_FFC3_0000   |  64KB    | 0xF_FFC3_FFFF  | PCIe 4 IO pool
\te


\sh Memory Maps
The default hardware memory map of the T2080QDS BSP is as follows:

\ts
physical address|  Size    | End            | Access to
-----------------------------------------------------------------------
0xF_8000_0000   |  512MB   | 0xF_9FFF_FFFF  | PCIe 1 memory pool
0xF_A000_0000   |  256MB   | 0xF_AFFF_FFFF  | PCIe 2 memory pool
0xF_B000_0000   |  256MB   | 0xF_BFFF_FFFF  | PCIe 3 memory pool
0xF_C000_0000   |  256MB   | 0xF_CFFF_FFFF  | PCIe 4 memory pool
0xF_E800_0000   |  128MB   | 0xF_EFFF_FFFF  | IFC norflash memory bank
0xF_E800_0000   |  96bytes | 0xF_E800_005F  | boot rcw
0xF_EBF0_0000   |  32K     | 0xF_EBF0_7FFF  | alternate bank FMAN ucode
0xF_EBF4_0000   |  768KB   | 0xF_EBFF_FFFF  | u-boot (bank 4)
0xF_EC00_0000   |  96bytes | 0xF_EC00_005F  | alternate bank rcw
0xF_EFF0_0000   |  32KB    | 0xF_EFF0_7FFF  | FMAN ucode
0xF_EFF4_0000   |  768KB   | 0xF_EFFF_FFFF  | u-boot (bank 0)
0xF_FE00_0000   |  16MB    | 0xF_FEFF_FFFF  | CCSBAR
0xF_FF80_0000   |  64KB    | 0xF_FF80_FFFF  | IFC nandfLash memory bank
0xF_FFC0_0000   |  64KB    | 0xF_FFC0_FFFF  | PCIe 1 IO pool
0xF_FFC1_0000   |  64KB    | 0xF_FFC1_FFFF  | PCIe 2 IO pool
0xF_FFC2_0000   |  64KB    | 0xF_FFC2_FFFF  | PCIe 3 IO pool
0xF_FFC3_0000   |  64KB    | 0xF_FFC3_FFFF  | PCIe 4 IO pool
0xF_FFDF_0000   |  4KB     | 0xF_FFDF_0FFF  | IFC QIXIS FPGA
\te

The default hardware memory map of the T4240QDS BSP is as follows:

\ts
physical address|  Size    | End            | Access to
-----------------------------------------------------------------------
0xF_8000_0000   |  512MB   | 0xF_9FFF_FFFF  | PCIe 1 memory pool
0xF_A000_0000   |  256MB   | 0xF_AFFF_FFFF  | PCIe 2 memory pool
0xF_B000_0000   |  256MB   | 0xF_BFFF_FFFF  | PCIe 3 memory pool
0xF_C000_0000   |  256MB   | 0xF_CFFF_FFFF  | PCIe 4 memory pool
0xF_E800_0000   |  128MB   | 0xF_EFFF_FFFF  | IFC norflash memory bank
0xF_E800_0000   |  96bytes | 0xF_E800_005F  | boot rcw
0xF_EBF0_0000   |  32K     | 0xF_EBF0_7FFF  | alternate bank FMAN ucode
0xF_EBF4_0000   |  768KB   | 0xF_EBFF_FFFF  | u-boot (bank 4)
0xF_EC00_0000   |  96bytes | 0xF_EC00_005F  | alternate bank rcw
0xF_EFF0_0000   |  32KB    | 0xF_EFF0_7FFF  | FMAN ucode
0xF_EFF4_0000   |  768KB   | 0xF_EFFF_FFFF  | u-boot (bank 0)
0xF_FE00_0000   |  16MB    | 0xF_FEFF_FFFF  | CCSBAR
0xF_FF80_0000   |  64KB    | 0xF_FF80_FFFF  | IFC nandfLash memory bank
0xF_FFC0_0000   |  64KB    | 0xF_FFC0_FFFF  | PCIe 1 IO pool
0xF_FFC1_0000   |  64KB    | 0xF_FFC1_FFFF  | PCIe 2 IO pool
0xF_FFC2_0000   |  64KB    | 0xF_FFC2_FFFF  | PCIe 3 IO pool
0xF_FFC3_0000   |  64KB    | 0xF_FFC3_FFFF  | PCIe 4 IO pool
0xF_FFDF_0000   |  4KB     | 0xF_FFDF_0FFF  | IFC QIXIS FPGA
\te

The physical RAM start address is mapped to 0x0 and the physical RAM size 
is passed to VxWorks by u-boot/VxBL. 

Note that QMan/BMan memory pool could be allocated from the end of physical RAM
if the addresses for them are set to 0 in the DTS files.

\sh Reset Configuration Word (RCW)

This BSP has been verified with below RCW in the _bootloader directory:

\ts
Board                 | RCW File Name                                    | SERDES Protocol | Core Frequency
------------------------------------------------------------------------------------------------------------
Freescale T2080RDB-PC | T2080RDB_RRFFXXP_66_15_1800MHz.bin               | 0x66,0x15       | 1800MHz
Freescale T2080QDS    | T2080QDS_RR_PNNPPH_66_16_1533MHz.bin             | 0x66,0x16       | 1533MHz
Freescale T4240QDS    | T4240QDS_RR_XXSSPRPH_1_28_6_12_1666MHz_rev2.bin  | 1,28,6,12       | 1666MHz
\te

The verified details of each RCW are:

For RCW T2080RDB_RRFFXX_P_66_1F_1800MHz.bin:
\ts
Interface | Available | Verified
--------------------------------
RGMII     | YES       | YES
SGMII     | N/A       | -
XAUI      | N/A       | -
XFI       | YES       | -
PCIe      | YES       | YES
SATA      | YES       | YES
sRIO      | N/A       | -
\te


For RCW T2080QDS_RR_PNNPPH_66_16_1533MHz.bin:
\ts
Interface | Available | Verified
--------------------------------
RGMII     | YES       | NO
SGMII     | N/A       | -
XAUI      | N/A       | -
XFI       | N/A       | -
PCIe      | YES       | SLOT 1,4,5
SATA      | YES       | NO
sRIO      | N/A       | -
\te

For RCW T4240QDS_RR_PNNPPH_1_38_6_12_1666MHz_rev2.bin:
\ts
Interface | Available | Verified
--------------------------------
RGMII     | YES       | YES
SGMII     | YES       | SLOT 3,4
QSGMII    | N/A       | -
XAUI      | YES       | SLOT 1,2
XFI       | N/A       | -
PCIe      | YES       | SLOT 5,7
SATA      | YES       | NO
sRIO      | N/A       | -
\te

Please reference the section 2.1.8 to update RCW in the primary bank.

About how to generate a new RCW binary for the processor, please find the RCW tool
called "Freescale QorIQ Configuration Suite" on the Freescale website.

\sh SERDES Configuration
Freescale QorIQ series processors offer a variety of high-speed serial interfaces,
sharing a set of SERDES lanes. Each interface is backed by a high speed serial interface
controller (Ethernet/PCIe/sRIO/SATA, etc)

The following is an example of SERDES lane allocation with RCW[SRDS_PRTCL_S1]= 0x66
and RCW[SRDS_PRTCL_S2]= 0x15 on T2080RDB-PC.
\bs
+---------------------------------------------------------------------------------------+
|             |         SERDES1         |             |             SERDES2             |
+---------------------------------------------------------------------------------------+
|SRDS_PRTCL_S1| A | B | C | D | E F G H |SRDS_PRTCL_S2| A B C D |  E  |  F  |  G  |  H  |
+---------------------------------------------------------------------------------------+
|      66     |XFI|XFI|XFI|XFI|  PEX#4  |      15     |  PEX#1  |   PEX#2   |SATA1|SATA2|
|             |   SFP Module  |  Slot   |             |  Finger |Coprocessor|    SATA   |
+---------------------------------------------------------------------------------------+
\be

For Freescale T2080QDS board, DIP-Switch SW7[1:8] and SW8[1:8] should match the RCW
field RCW SRDS_PRTCLn. SW4[1:8] should be set up correctly for the SERDES reference
clock frequencies.

The following is an example of SERDES lane allocation with RCW[SRDS_PRTCL_S1]= 0x66
and RCW[SRDS_PRTCL_S2]= 0x16 on T2080QDS.
\bs
+---------------------------------------------------------------------------------------+
|             |         SERDES1         |             |             SERDES2             |
+---------------------------------------------------------------------------------------+
|SRDS_PRTCL_S1| A | B | C | D | E F G H |SRDS_PRTCL_S2| A B C D |  E  |  F  |  G  |  H  |
+---------------------------------------------------------------------------------------+
|      66     |XFI|XFI|XFI|XFI|  PEX#4  |      16     |  PEX#1  |PEX#2|PEX#2|SATA1|SATA2|
|             |   SFP Module  |  Slot1  |             |  Slot4  |    Slot5  |    SATA   |
+---------------------------------------------------------------------------------------+
\be

Corresponding DIP-SWITCH settings for SERDES clock and protocol on T2080QDS:
\bs
+---------------------------------------------------------------+
|     SW4: 01111111     |   SW7: 01100110   |   SW8: 00010110   |
+---------------------------------------------------------------+
| SD1_REF1 CLK: 125 MHz |                   |                   |
| SD1_REF2 CLK: 100 MHz |   Match the RCW   |   Match the RCW   |
| SD2_REF1 CLK: 100 MHz | RCW SRDS_PRTCL_S1 | RCW_SRDS_PRTCL_S2 |
| SD2_REF2 CLK: 100 MHz |                   |                   |
+---------------------------------------------------------------+
\be

For Freescale T4240QDS board SW4[1:8] should be set up correctly for the SERDES
reference clock frequencies.

The following is an example of SERDES lane allocation with
    RCW[SRDS_PRTCL_S1]= 1
    RCW[SRDS_PRTCL_S2]= 28
    RCW[SRDS_PRTCL_S3]= 06
    RCW[SRDS_PRTCL_S4]= 12
on T4240QDS.
\bs
+-------------------------------------------------------------------------------------------+
|                   SERDES1                   |                    SERDES2                  |
+-------------+-------------------------------+---------------------------------------------+
|SRDS_PRTCL_S1| A | B | C | D | E | F | G | H |SRDS_PRTCL_S2| A | B | C | D | E | F | G | H |
+-------------+---------------+-----------------------------+-------------------------------+
|      1      |      XAUI     |      XAUI     |      28     | 5 | 6 | 10| 9 | 1 | 2 | 3 | 4 |
|             |   Fman1 MAC9  |  Fman1 MAC10  |             |   SGMII FMan2 |  SGMII FMan2  |
+-------------+-------------------------------+-------------+-------------------------------+
|                   SERDES3                   |                    SERDES4                  |
+-------------------------------------------------------------------------------------------+
|SRDS_PRTCL_S1| A | B | C | D | E | F | G | H |SRDS_PRTCL_S2| A | B | C | D | E | F | G | H |
+-------------------------------------------------------------------------------------------+
|      6      |      PEX#1    |     SRIO1     |      12     |      PEX#3    | Aurora| 1 | 2 |
|             |      Slot5    |     Slot1     |             |      Slot7    |       | SATA  |
+-------------------------------------------------------------------------------------------+
\be

Corresponding DIP-SWITCH settings for SERDES clock and protocol on T4240QDS:
\bs
+-----------------------+
|     SW4: 01010000     |
+------------------------
| SD1_REF1 CLK: 125 MHz |
| SD1_REF2 CLK: 125 MHz |
| SD2_REF1 CLK: 100 MHz |
| SD2_REF2 CLK: 100 MHz |
+-----------------------+
\be

Note that Slot #7 could only work with PCIe X1 card for this configuration.

\sh Serial Configuration

No special configuration needed, it is supported by component
DRV_SIO_FDT_NS16550 and enabled by default.

The default serial configuration is:
    Baud Rate: 115200
    Data: 8 bit
    Parity: None
    Stop: 1 bit
    Flow Control: None

\sh Network Configuration -- T4240
The T4240 has two DPAA Frame Managers (Fman) with 8 MEMAC controllers
each. These controllers may be configured for 10Mbps, 100Mbps, or 1Gbps 
in either RGMII or SGMII mode, or 2.5Gbps, 10Gbps operation in XAUI mode,
depending on the Reset Configuration Word (RCW) used with the system.   

Unlike earlier QorIQ processors, which had two different types of MACs for
10/100/1000 and 10Gbps (DTSEC and TGEC, respectively), the T4240 has only
one universal controller, called the MEMAC.
 
By default, the T4240 QDS board ships with two on-board 10/100/1000 ports,
configured for RGMII mode. These are defined as memac0 and memac1 in VxWorks.

The T4240 also has a number of expansion slots which can be used to
accommodate both PCIe cards and various network media expanders. The T4240
has been tested by Wind River with the 4-port 1Gbps SGMII riser card and
single port 10Gbps XAUI card.

The exact combination of media expanders that may be used with the board
depends on the SERDES configuration as set by the RCW. Most boards come
with SERDES1 configured for XAUI (0x1) and SERDES2 configured for SGMII (0x28).
This allows for the following slot configurations:

\cs
      Slot 1: 10Gbps XAUI
      Slot 2: 10Gbps XAUI
      Slot 3: 1Gbps SGMII
      Slot 4: 1Gbps SGMII
\ce

If all four expansion slots are populated with SGMII and XAUI risers,
the following network interfaces will be available:

\cs
      2x1Gbps RGMII on-bord ports  : memac0, memac1
      4x1Gbps SGMII riser in slot 3: memac2, memac3, memac4
      4x1Gbps SGMII riser in slot 4: memac5, memac6, memac7, memac8
      1x10Gbps XAUI riser in slot 1: memac9
      1x10Gbps XAUI riser in slot 2: memac10
\ce

Note that the SGMII and XAUI riser cards must be purchased separately from                                                    
Freescale. This means that out of the box, only memac0 and memac1 will
be usable (VxWorks still creates device nodes for the remaining ports,
but they are not usable unless the optional media expander cards are
installed) The SGMII riser supports four 1000baseT ports, while the XAUI
riser provides a single 10GBaseT port. The XAUI riser also has an SFP+ slot to
accommodate a 10GbaseSR fiber module, but this is not provided with the card.

Also note that With the default RCW configuration, the first port on the
SGMII riser card in slot 3 is not available. This is because the MAC that
corresponds to this port is configured for RGMII mode instead (it's actually
used as memac1).

\sh Network Configuration -- T2080
The T2080 has one DPAA Frame Manager (Fman) with 8 MEMAC controllers,
These controllers may be configured for 10Mbps, 100Mbps, or 1Gbps 
in either RGMII or SGMII mode, or 2.5Gbps, 10Gbps operation in XFI mode,
depending on the Reset Configuration Word (RCW) used with the system.   

Unlike earlier QorIQ processors, which had two different types of MACs for
10/100/1000 and 10Gbps (DTSEC and TGEC, respectively), the T2080 has only
one universal controller, called the MEMAC.
 
By default, the T2080QDS and T2080RDB boards ships with two on-board 10/100/1000 ports,
configured for RGMII mode. These are defined as memac0 and memac1 in VxWorks.

The T2080 QDS also comes configured with four on-board 10 gigabit ports,
operating in XFI mode. These are defined as memac2, memac3, memac4 and
memac5 in VxWorks. These ports are terminated in four SFP+ cages on
the front of the target (next to the power buttons). These SFP+ cages can
accommodate either SFP+ direct attach cables or fiber-optic modules. Either
10GBase-SR (fiber short range) or 10GBase-LR (fiber long range) modules
should work.

Note that neither SFP+ direct-attach cables nor SFP+ optical modules are
included with the T2080 QDS kit and must be purchased separately.

Additional ports may be added by installing SGMII in slots 1, 2, 3, or XAUI 
riser cards in the expansion slots, however this requires removing the cover.
This configuration has not yet been tested with the T2080 QDS board. The exact
set of media expander cards that can be used depends on the RCW. The default RCW
programmed on the board at the factory only enables the two RGMII ports and
four XFI ports, so it must be changed to use a different configuration.

Note that the SGMII and XAUI riser cards must be purchased separately from                                                    
Freescale. The SGMII riser supports four 1000baseT ports, while the XAUI
riser provides a single 10GBaseT port. The XAUI riser also has an SFP+ slot to
accommodate a 10GbaseSR fiber module, but this is not provided with the card.

\sh Network Configuration -- MAC addresses
The Ethernet Address (also known as the MAC address or Station
address) of the on-chip network controller is configured from the 
device tree node. To change it, just open the device tree source file, 
find the following property and modify it. For example:

\cs
      local-mac-address = [ 00 00 00 11 22 33 ];
\ce

\sh Jumbo frame support
When using 10 gigabit mode, better streaming performance may be achieved
using jumbo frames. Jumbo frame support may be enabled in the MEMAC driver
by editing the .dts files. By default jumbo frames are enabled only for the
10 gigabit interfaces, and can optionally be enabled for the 1Gbps interfaces.
For example, in the t4240qds.dts file, jumbo frames are enabled for the
memac6 interface using the jumboEnable property as shown below:

\cs
            ethernet@f0000 {
                phy-handle = <&xgmii_phy0>;
                phy-connection-type = "xgmii";
                jumboEnable = <1>;
                cell-index = <6>;
                local-mac-address = [ 00 04 9F 03 0A 57 ];
            };
\ce

Note that enabling jumbo frame support causes the MEMAC driver to allocate
larger RX buffers to support 9000 byte frames, and as such consumes more RAM.
Once the jumboEnable flag is set, the MTU on the network interface must be
increased to 9000 bytes (rather than the default of 1500) to begin using
jumbo frames.

\sh Network Drivers
The current VxWorks BSP only can be configured to support 1Gbps ports in
RGMII mode, 1Gbps ports in SGMII mode or 10Gbps ports in XFI/XAUI mode.
To enable MEMAC controller support, the follow driver components should
be added:

\cs
      DRV_VXBEND_QORIQMEMAC
      DRV_QORIQMEMAC_MDIO
      INCLUDE_GENERICPHY
      INCLUDE_GENERIC_MMD_PHY
      INCLUDE_FSL_SGMII_PHY
\ce

The INCLUDE_FSLSGMII_PHY driver is only required for supporting the 1Gbps
SGMII ports on the T4240 board. The INCLUDE_GENERICMMDPHY is only required
for supporting the 10Gbps XAUI ports on the T4240 board or the XFI ports
on the T2080 board.

\sh DPAA
In addition to the standard MEMAC END driver, support is also
provided for Qman, Bman, and Fman DPAA components. The vxbQorIQQman,
vxbQorIQBman, and vxbQorIQFman modules support the following functionality:

\is
\i User creation of Qman frame queues
\i Interrupt driven and polled Qman event handling
\i Management of Bman buffer pools
\i Use of Fman hard parser for RX checksum offload in the MEMAC driver
\i APIs provided to program the keygen, parser, coarse classifier and policer in the Fman
\ie

Documentation for these APIs can be found in the following files:

\is
\i vxbQorIQBmanPortal.c -- Bman API
\i vxbQorIQQmanPortal.c -- Qman API
\i vxbQorIQQmanFman.c -- Fman API
\ie

\sh I2C

The T2080RDB-PC has four I2C buses, The I2C1 port is used to access on-board devices,
such as DDR3 DIMM, RTC, I2C EEPROM, clock generator, thermal sensor (ADT7481),
and core power regulator (IR36021). The I2C2 bus uses multiplexers to partition
the I2C bus into several sub-buses, called channels. Two SFP+ optics use channel 0-1
and the PCIe SLOT use channel 3. I2C bus 3 and 4 are not used.

The 256KBit AT24C256C stores RCW and PBLOADER data, and the 256 bytes SystemId
EEPROM stores board specific data, including MAC addresses, serial number/errata
,etc. The 256 bytes AT24C02C SPD EEPROM store Contents follow established
SPD standards. So these EEPROM should be write protectable.  I2C3/4 are not used. 

To enable I2C function, DRV_FSL_I2C driver component should be added. To use
the DS1339 RTC device, the DRV_I2C_RTC driver component should be added. To use
the PCA9546 RTC device, the DRV_I2C_PCA954X driver component should be added.

Note: The RTC Alarm function is not supported on T2080RDB,T2080QDS and T4240QDS boards.

\ts
 Address| Device        size      Bus    Description             status
 ---------------------------------------------------------------------------
 0x08   | IR36021       0          1     Power Controller        UNSUPPORTED
 0x4C   | ATD7481       0          1     Thermal Sensor          UNSUPPORTED
 0x50   | AT24C256C     256KBit    1     Boot Sequencer EEPROM.  UNSUPPORTED
 0x51   | AT24C02C      256bytes   1     DDR1-SPD EEPROM.        UNSUPPORTED
 0x68   | DS1339        0          1     Real Time Clock         SUPPORTED
 0x6A   | IDT9FGV0641   0          1     PCIe Clock Generator    UNSUPPORTED
 0x77   | PCA9546       0          2     4-channel I2C switch    SUPPORTED
\te

The T2080QDS has four I2C buses, QDS systems attach all local devices
and DDR3 SPD EEPROM to the I2C1 bus, I2C2/3/4 are being reserved for
board-to-board communications.

The 512KBit AT24C512C stores RCW and PBLOADER data, and the 256 bytes SystemId
EEPROM stores board specific data, including MAC addresses, serial number/errata
,etc. The two 256 bytes AT24C02C SPD EEPROM store Contents follow established
SPD standards. So these EEPROM should be write protectable.

\ts
 Address| Device     size      Bus    Description             status
 ------------------------------------------------------------------------
 0x50   | AT24C512C  512KBit    1     Boot Sequencer EEPROM.  UNSUPPORTED
 0x51   | AT24C02C   256bytes   1     DDR1-SPD EEPROM.        UNSUPPORTED
 0x52   | AT24C02C   256bytes   1     DDR1-SPD EEPROM.        UNSUPPORTED
 0x57   | AT24C02C   256bytes   1     SystemId EEPROM.        UNSUPPORTED
 0x68   | DS3232     0          1     Real Time Clock         SUPPORTED
\te

To enable I2C function, DRV_FSL_I2C driver component should be added, and to use
the DS3232 RTC device, the DRV_I2C_RTC driver component should be added.

\sh DMA
Freescale DMA Controller 0/1 are supported in this release.
To enable DMA controller support, DRV_FSL_DMA driver component should be added.
DMA Controller 2 is disabled by default since Rev1 of T4240 only has two controllers.
To enable DMA controller 2 for T2080 or Rev2 of T4240, user need to
inlcude "qoriq-dma-2.dtsi" in _dts/t2t4qds.dtsi file. 


\sh SD memory card controller (eSDHC)
The eSDHC is support in this release. To support this, DRV_FSL_SDHC_CTRL
should be added. The DRV_FSL_SDHC_CTRL driver can support the SD card,
MMC card and eMMC chip.

The SDMMC layer is not enabled by default. User should add the below layers
into VSB and rebuild the VSB at first.

\cs
    vxprj vsb add SDMMC
    vxprj vsb add SDMMC_CORE
    vxprj vsb add SDMMC_DEVICE
    vxprj vsb add SDMMC_STORAGE
    vxprj vsb add SDMMC_HOST
    vxprj vsb add SDMMC_SDHC

\ce 

To enable DRV_FSL_SDHC_CTRL driver support, make sure the following components
are added in your VIP.

\cs
    #define DRV_FSL_SDHC_CTRL
    #define INCLUDE_SD_BUS
\ce

To support MMC card or eMMC chip, make sure the following component is added in
your VIP.

\cs
    #define DRV_MMCSTORAGE_CARD
\ce

To support SD card, make sure the following component is added in
your VIP.

\cs
    #define DRV_SDSTORAGE_CARD
\ce

\sh USB

The Freescale t2080 boards have two Freescale dual role USB controllers
in the SOC, which can be set as USB host or target. The USB0 only USB host is 
supported on t2080 board. It is compatible with USB EHCI specification when 
working as the host mode. Supports on-chip, USB-2.0, full-speed/high-speed PHY
with UTMI.

To enable the USB controller as host mode, layers and components for EHCI and Freescale 
on-chip PHY need be enabled in the VSB and VIP. Please note, the "dr_mode" in t2080qds.dts
should be set to "host".

VSB Configuration
\cs
    vxprj vsb add USB_EHCI
    vxprj vsb add USB_PHY
\ce

VIP Configuration
\cs
    vxprj vip component add INCLUDE_EHCI_INIT
    vxprj vip component add INCLUDE_USB_PHY_FSL_ONCHIP
\ce

While in the created VIP, components for EHCI and Freescale on-chip PHY need be
enabled. To use different USB devices, USB class drivers need be enabled too. 
Please refer to USB programmer guide for more detail to enable kinds of USB 
class driver. For example, following component will add USB mass storage class
 driver to support USB mass storage devices:

VSB Configuration
\cs
    vxprj vsb add USB_STORAGE
\ce

VIP Configuration
\cs
    vxprj vip component add INCLUDE_USB_GEN2_STORAGE_INIT
\ce

To enable the USB controller as target mode, layers and components for FSLDR and Freescale 
on-chip PHY need be enabled in the VSB and VIP. Please note, the "dr_mode" in t2080qds.dts
should be set to "target".

VSB Configuration
\cs
    vxprj vsb add USB_FSLDR
    vxprj vsb add USB_PHY
\ce

VIP Configuration
\cs
    vxprj vip component add INCLUDE_USB_FSL_TCD_INIT
    vxprj vip component add INCLUDE_USB_PHY_FSL_ONCHIP
\ce

Above components will make the USB host controller function. Please refer to USB 
programmer guide for more detail to enable kinds of USB function driver to support
different USB devices. For example, add USB mass storage function driver to support
USB mass storage devices:

VSB Configuration
\cs
    vxprj vsb add USB_MSC
\ce

VIP Configuration
\cs
    vxprj vip component add INCLUDE_USBTGT_MSC
\ce

\sh SPI-Flash

To enable the SPI Flash, components for SPI host controller driver and
flash chip driver need to be enabled in the VIP.

\cs
vxprj component add DRV_FSL_ESPI
vxprj component add DRV_SPIFLASH_SP25
\ce

If the TFFS is needed for SPI Flash, the TFFS components need to be enabled.

\cs
vxprj component add INCLUDE_TFFS INCLUDE_TL_FTL INCLUDE_TFFS_MOUNT
vxprj component add INCLUDE_TFFS_STUB_VXBFLASH
vxprj component add INCLUDE_MTD_VXBFLASH
vxprj parameter set VXBFLASH_CFG_STR \"\$flash0#0:0x0,0x80000,0x0,rfa0\"
\ce

User can use below command in target shell to format and enable TFFS.

\cs
sysTffsFormat 0
usrTffsConfig 0, 0, "/tffs0"
\ce

\sh NOR Flash & TFFS

NOR flash is supported but only up to 16 Mb of the device can be utilized by TFFS.
To use NOR flash, add the following component for the VIP:

\cs
    vxprj component add DRV_VXB_NORFLASH
    vxprj component add DRV_VXB_NORFLASH_CMDSET_AMD
\ce

If the TFFS is needed for NOR flash, the TFFS component needs to be enabled.

\cs
    vxprj component add INCLUDE_TFFS INCLUDE_TL_FTL INCLUDE_TFFS_MOUNT
    vxprj parameter set VXBFLASH_CFG_STR \"\$norflash0#0:0x0,0x1000000,0x0,rfa0\"
\ce

If the TFFS is needed for both NOR flash and SPI Flash, we set the VXBFLASH_CFG_STR:

\cs
vxprj parameter set VXBFLASH_CFG_STR \"\$flash0#0:0x0,0x80000,0x0,rfa0\;\$norflash0#1:0x0,0x1000000,0x0,rfa1\"
\ce

\sh PCI Express
This BSP supports PCI Express controller as Root Complex mode.

To add PCI Express support in this BSP, DRV_FSL_PCI driver component should
be added. INCLUDE_PCI_SHOW component can optionally be included to add
PCI show routines. By default, PCIe device driver uses INTx interrupts.
To enable MSI/MSI-X support, DRV_FSL_MSI driver component should be added.

Note:
The MPIC external pins IRQ[3-11] shares signals with GPIO1. The functionality of
these signals is determined by the IRQ_BASE and IRQ_EXT fields in the RCW
(RCW[IRQ_BASE] and RCW[IRQ_EXT]). However, GPIO1 is enabled by default so that
PCIE device couldn't use IRQ[3-11] for INTx interrupt. Therefore, we strongly
recommend user could enable MSI/MSI-X interrupt instead, otherwise user have to
make and reburn a new RCW with IRQ[3-11] enable.

\sh SATA

To use the SATA interface, component FDT_DRV_STORAGE_FSLSATA should be
added in the VIP

\cs
        FDT_DRV_STORAGE_FSLSATA
\ce

\sh SMP

VxWorks SMP(Symmetric Multiprocessing) kernels can be configured for use on
the multiprocessor target hardware supported by this BSP. Please refer to
the chapter "VxWorks SMP" in the vxworks_kernel_programmers_guide.pdf for
details about the SMP-specific features in the operating system.

For convenience, some key features for using SMP with this BSP are highlighted
below.

1. MMU

   VxWorks SMP does not support MMU-less configuration.

2. Cache and bus snoop

   Cache cannot be disabled in a VxWorks SMP system. Direct calls to the
   function cacheDisable() will do nothing.

   Also, only copy-back mode is tested and supported for VxWorks SMP kernels.
   This will be the default configuration set by BSP. Changing the cache mode
   to write-through may result in unpredictable behavior. Some architectures
   place additional restrictions on write-through mode. For example,
   write-through is not allowed at all by VxWorks for PowerPC processors because
   the atomic instructions stwcx and lwarx are used by the kernel and would
   generate machine check exceptions if the cache is in write-through mode.
   Similarly, ARM does not allow write-through with SMP.

3. CPU number

   The project parameter VX_SMP_NUM_CPUS is used to specify the number of CPUs
   assigned to the SMP kernel. The CPU number we are discussing here includes
   all the hardware units which have the same behavior as CPU, for example, the
   thread, hyper-thread, etc. VxWorks supports less than all of the CPUs in a
   multiprocessor system to participate in the SMP kernel. This allows some CPUs
   to be used for other purposes such as dedicated "bare-iron" tasks or
   additional asymmetric operating systems. CPUs not assigned to the SMP kernel
   are left in the default, power-on reset state.

4. Simultaneous Multithreading (SMT)

   Thread support on the T2080 processors enables two logical CPUs per physical
   core. Each thread acts as a unique CPU with its own register set and
   execution unit. This means that the two threads on a core can simultaneously
   execute two VxWorks tasks. Note, however, that some CPU resources are
   shared by the two threads. As a result, one thread can impact execution
   performance and determinism of its sibling thread.

   Thread support for a VxWorks SMP kernel configuration (VSB) can be enabled
   or disabled by adding or removing the _WRS_CONFIG_SMP_SMT VSB option.
   The number of CPUs configured and enabled for an SMP image is automatically
   adjusted depending upon the configuration. For example, for a system with 4
   cores with SMT support enabled, the value of VX_SMP_NUM_CPUS is 8. Without
   SMT support it is 4 (one thread per core).

   The VxWorks SMP scheduler optimization for SMT systems is enabled by
   including the INCLUDE_SMP_SCHED_SMT_POLICY component. This optimization
   provides load balancing across physical cores, so that whenever possible,
   only one of the sibling threads executes a task, while the other remains
   idle. This is only possible when the system is not fully loaded (i.e.
   when there are fewer ready tasks than the number of enabled threads).

   the SMT feature can be enabled without INCLUDE_SMP_SCHED_SMT_POLICY 
   (using the default SMP scheduling policy, INCLUDE_SMP_SCHED_DEFAULT_POLICY, 
   instead). To switch between the default scheduling policy and the SMT scheduling
   policy, add the desired component without explicitly removing the other one.

   For additional information please see the VxWorks Kernel Programmer's Guide,
   section 22.16 SMP Scheduler Policy for SMT - Simultaneous Multi-Threading.

5. Creating SMT VxWorks image

   5.1 Create and config a VSB (VxWorks Source Build)

	At first, you should check the BSP version which your VSB based on.
    The BSP version number "1_0_0_0" may be changed as the BSP updated,
    you may need to choose in the WorkBench or check which version you
    want by below command in the VxWorks 7 Development Shell:

\cs
   vxprj vsb listBsps
\ce

	And then you can see the released valid BSP version.
    A VSB must be created before a VIP could be used, and it could be created
    based on the BSP: fsl_t2t4_1_0_1_0 or CPU: PPCE6500.

        5.1.1 Create a VSB

        In the step of "Project Setup" in WorkBench, select
        fsl_t2t4_1_0_1_0 BSP or PPCE6500 CPU.

        Or just use one of the following commands in the VxWorks 7 Development
        Shell:

\cs
        vxprj vsb create -bsp fsl_t2t4_1_0_1_0 -S -smp ~/smtVsb
        vxprj vsb create -cpu PPCE6500 -S -smp ~/smtVsb
\ce

        5.1.2 Configure the VSB

            5.1.2.1 Configure the required layers

            For CPU based VSB, the following layers need to be enabled in the Source
            Build Configuration Editor of WorkBench:
\cs
            FDT
            BOARDLIB
            FSL_QORIQ
\ce

            Or just use below command to add all the layers needed:
\cs
            vxprj vsb add FSL_QORIQ
\ce

        5.1.3 Build the VSB

        Build the VSB in the WorkBench or use below command in the
        VxWorks 7 Development Shell:

\cs
        vxprj build
\ce

    5.2 Create a VIP based on the new VSB

    Please note: Both WorkBench and the VxWorks 7 Development Shell can
    be used for VIP creating and configuring. All below sections will only
    use the VxWorks 7 Development Shell command as an example, and the
    corresponding operation in WorkBench is quite straight forward.

        5.2.1 Create a VIP based on the new VSB

        In the same directory of the new VSB, use below command to create a VIP:

\cs
        vxprj vip create -vsb smtVsb fsl_t2t4_1_0_1_0 diab smtVip -smp
\ce

        5.2.2 Configure and build the VIP

        Currently, INCLUDE_SMP_SCHED_SMT_POLICY component
        is added when a VIP is created in SMP mode by default.

        If you want to use the default SMP scheduling policy, you should use the below
        command in your VIP project directory.

\cs
        vxprj component add INCLUDE_SMP_SCHED_DEFAULT_POLICY
\ce

        Use one of the below commands to create  VxWorks image:

\cs
        vxprj build uVxWorks
\ce

6. Creating SMP(without the SMT) VxWorks image

    6.1 Create and config a VSB (VxWorks Source Build)

 		6.1.1 Create a VSB

        In the step of "Project Setup" in WorkBench, select
        fsl_t2t4_1_0_1_0 BSP or PPCE6500 CPU.

        Or just use one of the following commands in the VxWorks 7 Development
        Shell:

\cs
        vxprj vsb create -bsp fsl_t2t4_1_0_1_0 -S -smp ~/smpVsb
        vxprj vsb create -cpu PPCE6500 -S -smp ~/smpVsb
\ce

        6.1.2 Configure the VSB

            6.1.2.1 Configure the required layers

            For CPU based VSB, the following layers need to be enabled in the Source
            Build Configuration Editor of WorkBench:

\cs
            FDT
            BOARDLIB
            FSL_QORIQ
\ce

            Or just use below command to add all the layers needed:

\cs
            vxprj vsb add FSL_QORIQ
\ce

            6.1.2.2 Configure the SMP feature.

	    	If you want to remove the SMT, disable the SMT feature, and use below commands 
            in the new VSB directory:

\cs
            vxprj vsb config -s -remove _WRS_CONFIG_SMP_SMT
\ce

       6.1.3 Build the VSB

        Build the VSB in the WorkBench or use below command in the
        VxWorks 7 Development Shell:
\cs
        vxprj build
\ce

    6.2 Create a VIP based on the new VSB

        6.2.1 Create a VIP based on the new VSB

        In the same directory of the new VSB, use below command to create a VIP:

\cs
        vxprj vip create -vsb smpVsb fsl_t2t4_1_0_1_0 diab smpVip -smp
\ce

        6.2.2 Configure and build the VIP

       Use one of the below commands to create VxWorks image:

\cs
       vxprj build uVxWorks
\ce

\sh Known Problems

BOARD LAYOUT

T2080RDB-PC
\bs
   +-+----+----+-+-+----+----+--------+
   | |ETH3|ETH2| | |    |    |        |
   | +----+----+   |ETH1|ETH0|  +-----+
 +-+               |    |    |  | ETH5|
 |                 |    |    |  +-----+
 |                 +----+----+  | ETH4|
 | PCIE-Finger                  +-----+
 |                                    |
 |                               +----+
 +--+                            | USB|
    |                            +----+
    |                            +----+
    | +------------+             |eMMC|
    | |            |             +----+
    | |            |                  |
    | |   T2080E   |         +-----+  |
    | |            |         |CPLD |  |
    | |            |         |     |  |
    | +------------+         +-----+  |
    | +---------------+   +---+       |
    | |               |   |   | +----+|
    | |    DDR DIMM   |   |NOR| | SW1||
    | |               |   |   | +----+|
    | +---------------+   +---+ | SW2||
    | +-------------+           +----+|
    | |             |           | SW3||
    | |    C293     |           +----+|
    | | coprocessor |                 |
    | |             |                 |
    | |             |                 |
    | +-------------+                 |
    | +-----++-----+                  |
    | +-----++-----+                  |
    |  SATA1  SATA2                   |
    | +----------------+              |
    | +----------------+ PCIE SLOT    |
    |                                 |
    |  +-------+                      |
    |  +-------+ T2080-COP            |
    |    +-------+              +-----+
    |    +-------+ C293-COP     |Power|
    |                           +-----+
    +---------------------------------+
\be

T2080QDS
\bs
+------------------------------------------------------------------------------+
| | | | | | | | | | |             |GETH1| |SD-CARD| |USB2| |USB1| |UART1|      |
| |S| |S| |S| |S| |S|             +-----+ +-------+ +----+ +----+ +-----+      |
| | | | | | | | | | |             |GETH2|                         |UART2|      |
| |L| |L| |L| |L| |L|             |(top)|                         |(top)|      |
| | | | | | | | | | |             +-----+                         +-----+      |
| |O| |O| |O| |O| |O|                                                          |
| | | | | | | | | | |    +-----++-----+                                        |
| |T| |T| |T| |T| |T|    |SATA1||SATA2|                                 +-+    |
| | | | | | | | | | |    +-----++-----+                                 |J|    |
| |1| |2| |3| |4| |5|                                                   |T|    |
| | | | | | | | | | |                          +-----------+            |A|    |
| +-+ +-+ +-+ +-+ +-+                          |           |            |G|    |
|                                              |   QorIQ   |            +-+    |
|                                              |           |                   |
|                                              |   T2080   |                   |
|                                              |           |                   |
|     +---+ +---+ +----+                       +-----------+                   |
|     |SW1| |SW5| |SW9 |                                                       |
|     +---+ +---+ +----+             +------------+                            |
|     +---+ +---+ +----+             | DDR3 DIMM2 |                            |
|     |SW2| |SW6| |SW10|             +------------+                            |
|+-+  +---+ +---+ +----+             +------------+                            |
||L|  +---+ +---+ +----+             | DDR3 DIMM1 |                            |
||E|  |SW3| |SW7| |SW11|             +------------+                            |
||D|  +---+ +---+ +----+                                                +-+    |
|+-+  +---+ +---+ +----+                                                | |    |
|     |SW4| |SW8| |SW12|                                                |A|    |
|     +---+ +---+ +----+                                                |T|    |
| +-------+              +---------------+                              |X|    |
| | POWER |              |SFP Module Cage|                              | |    |
| +-------+              +---------------+                              +-+    |
+------------------------------------------------------------------------------+
\be

T4240QDS
\bs
+-------------------------+----+-+-----+----+-----+----+-------+-------------------+
|       +-+ +-+ +-+ +-+   |USB1| |UART1|    |NENT1|    |SD-CARD|   +-+ +-+ +-+ +-+ |
|       |S| |S| |S| |S|   |USB2| |UART2|    |NENT2|    +-------+   |S| |S| |S| |S| |
|       |L| |L| |L| |L|   +----+ +-----+    +-----+                |L| |L| |L| |L| |
| +-+   |O| |O| |O| |O|                                            |O| |O| |O| |O| |
| |S|   |T| |T| |T| |T|   +--------------------------+             |T| |T| |T| |T| |
| |A|   | | | | | | | |   +--------------------------+ D2_DIMM#2   | | | | | | | | |
| |T|   |8| |7| |6| |5|   +--------------------------+ D2_DIMM#1   |1| |2| |3| |4| |
| |A|   +-+ | | +-+ | |   +--------------------------+ D1_DIMM#1   +-+ +-+ +-+ +-+ |
| |1|       | |     | |   +--------------------------+ D1_DIMM#2                   |
| +-+       | |     | |         +-----------+                                      |
| |S|       +-+     +-+         |           |                                      |
| |A|                           |           |                                      |
| |T|                           |   T4240   |                                      |
| |A|                           |           |                                      |
| |2|                           |           |                                      |
| +-+                           +-----------+                                      |
|                         +--------------------------+ D3_DIMM#2                   |
|                         +--------------------------+ D3_DIMM#1                   |
|                         +--------------------------+                             |
|                                                                                  |
|       +-----+-----+-----+-----+-----+                                            |
|       | SW1 | SW2 | SW3 | SW4 | SW9 |                                            |
|       +-----+-----+-----+-----+-----+               +----+ +----+                |
|       | SW5 | SW6 | SW7 | SW8 |                     |+12V| |+12V|                |
|       +-----+-----+-----+-----+                     +----+ +----+                |
|   +------+                                                 +-----------+         |
|   | JTAG |                                                 |   POWER   |         |
+---+------+-------------------------------------------------+-----------+---------+
\be


SEE ALSO

\tb Workbench User's Guide: Introduction
\tb VxWorks Programmer's Guide: Configuration
\tb VxWorks Programmer's Guide: Architecture Appendix

BIBLIOGRAPHY

\tb T2080RDB-PC Board Manual
\tb T2080RDB-PC Board Schematics
\tb T2080QDS Board Manual
\tb T2080QDS Board Schematics
\tb T4240QDS Board Manual
\tb T4240QDS Board Schematics
