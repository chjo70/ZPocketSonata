/* --------------------------------------------------------------------------------------- 

	2020-08-26 오후 3:22:26 
	
	레이더/레이더 모드/RF 시퀀스 등의 관련 테이블을 조인하여 레이더 목록, 레이더 목록 을 전시한다.

   --------------------------------------------------------------------------------------- */

/* VIEW 관련 테이블을 삭제합니다.	*/
/* CED 관련 뷰 테이블을 삭제 합니다. */
drop view if exists VEL_RADAR_LIST;
drop view if exists VEL_RADAR_PLATFORM_LIST;

drop view if exists VEL_RADAR_RF_SEQENCE;
drop view if exists VEL_RADAR_PRI_SEQENCE;
drop view if exists VEL_RADARMODE_LIST;

/* EOB 관련 뷰 테이블을 삭제 합니다. */
drop view if exists VEL_DEVICE_LIST;



/* 레이더 목록을 보여줍니다. */
CREATE VIEW VEL_RADAR_LIST AS
    SELECT  DISTINCT 
			RADAR.RADAR_INDEX,
			/* RADARMODE_LIFECYCLE.RADAR_INDEX,  */
			/* ASSOC_PLATFORM.PLATFORM_INDEX,  */
			
			RADAR.ELNOT,
			RADAR.NICK_NAME,
			RADAR.PRIORITY,
			RADAR.STATUS,
			RADAR.ACCEPTED,
			RADAR.PRIMARY_PLATFORM,
			RADAR.DATE_LAST_UPDATED,
			RADAR.DATE_LAST_REVIEWED,
			RADAR.TIME_INACTIVATED
			
    FROM RADAR 
	INNER JOIN RADARMODE_LIFECYCLE ON RADAR.RADAR_INDEX = RADARMODE_LIFECYCLE.RADAR_INDEX
	
    WHERE RADAR.ACCEPTED = 1
	
	ORDER BY RADAR.RADAR_INDEX ASC;
		   
/* 레이더 목록을 보여줍니다.(플레폼 연계) */
CREATE VIEW VEL_RADAR_PLATFORM_LIST AS
    SELECT  DISTINCT 
			RADAR.RADAR_INDEX,
			/* RADARMODE_LIFECYCLE.RADAR_INDEX,  */
			/* ASSOC_PLATFORM.PLATFORM_INDEX,  */
			
			RADAR.ELNOT,
			RADAR.NICK_NAME,
			RADAR.PRIORITY,
			RADAR.STATUS,
			RADAR.ACCEPTED,
			RADAR.PRIMARY_PLATFORM,
			RADAR.DATE_LAST_UPDATED,
			RADAR.DATE_LAST_REVIEWED,
			RADAR.TIME_INACTIVATED,
			
			PLATFORM.PLATFORM

    FROM RADAR 
	INNER JOIN RADARMODE_LIFECYCLE ON RADAR.RADAR_INDEX = RADARMODE_LIFECYCLE.RADAR_INDEX
	LEFT OUTER JOIN ASSOC_PLATFORM ON RADAR.RADAR_INDEX = ASSOC_PLATFORM.RADAR_INDEX
	LEFT OUTER JOIN PLATFORM ON ASSOC_PLATFORM.PLATFORM_INDEX = PLATFORM.PLATFORM_INDEX
	
    WHERE RADAR.ACCEPTED = 1
	
	ORDER BY RADAR.RADAR_INDEX ASC;

/* 레이더 모드(유효한 레이더/레이더모드)를 전시합니다. */
CREATE VIEW VEL_RADARMODE_LIST (
			RADAR_INDEX,
			RADARMODE_INDEX,
			
			RADAR_PRIORITY,
			RADAR_ELNOT,
			NICK_NAME,
			TIME_INACTIVATED,

			SIGNAL_TYPE,

			RF_TYPE,
			RF_RANGE_MIN,
			RF_RANGE_MAX,
			RF_PATTERN,
			RF_NUM_ELEMENTS,
			RF_NUM_POSITIONS,
			RF_PATTERN_PERIOD_MIN,
			RF_PATTERN_PERIOD_MAX,
			RF_MEAN_MIN,
			RF_MEAN_MAX,

			PRI_TYPE,
			PRI_RANGE_MIN,
			PRI_RANGE_MAX,
			PRI_PATTERN,
			PRI_NUM_ELEMENTS,
			PRI_NUM_POSITIONS,
			PRI_PATTERN_PERIOD_MIN,
			PRI_PATTERN_PERIOD_MAX,
			PRI_MEAN_MIN,
			PRI_MEAN_MAX,

			PD_RANGE_MIN,
			PD_RANGE_MAX,

			SCAN_PRIMARY_TYPE,
			SCAN_PRIMARY_RANGE_MIN,
			SCAN_PRIMARY_RANGE_MAX,
			SCAN_SECONDARY_TYPE,
			SCAN_SECONDARY_RANGE_MIN,
			SCAN_SECONDARY_RANGE_MAX,

			MODULATION_CODE,
			PRIORITY,
			VALIDATION,


			RADARMODE_NAME,
			MODECODE

/*
			THREAT_INDEX,
			DEVICE_INDEX,
			DEVICE_ELNOT
*/			
		) AS

		SELECT 
			RADARMODE_LIFECYCLE.RADAR_INDEX,
			RADARMODE.RADARMODE_INDEX,
			
			RADAR.PRIORITY,
			RADAR.ELNOT,
			RADAR.NICK_NAME,
			RADAR.TIME_INACTIVATED,

			RADARMODE.SIGNAL_TYPE,

			RADARMODE.RF_TYPE,
			RADARMODE.RF_RANGE_MIN,
			RADARMODE.RF_RANGE_MAX,
			RADARMODE.RF_PATTERN,
			RADARMODE.RF_NUM_ELEMENTS,
			RADARMODE.RF_NUM_POSITIONS,
			RADARMODE.RF_PATTERN_PERIOD_MIN,
			RADARMODE.RF_PATTERN_PERIOD_MAX,
			RADARMODE.RF_MEAN_MIN,
			RADARMODE.RF_MEAN_MAX,

			RADARMODE.PRI_TYPE,
			RADARMODE.PRI_RANGE_MIN,
			RADARMODE.PRI_RANGE_MAX,
			RADARMODE.PRI_PATTERN,
			RADARMODE.PRI_NUM_ELEMENTS,
			RADARMODE.PRI_NUM_POSITIONS,
			RADARMODE.PRI_PATTERN_PERIOD_MIN,
			RADARMODE.PRI_PATTERN_PERIOD_MAX,
			RADARMODE.PRI_MEAN_MIN,
			RADARMODE.PRI_MEAN_MAX,

			RADARMODE.PD_RANGE_MIN,
			RADARMODE.PD_RANGE_MAX,

			RADARMODE.SCAN_PRIMARY_TYPE,
			RADARMODE.SCAN_PRIMARY_RANGE_MIN,
			RADARMODE.SCAN_PRIMARY_RANGE_MAX,
			RADARMODE.SCAN_SECONDARY_TYPE,
			RADARMODE.SCAN_SECONDARY_RANGE_MIN,
			RADARMODE.SCAN_SECONDARY_RANGE_MAX,

			RADARMODE.MODULATION_CODE,
			RADARMODE.PRIORITY,
			RADARMODE.VALIDATION,

			
			RADARMODE_LIFECYCLE.RADARMODE_NAME,
			RADARMODE_LIFECYCLE.MODECODE

			/*
			DEVICE.THREAT_INDEX,
			DEVICE.DEVICE_INDEX,
			DEVICE.ELNOT		*/

	FROM RADARMODE
	LEFT JOIN RADARMODE_LIFECYCLE ON RADARMODE.RADARMODE_INDEX = RADARMODE_LIFECYCLE.RADARMODE_INDEX
	LEFT JOIN RADAR ON RADAR.RADAR_INDEX = RADARMODE_LIFECYCLE.RADAR_INDEX
/*	LEFT JOIN DEVICE ON RADAR.ELNOT = DEVICE.ELNOT		*/

	WHERE RADAR.STATUS = 'ACTIVE' AND RADARMODE.VALIDATION != 0
	
	ORDER BY RADARMODE_LIFECYCLE.RADAR_INDEX ASC, RADARMODE.RADARMODE_INDEX ASC;

/* 레이더 RF 시퀀스 목록(레이더모드가 유효)를 보여준다. */
CREATE VIEW VEL_RADAR_RF_SEQENCE AS
    SELECT   
			RADAR_RF_SEQUENCE_NAME.RF_SEQ_NAME,
			
			RADAR_RF_SEQUENCE.RADARMODE_INDEX,
            RADAR_RF_SEQUENCE.RF_SEQ_ID,
			RADAR_RF_SEQUENCE.RF_SEQUENCE_NUM,
			
			RADAR_RF_VALUES.RF_INDEX,
			RADAR_RF_VALUES.RF_MIN,
			RADAR_RF_VALUES.RF_MAX			

    FROM RADAR_RF_SEQUENCE
	LEFT JOIN RADAR_RF_SEQUENCE_NAME ON ( RADAR_RF_SEQUENCE.RF_SEQ_ID = RADAR_RF_SEQUENCE_NAME.RF_SEQ_ID AND RADAR_RF_SEQUENCE.RADARMODE_INDEX = RADAR_RF_SEQUENCE_NAME.RADARMODE_INDEX )
	LEFT JOIN RADAR_RF_VALUES ON ( RADAR_RF_SEQUENCE.RADARMODE_INDEX = RADAR_RF_VALUES.RADARMODE_INDEX AND RADAR_RF_SEQUENCE.RF_INDEX = RADAR_RF_VALUES.RF_INDEX )
	LEFT JOIN RADARMODE ON ( RADARMODE.RADARMODE_INDEX = RADAR_RF_SEQUENCE.RADARMODE_INDEX )	
	
	WHERE RADARMODE.VALIDATION != 0 AND ( RADAR_RF_VALUES.RF_MIN IS NOT NULL AND  RADAR_RF_VALUES.RF_MAX IS NOT NULL )
	
	ORDER BY RADAR_RF_SEQUENCE.RADARMODE_INDEX ASC, RADAR_RF_SEQUENCE.RF_SEQUENCE_NUM ASC;

/* 레이더 PRI 시퀀스 목록(레이더모드가 유효)를 보여준다. */
CREATE VIEW VEL_RADAR_PRI_SEQENCE AS
    SELECT   
			RADAR_PRI_SEQUENCE_NAME.PRI_SEQ_NAME,
			
			RADAR_PRI_SEQUENCE.RADARMODE_INDEX,
            RADAR_PRI_SEQUENCE.PRI_SEQ_ID,
			RADAR_PRI_SEQUENCE.PRI_SEQUENCE_NUM,
			
			RADAR_PRI_VALUES.PRI_INDEX,
			RADAR_PRI_VALUES.PRI_MIN,
			RADAR_PRI_VALUES.PRI_MAX
			

    FROM RADAR_PRI_SEQUENCE
	LEFT JOIN RADAR_PRI_SEQUENCE_NAME ON ( RADAR_PRI_SEQUENCE.PRI_SEQ_ID = RADAR_PRI_SEQUENCE_NAME.PRI_SEQ_ID AND RADAR_PRI_SEQUENCE.RADARMODE_INDEX = RADAR_PRI_SEQUENCE_NAME.RADARMODE_INDEX )
	LEFT JOIN RADAR_PRI_VALUES ON ( RADAR_PRI_SEQUENCE.RADARMODE_INDEX = RADAR_PRI_VALUES.RADARMODE_INDEX AND RADAR_PRI_SEQUENCE.PRI_INDEX = RADAR_PRI_VALUES.PRI_INDEX )
	LEFT JOIN RADARMODE ON ( RADARMODE.RADARMODE_INDEX = RADAR_PRI_SEQUENCE.RADARMODE_INDEX )
		
	WHERE RADARMODE.VALIDATION = 1 AND ( RADAR_PRI_VALUES.PRI_MIN IS NOT NULL AND  RADAR_PRI_VALUES.PRI_MAX IS NOT NULL )

	ORDER BY RADAR_PRI_SEQUENCE.RADARMODE_INDEX ASC, RADAR_PRI_SEQUENCE.PRI_SEQUENCE_NUM ASC;



CREATE VIEW VEL_DEVICE_LIST AS 
	SELECT 
		t1.THREAT_INDEX,
		t2.DEVICE_INDEX,
		
		t1.THREAT_NAME,
		t2.DEVICE_NAME,

		t2.ELNOT,

		t1.SITE_NAME,
		t1.PIN,
		t1.PLACE_NAME_KOR,
		t1.FRIEND_OR_FOE,
		t1.PRIORITY,
		t1.CATEGORY,
		t1.PLATFORM_TYPE,
		t1.SYMBOL_CODE,
		
		t2.IDENTIFICATION_RANGE,
		t2.LATITUDE,
		t2.LONGITUDE,
		t2.ALTITUDE		

		
	FROM THREAT AS t1, device AS t2
	WHERE t1.THREAT_INDEX = t2.THREAT_INDEX
	ORDER BY t1.THREAT_INDEX ASC;	
	
	
drop view if exists VEL_ACTIVE_AET_LIST;
drop view if exists VEL_ACTIVE_ABT_LIST;
drop view if exists VEL_ACTIVE_PEVALID_AET_LIST;
drop view if exists VEL_ACTIVE_PEVALID_ABT_LIST;

/* 활동중인 방사체를 보여준다. */
CREATE VIEW VEL_ACTIVE_AET_LIST AS
	SELECT 
		t1.AETID, 
		t1.ABTID,
		t1.FIRST_TIME,
		t1.LAST_TIME,
		
		t1.PRIMARY_ELNOT,
		t1.PRIMARY_MODECODE,
		t1.RADARMODE_NAME,
		t1.NICK_NAME,
		t1.RADARMODE_PRIORITY,
		t1.RADAR_PRIORITY,
		
		t1.PIN_NUM,
		t1.PLACENAME_KOR,
		t1.THREAT_PRIORITY,
		t1.RADAR_PRIORITY,
		t1.RADARMODE_INDEX,
		t1.THREAT_INDEX,
		t1.VALIDITY,
		
		t1.DOA_MEAN,
		t1.DOA_MIN,
		t1.DOA_MAX,
		t1.DOA_DEV,
		
		t1.FRQ_MEAN,
		t1.FRQ_MIN,
		t1.FRQ_MAX,
		t1.FRQ_DEV,
		
		t1.PRI_MEAN,
		t1.PRI_MIN,
		t1.PRI_MAX,
		t1.PRI_DEV,
		
		t1.PW_MEAN,
		t1.PW_MIN,
		t1.PW_MAX,
		t1.PW_DEV,
		
		t1.PA_MEAN,
		t1.PA_MIN,
		t1.PA_MAX,
		t1.PA_DEV,

		t1.PE_VALID,
		t1.PE_LATITUDE,
		t1.PE_LONGITUDE,
		t1.PE_HEIGHT,
		t1.PE_CEP,
		t1.PE_MAJOR_AXIS,
		t1.PE_MINOR_AXIS,
		t1.PE_THETA,
		t1.PE_DISTANCE,	
		
		t1.NUM_OF_BEAMS,			
		t1.NUM_OF_LOBS,					
		
		t1.IDINFO	
	
		
	FROM AETDATA AS t1, ( SELECT AETID, ABTID, MAX(rowid) AS max_aetid, MAX(OP_INIT_ID) AS MAX_OP_INIT_ID FROM ABTDATA GROUP BY AETID ) AS t2
	WHERE t1.ROWID = t2.MAX_AETID AND t1.AETID = t2.AETID AND t1.ABTID = t2.ABTID AND t1.STAT != 4 AND t1.OP_INIT_ID = t2.MAX_OP_INIT_ID
	ORDER BY t1.LAST_TIME DESC;

/* 활동중인 빔을 보여준다. */
CREATE VIEW VEL_ACTIVE_ABT_LIST AS
	SELECT 
		t1.AETID, 
		t1.ABTID,
		t1.FIRST_TIME,
		t1.LAST_TIME,
		
		t1.PRIMARY_ELNOT,
		t1.PRIMARY_MODECODE,
		t1.MODULATION_CODE,
		t1.PLACENAME_KOR,
		t1.NICK_NAME,
		t1.RADARMODE_NAME,	
		t1.RADARMODE_PRIORITY,	
		t1.RADAR_PRIORITY,	
		t1.RADARMODE_INDEX,		
		t1.THREAT_INDEX,	

		t1.SIGNAL_TYPE,
		
		t1.DOA_MEAN,
		t1.DOA_MIN,
		t1.DOA_MAX,
		t1.DOA_DEV,
		
		t1.FREQ_TYPE,
		t1.FREQ_PATTERN_TYPE,
		t1.FREQ_PATTERN_PERIOD_MEAN,
		t1.FREQ_PATTERN_PERIOD_MIN,
		t1.FREQ_PATTERN_PERIOD_MAX,
		t1.FREQ_MEAN,
		t1.FREQ_MIN,
		t1.FREQ_MAX,
		t1.FREQ_DEV,
		t1.FREQ_POSITION_COUNT,
		t1.FREQ_ELEMENT_COUNT,
	
		t1.PRI_TYPE,
		t1.PRI_PATTERN_TYPE,
		t1.PRI_PATTERN_PERIOD_MEAN,
		t1.PRI_PATTERN_PERIOD_MIN,
		t1.PRI_PATTERN_PERIOD_MAX,
		t1.PRI_MEAN,
		t1.PRI_MIN,
		t1.PRI_MAX,
		t1.PRI_DEV,
		t1.PRI_JITTER_RATIO,
		t1.PRI_POSITION_COUNT,
		t1.PRI_ELEMENT_COUNT,

		t1.PW_MEAN,
		t1.PW_MIN,
		t1.PW_MAX,
		t1.PW_DEV,
		
		t1.PA_MEAN,
		t1.PA_MIN,
		t1.PA_MAX,
		t1.PA_DEV,
		
		t1.SCAN_TYPE,
		t1.SCAN_PRD_MEAN_SEC,
		t1.SCAN_PRD_MIN_SEC,
		t1.SCAN_PRD_MAX_SEC,
		t1.HAS_INTRA_MOD,
		t1.INTRA_FRQ_CHNG_WID_MIN,
		t1.INTRA_FRQ_CHNG_WID_MAX,

		t1.PE_VALID,
		t1.PE_LATITUDE,
		t1.PE_LONGITUDE,
		t1.PE_CEP,
		t1.PE_MAJOR_AXIS,
		t1.PE_MINOR_AXIS,
		t1.PE_THETA,
		t1.PE_DISTANCE,

		t1.TOTAL_PDW,	
		t1.NUM_LOB,	
		t1.STAT	

	FROM ABTDATA AS t1, ( SELECT AETID, ABTID, MAX(rowid) AS MAX_AETID, MAX(OP_INIT_ID) AS MAX_OP_INIT_ID FROM ABTDATA GROUP BY AETID ) AS t2
	WHERE t1.ROWID = t2.MAX_AETID AND t1.AETID = t2.AETID AND t1.ABTID = t2.ABTID AND t1.STAT != 4 AND t1.OP_INIT_ID = t2.MAX_OP_INIT_ID
	ORDER BY t1.LAST_TIME DESC;

/* 활동중인 위치 산출된 방사체를 보여준다. */
CREATE VIEW VEL_ACTIVE_PEVALID_AET_LIST AS
	SELECT 
		t1.AETID, 
		t1.ABTID,
		t1.FIRST_TIME,
		t1.LAST_TIME,
		
		t1.PRIMARY_ELNOT,
		t1.PRIMARY_MODECODE,
		t1.RADARMODE_NAME,
		t1.NICK_NAME,
		t1.PLATFORM_TYPE,
		t1.RADARMODE_PRIORITY,
		t1.RADAR_PRIORITY,
		
		t1.PIN_NUM,
		t1.PLACENAME_KOR,
		t1.THREAT_PRIORITY,
		t1.RADAR_PRIORITY,
		t1.RADARMODE_INDEX,
		t1.THREAT_INDEX,
		t1.VALIDITY,
		
		t1.DOA_MEAN,
		t1.DOA_MIN,
		t1.DOA_MAX,
		t1.DOA_DEV,
		
		t1.FRQ_MEAN,
		t1.FRQ_MIN,
		t1.FRQ_MAX,
		t1.FRQ_DEV,
		
		t1.PRI_MEAN,
		t1.PRI_MIN,
		t1.PRI_MAX,
		t1.PRI_DEV,
		
		t1.PW_MEAN,
		t1.PW_MIN,
		t1.PW_MAX,
		t1.PW_DEV,
		
		t1.PA_MEAN,
		t1.PA_MIN,
		t1.PA_MAX,
		t1.PA_DEV,

		t1.PE_VALID,
		t1.PE_LATITUDE,
		t1.PE_LONGITUDE,
		t1.PE_HEIGHT,
		t1.PE_CEP,
		t1.PE_MAJOR_AXIS,
		t1.PE_MINOR_AXIS,
		t1.PE_THETA,
		t1.PE_DISTANCE,	
		
		t1.STAT,			

		t1.NUM_OF_BEAMS,			
		t1.NUM_OF_LOBS,					
		
		t1.IDINFO
	
		
	FROM AETDATA AS t1, ( SELECT AETID, ABTID, max(rowid) AS max_aetid FROM ABTDATA GROUP BY AETID ) AS t2
	WHERE t1.ROWID = t2.MAX_AETID AND t1.AETID = t2.AETID AND t1.ABTID = t2.ABTID AND t1.STAT != 4 AND t1.PE_VALID == 1
	ORDER BY t1.LAST_TIME DESC;

/* 활동중인 빔을 보여준다. */
CREATE VIEW VEL_ACTIVE_PEVALID_ABT_LIST AS 
	SELECT 
		t1.AETID, 
		t1.ABTID,
		t1.FIRST_TIME,
		t1.LAST_TIME,
		
		t1.PRIMARY_ELNOT,
		t1.PRIMARY_MODECODE,
		t1.MODULATION_CODE,
		t1.PLACENAME_KOR,
		t1.NICK_NAME,
		t1.RADARMODE_NAME,	
		t1.RADARMODE_PRIORITY,	
		t1.RADAR_PRIORITY,	
		t1.RADARMODE_INDEX,		
		t1.THREAT_INDEX,	

		t1.SIGNAL_TYPE,
		
		t1.DOA_MEAN,
		t1.DOA_MIN,
		t1.DOA_MAX,
		t1.DOA_DEV,
		
		t1.FREQ_TYPE,
		t1.FREQ_PATTERN_TYPE,
		t1.FREQ_PATTERN_PERIOD_MEAN,
		t1.FREQ_PATTERN_PERIOD_MIN,
		t1.FREQ_PATTERN_PERIOD_MAX,
		t1.FREQ_MEAN,
		t1.FREQ_MIN,
		t1.FREQ_MAX,
		t1.FREQ_DEV,
		t1.FREQ_POSITION_COUNT,
		t1.FREQ_ELEMENT_COUNT,
	
		t1.PRI_TYPE,
		t1.PRI_PATTERN_TYPE,
		t1.PRI_PATTERN_PERIOD_MEAN,
		t1.PRI_PATTERN_PERIOD_MIN,
		t1.PRI_PATTERN_PERIOD_MAX,
		t1.PRI_MEAN,
		t1.PRI_MIN,
		t1.PRI_MAX,
		t1.PRI_DEV,
		t1.PRI_JITTER_RATIO,
		t1.PRI_POSITION_COUNT,
		t1.PRI_ELEMENT_COUNT,

		t1.PW_MEAN,
		t1.PW_MIN,
		t1.PW_MAX,
		t1.PW_DEV,
		
		t1.PA_MEAN,
		t1.PA_MIN,
		t1.PA_MAX,
		t1.PA_DEV,
		
		t1.SCAN_TYPE,
		t1.SCAN_PRD_MEAN_SEC,
		t1.SCAN_PRD_MIN_SEC,
		t1.SCAN_PRD_MAX_SEC,
		t1.HAS_INTRA_MOD,
		t1.INTRA_FRQ_CHNG_WID_MIN,
		t1.INTRA_FRQ_CHNG_WID_MAX,

		t1.PE_VALID,
		t1.PE_LATITUDE,
		t1.PE_LONGITUDE,
		t1.PE_CEP,
		t1.PE_MAJOR_AXIS,
		t1.PE_MINOR_AXIS,
		t1.PE_THETA,
		t1.PE_DISTANCE,

		t1.TOTAL_PDW,	
		t1.NUM_LOB,	
		t1.STAT	

	FROM ABTDATA AS t1, ( SELECT AETID, ABTID, max(rowid) AS MAX_AETID, MAX(OP_INIT_ID) AS OP_INIT_ID FROM ABTDATA GROUP BY AETID ) AS t2
	WHERE t1.ROWID = t2.MAX_AETID AND t1.AETID = t2.AETID AND t1.ABTID = t2.ABTID AND t1.STAT != 4 AND t1.PE_VALID == 1
	ORDER BY t1.LAST_TIME DESC;




